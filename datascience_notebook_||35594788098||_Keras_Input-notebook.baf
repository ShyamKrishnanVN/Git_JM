{"dslabserviceresp":{"queryService":[],"bizvizWorkspace":"{\"reserv1\":\"\",\"reserv2\":\"\",\"reserv3\":\"\",\"reserv4\":\"\",\"reserv5\":\"\",\"createdDate\":1724908868992,\"isActive\":0,\"lastUpdatedDate\":null,\"active\":1,\"migrationId\":null,\"loggedUserId\":null,\"mongoQL\":null,\"id\":20282525387,\"name\":\"Sanity Project 10 \",\"count\":null,\"parentId\":null,\"userId\":\"48201728\",\"isFile\":false,\"infoJson\":\"{\\\"external_libraries\\\":\\\"\\\",\\\"confDetails\\\":{\\\"high\\\":{\\\"nonspark\\\":{\\\"request\\\":{\\\"memory\\\":\\\"4096Mi\\\",\\\"cpu\\\":\\\"1000m\\\"},\\\"limit\\\":{\\\"memory\\\":\\\"12000Mi\\\",\\\"cpu\\\":\\\"4000m\\\"}}},\\\"low\\\":{\\\"realtime\\\":{\\\"nonspark\\\":{\\\"request\\\":{\\\"memory\\\":\\\"2048Mi\\\",\\\"cpu\\\":\\\"500m\\\"},\\\"limit\\\":{\\\"memory\\\":\\\"4096Mi\\\",\\\"cpu\\\":\\\"1000m\\\"}}}},\\\"medium\\\":{\\\"nonspark\\\":{\\\"request\\\":{\\\"memory\\\":\\\"4096Mi\\\",\\\"cpu\\\":\\\"1000m\\\"},\\\"limit\\\":{\\\"memory\\\":\\\"8192Mi\\\",\\\"cpu\\\":\\\"2000m\\\"}}}},\\\"idle_shutdown\\\":\\\"30m\\\",\\\"project_url\\\":\\\"\\\",\\\"project_name\\\":\\\"Sanity Project 10 \\\",\\\"modelCount\\\":92,\\\"resource_allocation\\\":\\\"medium\\\",\\\"configured_branch\\\":\\\"\\\",\\\"apiImageName\\\":\\\"371194629034.dkr.ecr.ap-south-1.amazonaws.com/rel/dsmodelapi\\\",\\\"dataSetsCount\\\":7,\\\"gpuType\\\":\\\"\\\",\\\"imageVersion\\\":\\\"9.2.1000\\\",\\\"imageName\\\":\\\"371194629034.dkr.ecr.ap-south-1.amazonaws.com/rel/dsnotebook-tensorflow\\\",\\\"notebookCount\\\":16,\\\"apiImageVersion\\\":\\\"9.2.1000\\\",\\\"appName\\\":\\\"\\\",\\\"git_project\\\":\\\"\\\",\\\"removedLibraries\\\":\\\"\\\",\\\"isGitsyncProject\\\":false,\\\"utilsCount\\\":5,\\\"environment\\\":\\\"PythonTensorFlow\\\",\\\"project_description\\\":\\\"Sanity\\\",\\\"Algorithms\\\":[\\\"Regression\\\",\\\"Classification\\\",\\\"Forecasting\\\",\\\"Unsupervised\\\",\\\"Natural Language Processing\\\"],\\\"gpuLimit\\\":\\\"\\\",\\\"automlCount\\\":13,\\\"projectLabel\\\":\\\"\\\",\\\"branchLabel\\\":\\\"\\\"}\",\"spaceKey\":\"1112\",\"type\":10,\"status\":1,\"contentJson\":\"[{\\\"id\\\":35429960855,\\\"uuid\\\":\\\"11121730870237158\\\",\\\"createdDate\\\":1730870232521,\\\"dataSourceType\\\":\\\"postgresql\\\",\\\"type\\\":\\\"Feature Store\\\",\\\"queryservicename\\\":\\\"PostgreSQL_FS\\\",\\\"version\\\":\\\"1\\\",\\\"superFeatureSetId\\\":35429959837},{\\\"id\\\":35427366189,\\\"uuid\\\":\\\"11121730870003453\\\",\\\"createdDate\\\":1730869962176,\\\"dataSourceType\\\":\\\"clickhouse\\\",\\\"type\\\":\\\"Feature Store\\\",\\\"queryservicename\\\":\\\"ClickHouse_FS\\\",\\\"version\\\":\\\"1\\\",\\\"superFeatureSetId\\\":35427365164},{\\\"id\\\":35391852024,\\\"uuid\\\":\\\"11121730812429634\\\",\\\"createdDate\\\":1730812389918,\\\"dataSourceType\\\":\\\"mysql\\\",\\\"type\\\":\\\"Feature Store\\\",\\\"queryservicename\\\":\\\"Mysql_FS\\\",\\\"version\\\":\\\"2\\\",\\\"superFeatureSetId\\\":35391749335},{\\\"id\\\":35391750355,\\\"uuid\\\":\\\"11121730812417023\\\",\\\"createdDate\\\":1730812375336,\\\"dataSourceType\\\":\\\"mysql\\\",\\\"type\\\":\\\"Feature Store\\\",\\\"queryservicename\\\":\\\"Mysql_FS\\\",\\\"version\\\":\\\"1\\\",\\\"superFeatureSetId\\\":35391749335},{\\\"queryservicename\\\":\\\"Limrick\\\",\\\"id\\\":35396328187,\\\"type\\\":\\\"Data Sandbox\\\",\\\"uuid\\\":\\\"11121730813170390\\\",\\\"extenstion\\\":\\\"xlsx\\\",\\\"fileType\\\":\\\"\\\",\\\"dataSourceType\\\":\\\"xlsx\\\",\\\"createdDate\\\":1730813170000},{\\\"queryservicename\\\":\\\"Abalone_V1\\\",\\\"id\\\":1209316425,\\\"type\\\":\\\"Data Sandbox\\\",\\\"uuid\\\":\\\"11121717741764080\\\",\\\"extenstion\\\":\\\"csv\\\",\\\"fileType\\\":\\\"\\\",\\\"dataSourceType\\\":\\\"csv\\\",\\\"createdDate\\\":1717741764000},{\\\"queryservicename\\\":\\\"prod_dataste\\\",\\\"id\\\":91979776,\\\"type\\\":\\\"Data Sets\\\",\\\"uuid\\\":\\\"11121706958702385\\\",\\\"dataSourceType\\\":\\\"clickhouse\\\",\\\"createdDate\\\":\\\"2024-02-03 11:11:42\\\"},{\\\"createdDate\\\":\\\"2024-08-27 09:17:46\\\",\\\"id\\\":19798665762,\\\"type\\\":\\\"Data Sets\\\",\\\"queryservicename\\\":\\\"NLP_filter\\\",\\\"uuid\\\":\\\"11111724750266141\\\",\\\"dataSourceType\\\":\\\"mysql\\\"},{\\\"createdDate\\\":1724654206000,\\\"extenstion\\\":\\\"csv\\\",\\\"id\\\":19387472600,\\\"type\\\":\\\"Data Sandbox\\\",\\\"queryservicename\\\":\\\"Covid_data\\\",\\\"uuid\\\":\\\"11111724654203699\\\",\\\"fileType\\\":\\\"\\\",\\\"dataSourceType\\\":\\\"csv\\\"},{\\\"createdDate\\\":1722936388000,\\\"extenstion\\\":\\\"csv\\\",\\\"id\\\":15380549391,\\\"type\\\":\\\"Data Sandbox\\\",\\\"queryservicename\\\":\\\"PA\\\",\\\"uuid\\\":\\\"11111722936388595\\\",\\\"fileType\\\":\\\"\\\",\\\"dataSourceType\\\":\\\"csv\\\"},{\\\"extenstion\\\":\\\"Data Sandbox\\\",\\\"id\\\":38928409,\\\"type\\\":\\\"Data Sandbox\\\",\\\"queryservicename\\\":\\\"Hiring_data\\\",\\\"uuid\\\":\\\"11111687770981000\\\",\\\"fileType\\\":\\\"\\\",\\\"dataSourceType\\\":\\\"Data Sandbox\\\"},{\\\"createdDate\\\":\\\"2024-07-15 10:34:29\\\",\\\"id\\\":9528690114,\\\"type\\\":\\\"Data Sets\\\",\\\"queryservicename\\\":\\\"Oracle_data\\\",\\\"uuid\\\":\\\"11111721039669612\\\",\\\"dataSourceType\\\":\\\"oracle\\\"},{\\\"createdDate\\\":1721112793681,\\\"id\\\":9693206412,\\\"type\\\":\\\"Feature Store\\\",\\\"uuid\\\":\\\"11111721112829222\\\",\\\"queryservicename\\\":\\\"Feature store sample\\\",\\\"version\\\":\\\"1\\\",\\\"superFeatureSetId\\\":9693205371,\\\"dataSourceType\\\":\\\"mysql\\\"},{\\\"createdDate\\\":1721112891730,\\\"id\\\":9695074228,\\\"type\\\":\\\"Feature Store\\\",\\\"uuid\\\":\\\"11111721112896812\\\",\\\"queryservicename\\\":\\\"Feature store sample\\\",\\\"version\\\":\\\"2\\\",\\\"superFeatureSetId\\\":9693205371,\\\"dataSourceType\\\":\\\"mysql\\\"},{\\\"extenstion\\\":\\\"xlsx\\\",\\\"id\\\":103907494,\\\"type\\\":\\\"Data Sandbox\\\",\\\"queryservicename\\\":\\\"Order Sales\\\",\\\"uuid\\\":\\\"11111716887391738\\\",\\\"fileType\\\":\\\"\\\"}]\",\"templateJson\":\"\",\"isShared\":null,\"updatedBy\":\"48201728\",\"uuid\":\"11111687761334437\",\"createdUserName\":null}","envVariables":[],"utility":"[]","utilityContent":"{}","sandboxService":[],"notebookContent":"{\"nbformat_minor\":2,\"metadata\":{},\"cells\":[{\"outputs\":[],\"metadata\":{\"id\":\"0_0.6391547924327499\"},\"execution_count\":null,\"source\":[\"def keras_input():\\n    import tensorflow as tf\\n    # from tensorflow.keras import layers\\n    import pandas as pd\\n    import numpy as np\\n    # from tensorflow.keras import datasets, layers, models\\n    # from tensorflow.keras.utils import to_categorical\\n    from sklearn.preprocessing import LabelEncoder\\n    names = ['sepal length (cm)', 'sepal width (cm)', 'petal length (cm)',\\n           'petal width (cm)', 'species']\\n    df = pd.read_csv('https://raw.githubusercontent.com/jbrownlee/Datasets/master/iris.csv', names=names)\\n    X = df.iloc[:,0:4].values\\n    y = df.iloc[:,4].values\\n    encoder =  LabelEncoder()\\n    y1 = encoder.fit_transform(y);\\n    Y = pd.get_dummies(y1).values\\n    from sklearn.model_selection import train_test_split\\n    X_train, X_test, y_train, y_test = train_test_split(X, Y, test_size=0.2, random_state=0)\\n    out = pd.DataFrame(X_test)\\n    return out\"],\"cell_type\":\"code\"},{\"outputs\":[],\"metadata\":{\"id\":\"35594788098_0.376453598981743\"},\"execution_count\":null,\"source\":[\"keras_input()\"],\"cell_type\":\"code\"},{\"outputs\":[],\"metadata\":{\"id\":\"35594788098_0.5642771273286848\"},\"execution_count\":6,\"source\":[\"from Notebook.DSNotebook.NotebookExecutor import NotebookExecutor\\nnb = NotebookExecutor()\\nloaded_model = nb.load_saved_model('11121730801110749')\"],\"cell_type\":\"code\"},{\"outputs\":[{\"output_type\":\"stream\",\"name\":\"stdout\",\"text\":\"1/1 [==============================] - 0s 32ms/step\\n\"},{\"metadata\":{},\"data\":{\"text/html\":[\"<div>\\n<style scoped>\\n    .dataframe tbody tr th:only-of-type {\\n        vertical-align: middle;\\n    }\\n\\n    .dataframe tbody tr th {\\n        vertical-align: top;\\n    }\\n\\n    .dataframe thead th {\\n        text-align: right;\\n    }\\n<\\/style>\\n<table border=\\\"1\\\" class=\\\"dataframe\\\">\\n  <thead>\\n    <tr style=\\\"text-align: right;\\\">\\n      <th><\\/th>\\n      <th>0<\\/th>\\n      <th>1<\\/th>\\n      <th>2<\\/th>\\n      <th>3<\\/th>\\n      <th>predictions<\\/th>\\n    <\\/tr>\\n  <\\/thead>\\n  <tbody>\\n    <tr>\\n      <th>0<\\/th>\\n      <td>5.8<\\/td>\\n      <td>2.8<\\/td>\\n      <td>5.1<\\/td>\\n      <td>2.4<\\/td>\\n      <td>0.755524<\\/td>\\n    <\\/tr>\\n    <tr>\\n      <th>1<\\/th>\\n      <td>6.0<\\/td>\\n      <td>2.2<\\/td>\\n      <td>4.0<\\/td>\\n      <td>1.0<\\/td>\\n      <td>0.576399<\\/td>\\n    <\\/tr>\\n    <tr>\\n      <th>2<\\/th>\\n      <td>5.5<\\/td>\\n      <td>4.2<\\/td>\\n      <td>1.4<\\/td>\\n      <td>0.2<\\/td>\\n      <td>0.984336<\\/td>\\n    <\\/tr>\\n    <tr>\\n      <th>3<\\/th>\\n      <td>7.3<\\/td>\\n      <td>2.9<\\/td>\\n      <td>6.3<\\/td>\\n      <td>1.8<\\/td>\\n      <td>0.818676<\\/td>\\n    <\\/tr>\\n    <tr>\\n      <th>4<\\/th>\\n      <td>5.0<\\/td>\\n      <td>3.4<\\/td>\\n      <td>1.5<\\/td>\\n      <td>0.2<\\/td>\\n      <td>0.968947<\\/td>\\n    <\\/tr>\\n    <tr>\\n      <th>...<\\/th>\\n      <td>...<\\/td>\\n      <td>...<\\/td>\\n      <td>...<\\/td>\\n      <td>...<\\/td>\\n      <td>...<\\/td>\\n    <\\/tr>\\n    <tr>\\n      <th>25<\\/th>\\n      <td>4.6<\\/td>\\n      <td>3.6<\\/td>\\n      <td>1.0<\\/td>\\n      <td>0.2<\\/td>\\n      <td>0.980480<\\/td>\\n    <\\/tr>\\n    <tr>\\n      <th>26<\\/th>\\n      <td>5.1<\\/td>\\n      <td>3.8<\\/td>\\n      <td>1.9<\\/td>\\n      <td>0.4<\\/td>\\n      <td>0.842531<\\/td>\\n    <\\/tr>\\n    <tr>\\n      <th>27<\\/th>\\n      <td>6.2<\\/td>\\n      <td>2.9<\\/td>\\n      <td>4.3<\\/td>\\n      <td>1.3<\\/td>\\n      <td>0.646960<\\/td>\\n    <\\/tr>\\n    <tr>\\n      <th>28<\\/th>\\n      <td>5.0<\\/td>\\n      <td>2.3<\\/td>\\n      <td>3.3<\\/td>\\n      <td>1.0<\\/td>\\n      <td>0.656158<\\/td>\\n    <\\/tr>\\n    <tr>\\n      <th>29<\\/th>\\n      <td>5.0<\\/td>\\n      <td>3.4<\\/td>\\n      <td>1.6<\\/td>\\n      <td>0.4<\\/td>\\n      <td>0.945904<\\/td>\\n    <\\/tr>\\n  <\\/tbody>\\n<\\/table>\\n<p>30 rows × 5 columns<\\/p>\\n<\\/div>\"],\"text/plain\":[\"      0    1    2    3  predictions\\n0   5.8  2.8  5.1  2.4     0.755524\\n1   6.0  2.2  4.0  1.0     0.576399\\n2   5.5  4.2  1.4  0.2     0.984336\\n3   7.3  2.9  6.3  1.8     0.818676\\n4   5.0  3.4  1.5  0.2     0.968947\\n..  ...  ...  ...  ...          ...\\n25  4.6  3.6  1.0  0.2     0.980480\\n26  5.1  3.8  1.9  0.4     0.842531\\n27  6.2  2.9  4.3  1.3     0.646960\\n28  5.0  2.3  3.3  1.0     0.656158\\n29  5.0  3.4  1.6  0.4     0.945904\\n\\n[30 rows x 5 columns]\"]},\"output_type\":\"execute_result\",\"execution_count\":8}],\"metadata\":{\"id\":\"35594788098_0.039347169094836154\"},\"execution_count\":7,\"source\":[\"nb.predict(model = loaded_model, dataframe = keras_input(), modeltype='ml') \\n #Choose modeltype 'ml' for machine learning models and 'cv' for computer vision model \\n #ex: For machine learning model nb.predict(model = model, modeltype = 'ml', dataframe = df) \\n #ex: For computer vision keras model nb.predict(model = model, modeltype = 'cv', imgs = imgs, imgsize = (28, 28), dim = 1, class_names = class_names) \\n #and for pytorch model(model = model, modeltype = 'cv', imgs = imgs, class_names = class_names) \\n #Note: incase any error in prediction user squeezed image data in keras\"],\"cell_type\":\"code\"}],\"nbformat\":4}","secrets":"{\"reserv1\":\"\",\"reserv2\":\"\",\"reserv3\":\"\",\"reserv4\":\"\",\"reserv5\":\"\",\"createdDate\":null,\"isActive\":null,\"lastUpdatedDate\":null,\"active\":1,\"migrationId\":null,\"loggedUserId\":null,\"mongoQL\":null,\"id\":40206347,\"type\":\"210\",\"status\":1,\"spaceKey\":\"1112\",\"settings\":\"[{\\\"secretkey\\\":\\\"MONGO\\\",\\\"secretDetails\\\":[\\\"HOST\\\",\\\"PORT\\\",\\\"USERNAME\\\",\\\"PASSWORD\\\"]}]\"}","dataSource":[],"notebook":"{\"mongoQL\":null,\"migrationId\":null,\"loggedUserId\":null,\"id\":35594788098,\"projectId\":20282525387,\"spaceKey\":\"1112\",\"notebookName\":\"Keras_Input\",\"data\":\"{\\\"datasets\\\":[],\\\"uncheckeddatasets\\\":[],\\\"code\\\":[{\\\"id\\\":\\\"0_0.6391547924327499\\\",\\\"pre_cell_id\\\":0,\\\"type\\\":\\\"code\\\",\\\"is_pre_cell\\\":false,\\\"succORerr\\\":true,\\\"code\\\":\\\"def keras_input():\\\\n    import tensorflow as tf\\\\n    # from tensorflow.keras import layers\\\\n    import pandas as pd\\\\n    import numpy as np\\\\n    # from tensorflow.keras import datasets, layers, models\\\\n    # from tensorflow.keras.utils import to_categorical\\\\n    from sklearn.preprocessing import LabelEncoder\\\\n    names = ['sepal length (cm)', 'sepal width (cm)', 'petal length (cm)',\\\\n           'petal width (cm)', 'species']\\\\n    df = pd.read_csv('https://raw.githubusercontent.com/jbrownlee/Datasets/master/iris.csv', names=names)\\\\n    X = df.iloc[:,0:4].values\\\\n    y = df.iloc[:,4].values\\\\n    encoder =  LabelEncoder()\\\\n    y1 = encoder.fit_transform(y);\\\\n    Y = pd.get_dummies(y1).values\\\\n    from sklearn.model_selection import train_test_split\\\\n    X_train, X_test, y_train, y_test = train_test_split(X, Y, test_size=0.2, random_state=0)\\\\n    out = pd.DataFrame(X_test)\\\\n    return out\\\",\\\"count\\\":2,\\\"mode\\\":\\\"preview\\\",\\\"result\\\":\\\"\\\",\\\"outputArray\\\":\\\"\\\",\\\"image\\\":\\\"\\\",\\\"error\\\":\\\"\\\",\\\"hover\\\":true,\\\"interrupt\\\":false,\\\"warning\\\":false,\\\"lineNumber\\\":false,\\\"laodmodel\\\":true,\\\"expand\\\":false,\\\"outputexpand\\\":false,\\\"readonly\\\":false,\\\"loader\\\":false,\\\"markDowns\\\":false,\\\"algorithms\\\":\\\"\\\",\\\"semicolon\\\":\\\"\\\",\\\"cputimes\\\":\\\"\\\",\\\"showcputime\\\":true,\\\"secret\\\":[],\\\"widget\\\":false},{\\\"id\\\":\\\"35594788098_0.376453598981743\\\",\\\"pre_cell_id\\\":0,\\\"is_pre_cell\\\":false,\\\"succORerr\\\":true,\\\"type\\\":\\\"code\\\",\\\"code\\\":\\\"keras_input()\\\",\\\"count\\\":4,\\\"mode\\\":\\\"preview\\\",\\\"result\\\":\\\"\\\",\\\"outputArray\\\":\\\"\\\",\\\"error\\\":\\\"\\\",\\\"image\\\":\\\"\\\",\\\"hover\\\":true,\\\"interrupt\\\":false,\\\"warning\\\":false,\\\"lineNumber\\\":false,\\\"laodmodel\\\":true,\\\"expand\\\":false,\\\"outputexpand\\\":false,\\\"readonly\\\":false,\\\"loader\\\":false,\\\"markDowns\\\":false,\\\"algorithms\\\":\\\"\\\",\\\"semicolon\\\":\\\"\\\",\\\"cputimes\\\":\\\"\\\",\\\"showcputime\\\":true,\\\"secret\\\":[],\\\"widget\\\":false},{\\\"id\\\":\\\"35594788098_0.5642771273286848\\\",\\\"pre_cell_id\\\":0,\\\"is_pre_cell\\\":false,\\\"succORerr\\\":true,\\\"type\\\":\\\"code\\\",\\\"code\\\":\\\"from Notebook.DSNotebook.NotebookExecutor import NotebookExecutor\\\\nnb = NotebookExecutor()\\\\nloaded_model = nb.load_saved_model('11121730801110749')\\\",\\\"count\\\":7,\\\"mode\\\":\\\"preview\\\",\\\"result\\\":\\\"\\\",\\\"outputArray\\\":\\\"\\\",\\\"error\\\":\\\"\\\",\\\"image\\\":\\\"\\\",\\\"hover\\\":true,\\\"interrupt\\\":false,\\\"warning\\\":false,\\\"lineNumber\\\":false,\\\"laodmodel\\\":true,\\\"expand\\\":false,\\\"outputexpand\\\":false,\\\"readonly\\\":false,\\\"loader\\\":false,\\\"markDowns\\\":false,\\\"algorithms\\\":\\\"11121730801110749\\\",\\\"semicolon\\\":\\\"\\\",\\\"cputimes\\\":\\\"\\\",\\\"showcputime\\\":true,\\\"secret\\\":[],\\\"widget\\\":false},{\\\"id\\\":\\\"35594788098_0.039347169094836154\\\",\\\"pre_cell_id\\\":0,\\\"is_pre_cell\\\":false,\\\"succORerr\\\":true,\\\"type\\\":\\\"code\\\",\\\"code\\\":\\\"nb.predict(model = loaded_model, dataframe = keras_input(), modeltype='ml') \\\\n #Choose modeltype 'ml' for machine learning models and 'cv' for computer vision model \\\\n #ex: For machine learning model nb.predict(model = model, modeltype = 'ml', dataframe = df) \\\\n #ex: For computer vision keras model nb.predict(model = model, modeltype = 'cv', imgs = imgs, imgsize = (28, 28), dim = 1, class_names = class_names) \\\\n #and for pytorch model(model = model, modeltype = 'cv', imgs = imgs, class_names = class_names) \\\\n #Note: incase any error in prediction user squeezed image data in keras\\\",\\\"count\\\":8,\\\"mode\\\":\\\"preview\\\",\\\"result\\\":\\\"\\\",\\\"outputArray\\\":[{\\\"output_type\\\":\\\"stream\\\",\\\"name\\\":\\\"stdout\\\",\\\"text\\\":\\\"1/1 [==============================] - 0s 32ms/step\\\\n\\\",\\\"final_output\\\":\\\"1/1 [==============================] - 0s 32ms/step\\\\n\\\"},{\\\"metadata\\\":{},\\\"data\\\":{\\\"text/html\\\":[\\\"<div>\\\\n<style scoped>\\\\n    .dataframe tbody tr th:only-of-type {\\\\n        vertical-align: middle;\\\\n    }\\\\n\\\\n    .dataframe tbody tr th {\\\\n        vertical-align: top;\\\\n    }\\\\n\\\\n    .dataframe thead th {\\\\n        text-align: right;\\\\n    }\\\\n<\/style>\\\\n<table border=\\\\\\\"1\\\\\\\" class=\\\\\\\"dataframe\\\\\\\">\\\\n  <thead>\\\\n    <tr style=\\\\\\\"text-align: right;\\\\\\\">\\\\n      <th><\/th>\\\\n      <th>0<\/th>\\\\n      <th>1<\/th>\\\\n      <th>2<\/th>\\\\n      <th>3<\/th>\\\\n      <th>predictions<\/th>\\\\n    <\/tr>\\\\n  <\/thead>\\\\n  <tbody>\\\\n    <tr>\\\\n      <th>0<\/th>\\\\n      <td>5.8<\/td>\\\\n      <td>2.8<\/td>\\\\n      <td>5.1<\/td>\\\\n      <td>2.4<\/td>\\\\n      <td>0.755524<\/td>\\\\n    <\/tr>\\\\n    <tr>\\\\n      <th>1<\/th>\\\\n      <td>6.0<\/td>\\\\n      <td>2.2<\/td>\\\\n      <td>4.0<\/td>\\\\n      <td>1.0<\/td>\\\\n      <td>0.576399<\/td>\\\\n    <\/tr>\\\\n    <tr>\\\\n      <th>2<\/th>\\\\n      <td>5.5<\/td>\\\\n      <td>4.2<\/td>\\\\n      <td>1.4<\/td>\\\\n      <td>0.2<\/td>\\\\n      <td>0.984336<\/td>\\\\n    <\/tr>\\\\n    <tr>\\\\n      <th>3<\/th>\\\\n      <td>7.3<\/td>\\\\n      <td>2.9<\/td>\\\\n      <td>6.3<\/td>\\\\n      <td>1.8<\/td>\\\\n      <td>0.818676<\/td>\\\\n    <\/tr>\\\\n    <tr>\\\\n      <th>4<\/th>\\\\n      <td>5.0<\/td>\\\\n      <td>3.4<\/td>\\\\n      <td>1.5<\/td>\\\\n      <td>0.2<\/td>\\\\n      <td>0.968947<\/td>\\\\n    <\/tr>\\\\n    <tr>\\\\n      <th>...<\/th>\\\\n      <td>...<\/td>\\\\n      <td>...<\/td>\\\\n      <td>...<\/td>\\\\n      <td>...<\/td>\\\\n      <td>...<\/td>\\\\n    <\/tr>\\\\n    <tr>\\\\n      <th>25<\/th>\\\\n      <td>4.6<\/td>\\\\n      <td>3.6<\/td>\\\\n      <td>1.0<\/td>\\\\n      <td>0.2<\/td>\\\\n      <td>0.980480<\/td>\\\\n    <\/tr>\\\\n    <tr>\\\\n      <th>26<\/th>\\\\n      <td>5.1<\/td>\\\\n      <td>3.8<\/td>\\\\n      <td>1.9<\/td>\\\\n      <td>0.4<\/td>\\\\n      <td>0.842531<\/td>\\\\n    <\/tr>\\\\n    <tr>\\\\n      <th>27<\/th>\\\\n      <td>6.2<\/td>\\\\n      <td>2.9<\/td>\\\\n      <td>4.3<\/td>\\\\n      <td>1.3<\/td>\\\\n      <td>0.646960<\/td>\\\\n    <\/tr>\\\\n    <tr>\\\\n      <th>28<\/th>\\\\n      <td>5.0<\/td>\\\\n      <td>2.3<\/td>\\\\n      <td>3.3<\/td>\\\\n      <td>1.0<\/td>\\\\n      <td>0.656158<\/td>\\\\n    <\/tr>\\\\n    <tr>\\\\n      <th>29<\/th>\\\\n      <td>5.0<\/td>\\\\n      <td>3.4<\/td>\\\\n      <td>1.6<\/td>\\\\n      <td>0.4<\/td>\\\\n      <td>0.945904<\/td>\\\\n    <\/tr>\\\\n  <\/tbody>\\\\n<\/table>\\\\n<p>30 rows �� 5 columns<\/p>\\\\n<\/div>\\\"],\\\"text/plain\\\":[\\\"      0    1    2    3  predictions\\\\n0   5.8  2.8  5.1  2.4     0.755524\\\\n1   6.0  2.2  4.0  1.0     0.576399\\\\n2   5.5  4.2  1.4  0.2     0.984336\\\\n3   7.3  2.9  6.3  1.8     0.818676\\\\n4   5.0  3.4  1.5  0.2     0.968947\\\\n..  ...  ...  ...  ...          ...\\\\n25  4.6  3.6  1.0  0.2     0.980480\\\\n26  5.1  3.8  1.9  0.4     0.842531\\\\n27  6.2  2.9  4.3  1.3     0.646960\\\\n28  5.0  2.3  3.3  1.0     0.656158\\\\n29  5.0  3.4  1.6  0.4     0.945904\\\\n\\\\n[30 rows x 5 columns]\\\"]},\\\"output_type\\\":\\\"execute_result\\\",\\\"execution_count\\\":8,\\\"final_output\\\":[\\\"<div>\\\\n<style scoped>\\\\n    .dataframe tbody tr th:only-of-type {\\\\n        vertical-align: middle;\\\\n    }\\\\n\\\\n    .dataframe tbody tr th {\\\\n        vertical-align: top;\\\\n    }\\\\n\\\\n    .dataframe thead th {\\\\n        text-align: right;\\\\n    }\\\\n<\/style>\\\\n<table border=\\\\\\\"1\\\\\\\" class=\\\\\\\"dataframe\\\\\\\">\\\\n  <thead>\\\\n    <tr style=\\\\\\\"text-align: right;\\\\\\\">\\\\n      <th><\/th>\\\\n      <th>0<\/th>\\\\n      <th>1<\/th>\\\\n      <th>2<\/th>\\\\n      <th>3<\/th>\\\\n      <th>predictions<\/th>\\\\n    <\/tr>\\\\n  <\/thead>\\\\n  <tbody>\\\\n    <tr>\\\\n      <th>0<\/th>\\\\n      <td>5.8<\/td>\\\\n      <td>2.8<\/td>\\\\n      <td>5.1<\/td>\\\\n      <td>2.4<\/td>\\\\n      <td>0.755524<\/td>\\\\n    <\/tr>\\\\n    <tr>\\\\n      <th>1<\/th>\\\\n      <td>6.0<\/td>\\\\n      <td>2.2<\/td>\\\\n      <td>4.0<\/td>\\\\n      <td>1.0<\/td>\\\\n      <td>0.576399<\/td>\\\\n    <\/tr>\\\\n    <tr>\\\\n      <th>2<\/th>\\\\n      <td>5.5<\/td>\\\\n      <td>4.2<\/td>\\\\n      <td>1.4<\/td>\\\\n      <td>0.2<\/td>\\\\n      <td>0.984336<\/td>\\\\n    <\/tr>\\\\n    <tr>\\\\n      <th>3<\/th>\\\\n      <td>7.3<\/td>\\\\n      <td>2.9<\/td>\\\\n      <td>6.3<\/td>\\\\n      <td>1.8<\/td>\\\\n      <td>0.818676<\/td>\\\\n    <\/tr>\\\\n    <tr>\\\\n      <th>4<\/th>\\\\n      <td>5.0<\/td>\\\\n      <td>3.4<\/td>\\\\n      <td>1.5<\/td>\\\\n      <td>0.2<\/td>\\\\n      <td>0.968947<\/td>\\\\n    <\/tr>\\\\n    <tr>\\\\n      <th>...<\/th>\\\\n      <td>...<\/td>\\\\n      <td>...<\/td>\\\\n      <td>...<\/td>\\\\n      <td>...<\/td>\\\\n      <td>...<\/td>\\\\n    <\/tr>\\\\n    <tr>\\\\n      <th>25<\/th>\\\\n      <td>4.6<\/td>\\\\n      <td>3.6<\/td>\\\\n      <td>1.0<\/td>\\\\n      <td>0.2<\/td>\\\\n      <td>0.980480<\/td>\\\\n    <\/tr>\\\\n    <tr>\\\\n      <th>26<\/th>\\\\n      <td>5.1<\/td>\\\\n      <td>3.8<\/td>\\\\n      <td>1.9<\/td>\\\\n      <td>0.4<\/td>\\\\n      <td>0.842531<\/td>\\\\n    <\/tr>\\\\n    <tr>\\\\n      <th>27<\/th>\\\\n      <td>6.2<\/td>\\\\n      <td>2.9<\/td>\\\\n      <td>4.3<\/td>\\\\n      <td>1.3<\/td>\\\\n      <td>0.646960<\/td>\\\\n    <\/tr>\\\\n    <tr>\\\\n      <th>28<\/th>\\\\n      <td>5.0<\/td>\\\\n      <td>2.3<\/td>\\\\n      <td>3.3<\/td>\\\\n      <td>1.0<\/td>\\\\n      <td>0.656158<\/td>\\\\n    <\/tr>\\\\n    <tr>\\\\n      <th>29<\/th>\\\\n      <td>5.0<\/td>\\\\n      <td>3.4<\/td>\\\\n      <td>1.6<\/td>\\\\n      <td>0.4<\/td>\\\\n      <td>0.945904<\/td>\\\\n    <\/tr>\\\\n  <\/tbody>\\\\n<\/table>\\\\n<p>30 rows �� 5 columns<\/p>\\\\n<\/div>\\\"]}],\\\"error\\\":\\\"\\\",\\\"image\\\":\\\"\\\",\\\"hover\\\":true,\\\"interrupt\\\":false,\\\"warning\\\":false,\\\"lineNumber\\\":false,\\\"laodmodel\\\":true,\\\"expand\\\":false,\\\"outputexpand\\\":false,\\\"readonly\\\":false,\\\"loader\\\":false,\\\"markDowns\\\":false,\\\"algorithms\\\":\\\"\\\",\\\"semicolon\\\":\\\"\\\",\\\"cputimes\\\":\\\"\\\",\\\"showcputime\\\":true,\\\"secret\\\":[],\\\"widget\\\":false}],\\\"kernalID\\\":\\\"54ec72ef-5c09-4c7e-97b0-d7f94e333a38\\\",\\\"Algorithms\\\":[],\\\"isScheduled\\\":0,\\\"last_modified_date\\\":\\\"\\\"}\",\"description\":\"\",\"createdDate\":1730877680541,\"lastUpdatedDate\":1730878881477,\"createdBy\":48201728,\"updatedBy\":48201728,\"status\":1,\"committedBy\":48201728,\"lastcommittedDate\":1730877680541,\"isShared\":null,\"customComponentscript\":\"{\\\"DSLAB_content\\\":\\\"[{\\\\\\\"id\\\\\\\":\\\\\\\"0_0.6391547924327499\\\\\\\",\\\\\\\"code\\\\\\\":\\\\\\\"def keras_input():\\\\\\\\n    import tensorflow as tf\\\\\\\\n    # from tensorflow.keras import layers\\\\\\\\n    import pandas as pd\\\\\\\\n    import numpy as np\\\\\\\\n    # from tensorflow.keras import datasets, layers, models\\\\\\\\n    # from tensorflow.keras.utils import to_categorical\\\\\\\\n    from sklearn.preprocessing import LabelEncoder\\\\\\\\n    names = ['sepal length (cm)', 'sepal width (cm)', 'petal length (cm)',\\\\\\\\n           'petal width (cm)', 'species']\\\\\\\\n    df = pd.read_csv('https://raw.githubusercontent.com/jbrownlee/Datasets/master/iris.csv', names=names)\\\\\\\\n    X = df.iloc[:,0:4].values\\\\\\\\n    y = df.iloc[:,4].values\\\\\\\\n    encoder =  LabelEncoder()\\\\\\\\n    y1 = encoder.fit_transform(y);\\\\\\\\n    Y = pd.get_dummies(y1).values\\\\\\\\n    from sklearn.model_selection import train_test_split\\\\\\\\n    X_train, X_test, y_train, y_test = train_test_split(X, Y, test_size=0.2, random_state=0)\\\\\\\\n    out = pd.DataFrame(X_test)\\\\\\\\n    return out\\\\\\\",\\\\\\\"count\\\\\\\":0,\\\\\\\"error\\\\\\\":\\\\\\\"\\\\\\\",\\\\\\\"type\\\\\\\":\\\\\\\"code\\\\\\\",\\\\\\\"ischecked\\\\\\\":true}]\\\",\\\"pipeline_content\\\":\\\"\\\\\\\"def keras_input():\\\\\\\\n    import tensorflow as tf\\\\\\\\n    # from tensorflow.keras import layers\\\\\\\\n    import pandas as pd\\\\\\\\n    import numpy as np\\\\\\\\n    # from tensorflow.keras import datasets, layers, models\\\\\\\\n    # from tensorflow.keras.utils import to_categorical\\\\\\\\n    from sklearn.preprocessing import LabelEncoder\\\\\\\\n    names = ['sepal length (cm)', 'sepal width (cm)', 'petal length (cm)',\\\\\\\\n           'petal width (cm)', 'species']\\\\\\\\n    df = pd.read_csv('https://raw.githubusercontent.com/jbrownlee/Datasets/master/iris.csv', names=names)\\\\\\\\n    X = df.iloc[:,0:4].values\\\\\\\\n    y = df.iloc[:,4].values\\\\\\\\n    encoder =  LabelEncoder()\\\\\\\\n    y1 = encoder.fit_transform(y);\\\\\\\\n    Y = pd.get_dummies(y1).values\\\\\\\\n    from sklearn.model_selection import train_test_split\\\\\\\\n    X_train, X_test, y_train, y_test = train_test_split(X, Y, test_size=0.2, random_state=0)\\\\\\\\n    out = pd.DataFrame(X_test)\\\\\\\\n    return out\\\\\\\"\\\",\\\"externalLibraries\\\":\\\"[]\\\"}\",\"type\":2,\"isScheduled\":null,\"isImported\":0,\"path\":\"\",\"uuid\":\"11121730877680549\"}","preparation":[]}}