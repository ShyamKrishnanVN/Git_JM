{"featureSets":null,"autoML":null,"superFeatureSet":null,"errorMessage":null,"featureSet":null,"errorCode":null,"notebookModels":null,"message":"Successfully retrived!","notebookModelAsApi":null,"notebookScriptAsApi":null,"notebookModel":null,"notebookModelAsApis":null,"success":true,"notebooks":null,"customNotebookScript":null,"superFeatureSets":null,"messageCode":null,"stackTrace":null,"notebookContent":"{\"sucess\":false,\"content\":\"[Errno 2] No such file or directory: '/nfsdir/uploadfiles/1111/18437997034/18437997034_19232948734_sd.ipynb'\"}","bizvizNotebook":null,"autoMLs":null,"scripts":null,"bizvizNotebooks":null,"notebook":{"mongoQL":null,"updatedBy":62652416,"data":"{\"datasets\":[{\"queryservicename\":\"abalone\",\"id\":18746644980,\"type\":\"Data Sandbox\",\"uuid\":\"11111738312572634\",\"extenstion\":\"csv\",\"fileType\":\"\",\"dataSourceType\":\"csv\",\"createdDate\":1738312572000,\"isSelected\":true}],\"uncheckeddatasets\":[],\"code\":[{\"id\":\"0_0.5850152206660513\",\"pre_cell_id\":0,\"type\":\"code\",\"is_pre_cell\":false,\"succORerr\":true,\"code\":\"from Notebook.DSNotebook.NotebookExecutor import NotebookExecutor\\nnb = NotebookExecutor()\\ndf_abalone = nb.get_data('11111738312572634', '@SYS.USERID', 'True', {}, [], sheet_name = '')\\ndf_abalone\",\"count\":1,\"mode\":\"preview\",\"result\":\"\",\"outputArray\":[null,null,null,null,null,null,null,null,null,null,null],\"image\":\"\",\"error\":\"\",\"hover\":true,\"interrupt\":false,\"warning\":false,\"lineNumber\":false,\"laodmodel\":false,\"expand\":false,\"outputexpand\":false,\"readonly\":false,\"loader\":false,\"markDowns\":false,\"algorithms\":\"\",\"semicolon\":\"\",\"cputimes\":\"\",\"showcputime\":true,\"secret\":[],\"widget\":false},{\"id\":\"19232948734_0.7542449409526293\",\"pre_cell_id\":0,\"is_pre_cell\":false,\"succORerr\":true,\"type\":\"code\",\"code\":\"import pandas as pd\\nfrom time import perf_counter as get_time\\nfrom sklearn.model_selection import train_test_split\\nfrom sklearn.linear_model import LinearRegression\\nfrom sklearn.metrics import mean_squared_error\\n\\n# Define the necessary variables here\\n_data   = df_abalone    # pd.DataFrame: Full data to process\\n_target = \\\"diameter\\\"    # string: Column name of the target variable \\n\\nif _data is None or _target is None:\\n    raise Exception(f'Both _data and _target must be specified')\\nelif not (isinstance(_data, pd.DataFrame) and isinstance(_target, str)):\\n    raise Exception(f'Datatype of _data must be pd.DataFrame; that of _target must be str')\\n    \\n# Separating the independent and dependent variables into X and y respectively\\ny = _data[_target]\\nX = _data.drop(columns=_target)\\nprint(f'Shape of complete data: {_data.shape}')\\n\\n# Splitting the dataset into training and testing datasets\\nX_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.3)\\nprint(f'Shape of training data: {X_train.shape}')\\nprint(f'Shape of testing data : {X_test.shape}')\\n\\n# Creating the regressor and fitting it to the training data\\nlin_reg = LinearRegression()\\ntime_now = get_time()\\nlin_reg.fit(X_train, y_train);\\nprint(f'Model {lin_reg} trained')\\nprint(f'Seconds elapsed: {round(get_time() - time_now, 3)}')\\n\\n# Making predictions on the training data\\npredict_train = lin_reg.predict(X_train)\\nprint(f'Predictions on training data made')\\n\\n# Finding Root Mean Squared Error (RMSE) of the training predictions\\nrmse_train = mean_squared_error(y_train, predict_train)**(0.5)\\nprint(f'RMSE on training data: {round(rmse_train, 3)}')\\n\\n# Making predictions on the testing data\\npredict_test = lin_reg.predict(X_test)\\nprint(f'Predictions on testing data made')\\n\\n# Finding Root Mean Squared Error (RMSE) of the testing predictions\\nrmse_test = mean_squared_error(y_test, predict_test)**(0.5)\\nprint(f'RMSE on testing data : {round(rmse_test, 3)}')\",\"count\":2,\"mode\":\"preview\",\"result\":\"\",\"outputArray\":[\"Shape of complete data: (4177, 9)\\nShape of training data: (2923, 8)\\nShape of testing data : (1254, 8)\\n\",{\"ename\":\"ValueError\",\"output_type\":\"error\",\"evalue\":\"could not convert string to float: 'F'\",\"traceback\":[\"---------------------------------------------------------------------------\",\"ValueError                                Traceback (most recent call last)\",\"/tmp/ipykernel_66/3322849361.py in ?()\\n     25 \\n     26 # Creating the regressor and fitting it to the training data\\n     27 lin_reg = LinearRegression()\\n     28 time_now = get_time()\\n---> 29 lin_reg.fit(X_train, y_train);\\n     30 print(f'Model {lin_reg} trained')\\n     31 print(f'Seconds elapsed: {round(get_time() - time_now, 3)}')\\n     32 \\n\",\"/opt/conda/lib/python3.10/site-packages/sklearn/base.py in ?(estimator, *args, **kwargs)\\n   1469                 skip_parameter_validation=(\\n   1470                     prefer_skip_nested_validation or global_skip_validation\\n   1471                 )\\n   1472             ):\\n-> 1473                 return fit_method(estimator, *args, **kwargs)\\n\",\"/opt/conda/lib/python3.10/site-packages/sklearn/linear_model/_base.py in ?(self, X, y, sample_weight)\\n    605         n_jobs_ = self.n_jobs\\n    606 \\n    607         accept_sparse = False if self.positive else [\\\"csr\\\", \\\"csc\\\", \\\"coo\\\"]\\n    608 \\n--> 609         X, y = self._validate_data(\\n    610             X,\\n    611             y,\\n    612             accept_sparse=accept_sparse,\\n\",\"/opt/conda/lib/python3.10/site-packages/sklearn/base.py in ?(self, X, y, reset, validate_separately, cast_to_ndarray, **check_params)\\n    646                 if \\\"estimator\\\" not in check_y_params:\\n    647                     check_y_params = {**default_check_params, **check_y_params}\\n    648                 y = check_array(y, input_name=\\\"y\\\", **check_y_params)\\n    649             else:\\n--> 650                 X, y = check_X_y(X, y, **check_params)\\n    651             out = X, y\\n    652 \\n    653         if not no_val_X and check_params.get(\\\"ensure_2d\\\", True):\\n\",\"/opt/conda/lib/python3.10/site-packages/sklearn/utils/validation.py in ?(X, y, accept_sparse, accept_large_sparse, dtype, order, copy, force_writeable, force_all_finite, ensure_2d, allow_nd, multi_output, ensure_min_samples, ensure_min_features, y_numeric, estimator)\\n   1297         raise ValueError(\\n   1298             f\\\"{estimator_name} requires y to be passed, but the target y is None\\\"\\n   1299         )\\n   1300 \\n-> 1301     X = check_array(\\n   1302         X,\\n   1303         accept_sparse=accept_sparse,\\n   1304         accept_large_sparse=accept_large_sparse,\\n\",\"/opt/conda/lib/python3.10/site-packages/sklearn/utils/validation.py in ?(array, accept_sparse, accept_large_sparse, dtype, order, copy, force_writeable, force_all_finite, ensure_2d, allow_nd, ensure_min_samples, ensure_min_features, estimator, input_name)\\n   1009                         )\\n   1010                     array = xp.astype(array, dtype, copy=False)\\n   1011                 else:\\n   1012                     array = _asarray_with_order(array, order=order, dtype=dtype, xp=xp)\\n-> 1013             except ComplexWarning as complex_warning:\\n   1014                 raise ValueError(\\n   1015                     \\\"Complex data not supported\\\\n{}\\\\n\\\".format(array)\\n   1016                 ) from complex_warning\\n\",\"/opt/conda/lib/python3.10/site-packages/sklearn/utils/_array_api.py in ?(array, dtype, order, copy, xp, device)\\n    741         # Use NumPy API to support order\\n    742         if copy is True:\\n    743             array = numpy.array(array, order=order, dtype=dtype)\\n    744         else:\\n--> 745             array = numpy.asarray(array, order=order, dtype=dtype)\\n    746 \\n    747         # At this point array is a NumPy ndarray. We convert it to an array\\n    748         # container that is consistent with the input's namespace.\\n\",\"/opt/conda/lib/python3.10/site-packages/pandas/core/generic.py in ?(self, dtype)\\n   1996     def __array__(self, dtype: npt.DTypeLike | None = None) -> np.ndarray:\\n   1997         values = self._values\\n-> 1998         arr = np.asarray(values, dtype=dtype)\\n   1999         if (\\n   2000             astype_is_view(values.dtype, arr.dtype)\\n   2001             and using_copy_on_write()\\n\",\"ValueError: could not convert string to float: 'F'\"],\"final_output\":\"---------------------------------------------------------------------------\\nValueError                                Traceback (most recent call last)\\n/tmp/ipykernel_66/3322849361.py in ?()\\n     25 \\n     26 # Creating the regressor and fitting it to the training data\\n     27 lin_reg = LinearRegression()\\n     28 time_now = get_time()\\n---> 29 lin_reg.fit(X_train, y_train);\\n     30 print(f'Model {lin_reg} trained')\\n     31 print(f'Seconds elapsed: {round(get_time() - time_now, 3)}')\\n     32 \\n\\n/opt/conda/lib/python3.10/site-packages/sklearn/base.py in ?(estimator, *args, **kwargs)\\n   1469                 skip_parameter_validation=(\\n   1470                     prefer_skip_nested_validation or global_skip_validation\\n   1471                 )\\n   1472             ):\\n-> 1473                 return fit_method(estimator, *args, **kwargs)\\n\\n/opt/conda/lib/python3.10/site-packages/sklearn/linear_model/_base.py in ?(self, X, y, sample_weight)\\n    605         n_jobs_ = self.n_jobs\\n    606 \\n    607         accept_sparse = False if self.positive else [\\\"csr\\\", \\\"csc\\\", \\\"coo\\\"]\\n    608 \\n--> 609         X, y = self._validate_data(\\n    610             X,\\n    611             y,\\n    612             accept_sparse=accept_sparse,\\n\\n/opt/conda/lib/python3.10/site-packages/sklearn/base.py in ?(self, X, y, reset, validate_separately, cast_to_ndarray, **check_params)\\n    646                 if \\\"estimator\\\" not in check_y_params:\\n    647                     check_y_params = {**default_check_params, **check_y_params}\\n    648                 y = check_array(y, input_name=\\\"y\\\", **check_y_params)\\n    649             else:\\n--> 650                 X, y = check_X_y(X, y, **check_params)\\n    651             out = X, y\\n    652 \\n    653         if not no_val_X and check_params.get(\\\"ensure_2d\\\", True):\\n\\n/opt/conda/lib/python3.10/site-packages/sklearn/utils/validation.py in ?(X, y, accept_sparse, accept_large_sparse, dtype, order, copy, force_writeable, force_all_finite, ensure_2d, allow_nd, multi_output, ensure_min_samples, ensure_min_features, y_numeric, estimator)\\n   1297         raise ValueError(\\n   1298             f\\\"{estimator_name} requires y to be passed, but the target y is None\\\"\\n   1299         )\\n   1300 \\n-> 1301     X = check_array(\\n   1302         X,\\n   1303         accept_sparse=accept_sparse,\\n   1304         accept_large_sparse=accept_large_sparse,\\n\\n/opt/conda/lib/python3.10/site-packages/sklearn/utils/validation.py in ?(array, accept_sparse, accept_large_sparse, dtype, order, copy, force_writeable, force_all_finite, ensure_2d, allow_nd, ensure_min_samples, ensure_min_features, estimator, input_name)\\n   1009                         )\\n   1010                     array = xp.astype(array, dtype, copy=False)\\n   1011                 else:\\n   1012                     array = _asarray_with_order(array, order=order, dtype=dtype, xp=xp)\\n-> 1013             except ComplexWarning as complex_warning:\\n   1014                 raise ValueError(\\n   1015                     \\\"Complex data not supported\\\\n{}\\\\n\\\".format(array)\\n   1016                 ) from complex_warning\\n\\n/opt/conda/lib/python3.10/site-packages/sklearn/utils/_array_api.py in ?(array, dtype, order, copy, xp, device)\\n    741         # Use NumPy API to support order\\n    742         if copy is True:\\n    743             array = numpy.array(array, order=order, dtype=dtype)\\n    744         else:\\n--> 745             array = numpy.asarray(array, order=order, dtype=dtype)\\n    746 \\n    747         # At this point array is a NumPy ndarray. We convert it to an array\\n    748         # container that is consistent with the input's namespace.\\n\\n/opt/conda/lib/python3.10/site-packages/pandas/core/generic.py in ?(self, dtype)\\n   1996     def __array__(self, dtype: npt.DTypeLike | None = None) -> np.ndarray:\\n   1997         values = self._values\\n-> 1998         arr = np.asarray(values, dtype=dtype)\\n   1999         if (\\n   2000             astype_is_view(values.dtype, arr.dtype)\\n   2001             and using_copy_on_write()\\n\\nValueError: could not convert string to float: 'F'\"}],\"error\":\"\",\"image\":\"\",\"hover\":true,\"interrupt\":false,\"warning\":false,\"lineNumber\":false,\"laodmodel\":false,\"expand\":false,\"outputexpand\":false,\"readonly\":false,\"loader\":false,\"markDowns\":false,\"algorithms\":\"Linear Regression\",\"semicolon\":\"\",\"cputimes\":\"\",\"showcputime\":true,\"secret\":[],\"widget\":false}],\"kernalID\":\"7eb59de5-f753-4902-b41c-95778cb76a36\",\"Algorithms\":[\"Linear Regression\"],\"isScheduled\":0,\"last_modified_date\":\"\"}","isImported":0,"workSpaceKey":"","customComponentscript":"","description":"","lastcommittedDate":1738732804793,"isScheduled":null,"committedBy":62652416,"type":1,"uuid":"11111738732804801","loggedUserId":null,"spaceKey":"1111","migrationId":null,"path":"","lastUpdatedDate":1738733045616,"createdDate":1738732804793,"createdBy":62652416,"notebookName":"sd","id":19232948734,"projectId":18437997034,"isShared":null,"status":1}}