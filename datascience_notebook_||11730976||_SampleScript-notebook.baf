{"dslabserviceresp":{"queryService":[],"bizvizWorkspace":"{\"reserv1\":null,\"reserv2\":null,\"reserv3\":null,\"reserv4\":null,\"reserv5\":null,\"createdDate\":1697475359200,\"isActive\":0,\"lastUpdatedDate\":null,\"active\":1,\"migrationId\":null,\"id\":1474560,\"name\":\"Tensorflow\",\"count\":null,\"parentId\":null,\"userId\":\"950278\",\"isFile\":false,\"infoJson\":\"{\\\"imageVersion\\\":\\\"8.0.41\\\",\\\"external_libraries\\\":\\\"Library1,library2\\\",\\\"imageName\\\":\\\"371194629034.dkr.ecr.ap-south-1.amazonaws.com/stg/dsnotebook-tensorflow\\\",\\\"confDetails\\\":{\\\"high\\\":{\\\"nonspark\\\":{\\\"request\\\":{\\\"memory\\\":\\\"2048Mi\\\",\\\"cpu\\\":\\\"1000m\\\"},\\\"limit\\\":{\\\"memory\\\":\\\"4048Mi\\\",\\\"cpu\\\":\\\"2500m\\\"}}},\\\"low\\\":{\\\"realtime\\\":{\\\"nonspark\\\":{\\\"request\\\":{\\\"memory\\\":\\\"1024Mi\\\",\\\"cpu\\\":\\\"500m\\\"},\\\"limit\\\":{\\\"memory\\\":\\\"1024Mi\\\",\\\"cpu\\\":\\\"1000m\\\"}}}},\\\"medium\\\":{\\\"nonspark\\\":{\\\"request\\\":{\\\"memory\\\":\\\"2048Mi\\\",\\\"cpu\\\":\\\"1000m\\\"},\\\"limit\\\":{\\\"memory\\\":\\\"4024Mi\\\",\\\"cpu\\\":\\\"1000m\\\"}}}},\\\"idle_shutdown\\\":\\\"1h\\\",\\\"apiImageVersion\\\":\\\"8.5.0\\\",\\\"appName\\\":\\\"tensorflow-pfnd\\\",\\\"git_project\\\":\\\"\\\",\\\"project_url\\\":\\\"vnshyamkrishnan/gitpush_jm\\\",\\\"project_name\\\":\\\"Tensorflow\\\",\\\"removedLibraries\\\":\\\"\\\",\\\"environment\\\":\\\"PythonTensorFlow\\\",\\\"project_description\\\":\\\"New\\\",\\\"Algorithms\\\":[\\\"Regression\\\",\\\"Classification\\\"],\\\"gpuLimit\\\":\\\"\\\",\\\"projectLabel\\\":\\\"\\\",\\\"resource_allocation\\\":\\\"medium\\\",\\\"configured_branch\\\":\\\"main\\\",\\\"apiImageName\\\":\\\"371194629034.dkr.ecr.ap-south-1.amazonaws.com/stg/dsmodelapi\\\",\\\"gpuType\\\":\\\"\\\",\\\"branchLabel\\\":\\\"\\\"}\",\"spaceKey\":\"1156\",\"type\":10,\"status\":1,\"contentJson\":\"[{\\\"queryservicename\\\":\\\"df_Test.txt\\\",\\\"id\\\":4063368,\\\"type\\\":\\\"Data Sandbox\\\",\\\"uuid\\\":\\\"11561697788432524\\\",\\\"extenstion\\\":\\\"txt\\\",\\\"fileType\\\":\\\"artifact\\\"},{\\\"queryservicename\\\":\\\"Test\\\",\\\"id\\\":4063367,\\\"type\\\":\\\"Data Sandbox\\\",\\\"uuid\\\":\\\"11561697788370591\\\",\\\"extenstion\\\":\\\"csv\\\",\\\"fileType\\\":\\\"\\\"},{\\\"queryservicename\\\":\\\"Mongo_Data\\\",\\\"id\\\":5701642,\\\"type\\\":\\\"Data Sets\\\",\\\"uuid\\\":\\\"11561697698830185\\\"},{\\\"queryservicename\\\":\\\"Dump_Data\\\",\\\"id\\\":4063316,\\\"type\\\":\\\"Data Sandbox\\\",\\\"uuid\\\":\\\"11561697699506508\\\",\\\"extenstion\\\":\\\"csv\\\",\\\"fileType\\\":\\\"\\\"},{\\\"queryservicename\\\":\\\"Null Issue_Prep\\\",\\\"id\\\":4063247,\\\"type\\\":\\\"Data Sandbox\\\",\\\"uuid\\\":\\\"11561697628478067\\\",\\\"extenstion\\\":\\\"csv\\\",\\\"fileType\\\":\\\"\\\"}]\",\"templateJson\":null,\"isShared\":null,\"updatedBy\":\"950278\",\"uuid\":\"11561697475359200\",\"createdUserName\":null}","envVariables":[],"utility":"[{\"migrationId\":null,\"id\":10321927,\"spaceKey\":\"1156\",\"name\":\"Tab\",\"description\":\"\",\"createdDate\":1698229331000,\"lastUpdatedDate\":1698229331000,\"createdBy\":950278,\"updatedBy\":950278,\"properties\":\"{\\\"metadata\\\":\\\"Tab.py\\\",\\\"filename\\\":\\\"Tab.py\\\"}\",\"status\":1,\"completionStatus\":0,\"type\":\"py\",\"reference_id\":1474560,\"prepJson\":null,\"uuid\":\"11561698229317786\",\"fileType\":null,\"createdTime\":null},{\"migrationId\":null,\"id\":10321926,\"spaceKey\":\"1156\",\"name\":\"Four spaces\",\"description\":\"\",\"createdDate\":1698229342000,\"lastUpdatedDate\":1698229342000,\"createdBy\":950278,\"updatedBy\":950278,\"properties\":\"{\\\"metadata\\\":\\\"4_spaces.py\\\",\\\"filename\\\":\\\"4_spaces.py\\\"}\",\"status\":1,\"completionStatus\":0,\"type\":\"py\",\"reference_id\":1474560,\"prepJson\":null,\"uuid\":\"11561698229308104\",\"fileType\":null,\"createdTime\":null},{\"migrationId\":null,\"id\":10321925,\"spaceKey\":\"1156\",\"name\":\"Two spaces\",\"description\":\"\",\"createdDate\":1698229354000,\"lastUpdatedDate\":1698229354000,\"createdBy\":950278,\"updatedBy\":950278,\"properties\":\"{\\\"metadata\\\":\\\"2_spaces.py\\\",\\\"filename\\\":\\\"2_spaces.py\\\"}\",\"status\":1,\"completionStatus\":0,\"type\":\"py\",\"reference_id\":1474560,\"prepJson\":null,\"uuid\":\"11561698229296594\",\"fileType\":null,\"createdTime\":null},{\"migrationId\":null,\"id\":8683585,\"spaceKey\":\"1156\",\"name\":\"Utility_test\",\"description\":\"\",\"createdDate\":1698228035000,\"lastUpdatedDate\":1698228035000,\"createdBy\":950278,\"updatedBy\":950278,\"properties\":\"{\\\"metadata\\\":\\\"Utility_test.py\\\",\\\"filename\\\":\\\"Utility_test.py\\\"}\",\"status\":1,\"completionStatus\":0,\"type\":\"py\",\"reference_id\":1474560,\"prepJson\":null,\"uuid\":\"11561698227695585\",\"fileType\":null,\"createdTime\":null},{\"migrationId\":null,\"id\":8683583,\"spaceKey\":\"1156\",\"name\":\"autoML_Regression_Preprocessing 1\",\"description\":\"\",\"createdDate\":1698227377000,\"lastUpdatedDate\":1698227377000,\"createdBy\":950278,\"updatedBy\":950278,\"properties\":\"{\\\"metadata\\\":\\\"autoML_Regression_Preprocessing 1.py\\\",\\\"filename\\\":\\\"autoML_Regression_Preprocessing 1.py\\\"}\",\"status\":1,\"completionStatus\":0,\"type\":\"py\",\"reference_id\":1474560,\"prepJson\":null,\"uuid\":\"11561698227273534\",\"fileType\":null,\"createdTime\":null},{\"migrationId\":null,\"id\":8683582,\"spaceKey\":\"1156\",\"name\":\"Sklearnworkflow_MountUpdate__1\",\"description\":\"from vcs imported file\",\"createdDate\":1698226923000,\"lastUpdatedDate\":1698226923000,\"createdBy\":950278,\"updatedBy\":950278,\"properties\":\"{\\\"filename\\\":\\\"Sklearnworkflow_MountUpdate__1.py\\\",\\\"isImported\\\":1,\\\"last_modified_date\\\":\\\"2023-10-25T09:41:19.000+00:00\\\"}\",\"status\":1,\"completionStatus\":1,\"type\":\"py\",\"reference_id\":1474560,\"prepJson\":null,\"uuid\":\"11561698226923008\",\"fileType\":null,\"createdTime\":null},{\"migrationId\":null,\"id\":8683581,\"spaceKey\":\"1156\",\"name\":\"Utiity_script_V33\",\"description\":\"from vcs imported file\",\"createdDate\":1698227201000,\"lastUpdatedDate\":1698227201000,\"createdBy\":950278,\"updatedBy\":950278,\"properties\":\"{\\\"metadata\\\":\\\"Utiity_script_V33.py\\\",\\\"filename\\\":\\\"Utiity_script_V33.py\\\",\\\"isImported\\\":1,\\\"last_modified_date\\\":\\\"2023-10-18T04:59:30.000+00:00\\\"}\",\"status\":1,\"completionStatus\":1,\"type\":\"py\",\"reference_id\":1474560,\"prepJson\":null,\"uuid\":\"11561698226746743\",\"fileType\":null,\"createdTime\":null},{\"migrationId\":null,\"id\":8683580,\"spaceKey\":\"1156\",\"name\":\"Sklearnworkflow_MountUpdate__1_\",\"description\":\"from vcs imported file\",\"createdDate\":1698226472000,\"lastUpdatedDate\":1698226472000,\"createdBy\":950278,\"updatedBy\":950278,\"properties\":\"{\\\"filename\\\":\\\"Sklearnworkflow_MountUpdate__1_.py\\\",\\\"isImported\\\":1,\\\"last_modified_date\\\":\\\"2023-10-13T05:15:14.000+00:00\\\"}\",\"status\":1,\"completionStatus\":1,\"type\":\"py\",\"reference_id\":1474560,\"prepJson\":null,\"uuid\":\"11561698226471637\",\"fileType\":null,\"createdTime\":null},{\"migrationId\":null,\"id\":8683573,\"spaceKey\":\"1156\",\"name\":\"Utiity_script_V31\",\"description\":\"from vcs imported file\",\"createdDate\":1698143222000,\"lastUpdatedDate\":1698143222000,\"createdBy\":950278,\"updatedBy\":950278,\"properties\":\"{\\\"metadata\\\":\\\"Utiity_script_V31.py\\\",\\\"filename\\\":\\\"Utiity_script_V31.py\\\",\\\"isImported\\\":1,\\\"last_modified_date\\\":\\\"2023-10-16T08:17:03.000+00:00\\\"}\",\"status\":1,\"completionStatus\":1,\"type\":\"py\",\"reference_id\":1474560,\"prepJson\":null,\"uuid\":\"11561698143175287\",\"fileType\":null,\"createdTime\":null},{\"migrationId\":null,\"id\":8683551,\"spaceKey\":\"1156\",\"name\":\"bug___test\",\"description\":\"\",\"createdDate\":1698128157000,\"lastUpdatedDate\":1698128157000,\"createdBy\":950278,\"updatedBy\":950278,\"properties\":\"{\\\"metadata\\\":\\\"linebreak Issue1.py\\\",\\\"filename\\\":\\\"linebreak Issue1.py\\\"}\",\"status\":1,\"completionStatus\":0,\"type\":\"py\",\"reference_id\":1474560,\"prepJson\":null,\"uuid\":\"11561698128156944\",\"fileType\":null,\"createdTime\":null},{\"migrationId\":null,\"id\":4063386,\"spaceKey\":\"1156\",\"name\":\"bug_testtt\",\"description\":\"\",\"createdDate\":1697799884000,\"lastUpdatedDate\":1697799884000,\"createdBy\":950278,\"updatedBy\":950278,\"properties\":\"{\\\"metadata\\\":\\\"bug_test.py\\\",\\\"filename\\\":\\\"bug_test.py\\\"}\",\"status\":1,\"completionStatus\":0,\"type\":\"py\",\"reference_id\":1474560,\"prepJson\":null,\"uuid\":\"11561697799883992\",\"fileType\":null,\"createdTime\":null},{\"migrationId\":null,\"id\":4063364,\"spaceKey\":\"1156\",\"name\":\"Utiity_script_V32\",\"description\":\"from vcs imported file\",\"createdDate\":1697787890000,\"lastUpdatedDate\":1697787890000,\"createdBy\":950278,\"updatedBy\":950278,\"properties\":\"{\\\"metadata\\\":\\\"Utiity_script_V32.py\\\",\\\"filename\\\":\\\"Utiity_script_V32.py\\\",\\\"isImported\\\":1,\\\"last_modified_date\\\":\\\"2023-10-19T10:37:48.000+00:00\\\"}\",\"status\":1,\"completionStatus\":1,\"type\":\"py\",\"reference_id\":1474560,\"prepJson\":null,\"uuid\":\"11561697787877204\",\"fileType\":null,\"createdTime\":null},{\"migrationId\":null,\"id\":4063363,\"spaceKey\":\"1156\",\"name\":\"123\",\"description\":\"\",\"createdDate\":1697787726000,\"lastUpdatedDate\":1697787726000,\"createdBy\":950278,\"updatedBy\":950278,\"properties\":\"{\\\"metadata\\\":\\\"Test_script_29.py\\\",\\\"filename\\\":\\\"Test_script_29.py\\\"}\",\"status\":1,\"completionStatus\":0,\"type\":\"py\",\"reference_id\":1474560,\"prepJson\":null,\"uuid\":\"11561697787468025\",\"fileType\":null,\"createdTime\":null},{\"migrationId\":null,\"id\":4063362,\"spaceKey\":\"1156\",\"name\":\"Test_script_28.py\",\"description\":\"\",\"createdDate\":1697787932000,\"lastUpdatedDate\":1697787932000,\"createdBy\":950278,\"updatedBy\":950278,\"properties\":\"{\\\"metadata\\\":\\\"Test_script_28.py\\\",\\\"filename\\\":\\\"Test_script_28.py\\\"}\",\"status\":1,\"completionStatus\":0,\"type\":\"py\",\"reference_id\":1474560,\"prepJson\":null,\"uuid\":\"11561697787272451\",\"fileType\":null,\"createdTime\":null}]","utilityContent":"{\"4063386\":\"I3Rlc3RpbmcgaW50ZW50YXRpb24gYnVnCgpjbGFzcyBQZXJzb25fVjc6CiAgICBkZWYgX19pbml0X18oc2VsZiwgbmFtZSwgYWdlKToKICAgICAgICBzZWxmLm5hbWUgPSBuYW1lCiAgICAgICAgc2VsZi5hZ2UgPSBhZ2UgICAg\",\"4063364\":\"Y2xhc3MgUGVyc29uX1Y3OgogIGRlZiBfX2luaXRfXyhzZWxmLCBuYW1lLCBhZ2UpOgogICAgc2VsZi5uYW1lID0gbmFtZQogICAgc2VsZi5hZ2UgPSBhZ2UKCiAgZGVmIG15ZnVuYyhzZWxmKToKICAgIHByaW50KCJIZWxsbyBteSBuYW1lIGlzICIgKyBzZWxmLm5hbWUpCg==\",\"10321927\":\"IyAtKi0gY29kaW5nOiB1dGYtOCAtKi0KIiIiVW50aXRsZWQyNi5pcHluYgoKQXV0b21hdGljYWxseSBnZW5lcmF0ZWQgYnkgQ29sYWJvcmF0b3J5LgoKT3JpZ2luYWwgZmlsZSBpcyBsb2NhdGVkIGF0CiAgICBodHRwczovL2NvbGFiLnJlc2VhcmNoLmdvb2dsZS5jb20vZHJpdmUvMU0wcFJOdTh5RG03TlF1U2hZOW1YMXZmMXpSd20tMFhDCiIiIgoKZGVmIG5ldyhkZik6CiAgcHJpbnQoIjEiKQogIHJldHVybiBkZg==\",\"10321926\":\"IyAtKi0gY29kaW5nOiB1dGYtOCAtKi0KIiIiNCBzcGFjZXMuaXB5bmIKCkF1dG9tYXRpY2FsbHkgZ2VuZXJhdGVkIGJ5IENvbGFib3JhdG9yeS4KCk9yaWdpbmFsIGZpbGUgaXMgbG9jYXRlZCBhdAogICAgaHR0cHM6Ly9jb2xhYi5yZXNlYXJjaC5nb29nbGUuY29tL2RyaXZlLzFNMHBSTnU4eURtN05RdVNoWTltWDF2ZjF6UndtLTBYQwoiIiIKCmRlZiBuZXcoZGYpOgogICAgcHJpbnQoIjEiKQogICAgcmV0dXJuIGRm\",\"10321925\":\"IyAtKi0gY29kaW5nOiB1dGYtOCAtKi0KIiIiMiBzcGFjZXMuaXB5bmIKCkF1dG9tYXRpY2FsbHkgZ2VuZXJhdGVkIGJ5IENvbGFib3JhdG9yeS4KCk9yaWdpbmFsIGZpbGUgaXMgbG9jYXRlZCBhdAogICAgaHR0cHM6Ly9jb2xhYi5yZXNlYXJjaC5nb29nbGUuY29tL2RyaXZlLzFNMHBSTnU4eURtN05RdVNoWTltWDF2ZjF6UndtLTBYQwoiIiIKCmRlZiBuZXcoZGYpOgogIHRhYigpCiAgcmV0dXJuIGRm\",\"4063363\":\"IyAtKi0gY29kaW5nOiB1dGYtOCAtKi0KIiIiU2FtcGxlX3NjcmlwdCBmb3IgdGVzdGluZwoKQXV0b21hdGljYWxseSBnZW5lcmF0ZWQgYnkgQ29sYWJvcmF0b3J5LgoKT3JpZ2luYWwgZmlsZSBpcyBsb2NhdGVkIGF0CiAgICBodHRwczovL2NvbGFiLnJlc2VhcmNoLmdvb2dsZS5jb20vZHJpdmUvMTViNndzNEZwUVpJQVFQMFZJRHl3SFlWT3RvSjlIZEc2CiIiIgoKY2xhc3MgUGVyc29uMTIzNDoKICBkZWYgX19pbml0X18oc2VsZiwgbmFtZSwgYWdlKToKICAgIHNlbGYubmFtZSA9IG5hbWUKICAgIHNlbGYuYWdlID0gYWdlCgogIGRlZiBteWZ1bmMoc2VsZik6CiAgICBwcmludCgiSGVsbG8gbXkgbmFtZSBpcyAiICsgc2VsZi5uYW1lKQ==\",\"4063362\":\"Y2xhc3MgUGVyc29uMToKICBkZWYgX19pbml0X18oc2VsZiwgbmFtZSwgYWdlKToKICAgIHNlbGYubmFtZSA9IG5hbWUKICAgIHNlbGYuYWdlID0gYWdlCgogIGRlZiBteWZ1bmMoc2VsZik6CiAgICBwcmludCgiSGVsbG8gbXkgbmFtZTogIiArIHNlbGYubmFtZSk=\",\"8683585\":\"ZnJvbSBpbyBpbXBvcnQgQnl0ZXNJTwpmcm9tIHRpbWUgaW1wb3J0IHBlcmZfY291bnRlcgppbXBvcnQgbG9nZ2luZwpsb2dnaW5nLmJhc2ljQ29uZmlnKCkKbG9nZ2VyID0gbG9nZ2luZy5nZXRMb2dnZXIoJ01UQScpCmxvZ2dpbmdfbGV2ZWwgPSBsb2dnaW5nLkRFQlVHCmxvZ2dlci5zZXRMZXZlbChsb2dnaW5nX2xldmVsKQppbXBvcnQgYm90bzMKZnJvbSBib3RvY29yZS5leGNlcHRpb25zIGltcG9ydCBDbGllbnRFcnJvcgppbXBvcnQgcGFuZGFzIGFzIHBkCgpkZWYgZ2V0X2F0aGVuYV9jb25uZWN0aW9uKFJFR0lPTl9OQU1FLEFXU19BQ0NFU1NfS0VZX0lELEFXU19TRUNSRVRfQUNDRVNTX0tFWSk6CiAgICBwcmludCgiMSIpCiAgIAogICAgYXRoZW5hX2NsaWVudCA9IGJvdG8zLmNsaWVudCgKICAgICAgICAnYXRoZW5hJywgCiAgICAgICAgcmVnaW9uX25hbWU9UkVHSU9OX05BTUUsIAogICAgICAgIGF3c19hY2Nlc3Nfa2V5X2lkPUFXU19BQ0NFU1NfS0VZX0lELCAKICAgICAgICBhd3Nfc2VjcmV0X2FjY2Vzc19rZXk9QVdTX1NFQ1JFVF9BQ0NFU1NfS0VZCiAgICApCiAgICByZXR1cm4gYXRoZW5hX2NsaWVudAoKZGVmIHJ1bl9hdGhlbmFfcXVlcnkocXVlcnksIFJFR0lPTl9OQU1FLEFXU19BQ0NFU1NfS0VZX0lELEFXU19TRUNSRVRfQUNDRVNTX0tFWSxBVEhFTkFfREFUQUJBU0UsQVRIRU5BX1NUQVRVU19PVVRQVVRfTE9DQVRJT04sCiAgICAgICAgICAgICAgICAgICAgIFMzX1RBUkdFVF9CVUNLRVQsUzMpOgogICAgcHJpbnQoJ1N0YXJ0aW5nIEF0aGVuYSBxdWVyeSBydW4nKQogICAgbG9nZ2VyLmRlYnVnKCdDb25uZWN0aW5nIHRvIEF0aGVuYScpCiAgICBBVEhFTkFfQ0xJRU5UID0gZ2V0X2F0aGVuYV9jb25uZWN0aW9uKFJFR0lPTl9OQU1FLEFXU19BQ0NFU1NfS0VZX0lELEFXU19TRUNSRVRfQUNDRVNTX0tFWSkKICAgIGxvZ2dlci5kZWJ1ZyhmJ1N0YXJ0aW5nIEF0aGVuYSBxdWVyeSBleGVjdXRpb24nKQogICAgbG9nZ2VyLmRlYnVnKGYnQXRoZW5hIHF1ZXJ5Olxue3F1ZXJ5fScpCgogICAgcmVzcG9uc2UgPSBBVEhFTkFfQ0xJRU5ULnN0YXJ0X3F1ZXJ5X2V4ZWN1dGlvbigKICAgICAgICBRdWVyeVN0cmluZz1xdWVyeSwKICAgICAgICBRdWVyeUV4ZWN1dGlvbkNvbnRleHQ9eydEYXRhYmFzZSc6IEFUSEVOQV9EQVRBQkFTRX0sCiAgICAgICAgUmVzdWx0Q29uZmlndXJhdGlvbj17J091dHB1dExvY2F0aW9uJzogQVRIRU5BX1NUQVRVU19PVVRQVVRfTE9DQVRJT059CiAgICApCgogICAgIyBHZXQgdGhlIHF1ZXJ5IGV4ZWN1dGlvbiBJRAogICAgcXVlcnlfZXhlY3V0aW9uX2lkID0gcmVzcG9uc2VbJ1F1ZXJ5RXhlY3V0aW9uSWQnXQoKICAgICMgV2FpdCBmb3IgdGhlIHF1ZXJ5IHRvIGNvbXBsZXRlCiAgICB3aGlsZSBUcnVlOgogICAgICAgIHF1ZXJ5X3N0YXR1cyA9IEFUSEVOQV9DTElFTlQuZ2V0X3F1ZXJ5X2V4ZWN1dGlvbihRdWVyeUV4ZWN1dGlvbklkPXF1ZXJ5X2V4ZWN1dGlvbl9pZCkKICAgICAgICBzdGF0dXMgPSBxdWVyeV9zdGF0dXNbJ1F1ZXJ5RXhlY3V0aW9uJ11bJ1N0YXR1cyddWydTdGF0ZSddCgogICAgICAgIGlmIHN0YXR1cyBpbiBbJ1NVQ0NFRURFRCcsICdGQUlMRUQnLCAnQ0FOQ0VMTEVEJ106CiAgICAgICAgICAgIGJyZWFrCiAgICAgICAgIyBSZXRyaWV2ZSBhbmQgcmV0dXJuIHRoZSBxdWVyeSByZXN1bHRzIGlmIHRoZSBxdWVyeSBzdWNjZWVkZWQKICAgIGlmIHN0YXR1cyA9PSAnU1VDQ0VFREVEJzoKIyAgICAgICAgIHJlc3VsdHMgPSBBVEhFTkFfQ0xJRU5ULmdldF9xdWVyeV9yZXN1bHRzKFF1ZXJ5RXhlY3V0aW9uSWQ9cXVlcnlfZXhlY3V0aW9uX2lkKQojICAgICAgICAgcmVzdWx0cyA9IGZvcm1hdF9hdGhlbmFfcmVzdWx0cyhyZXN1bHRzKQogICAgICAgIHMzX3Jlc3BvbnNlX29iamVjdCA9IFMzLmdldF9vYmplY3QoQnVja2V0PVMzX1RBUkdFVF9CVUNLRVQsIEtleT1mIntBVEhFTkFfU1RBVFVTX09VVFBVVF9MT0NBVElPTi5zcGxpdCgnLycpWy0yXX0ve3F1ZXJ5X2V4ZWN1dGlvbl9pZH0uY3N2IikKICAgICAgICBvYmplY3RfY29udGVudCA9IHMzX3Jlc3BvbnNlX29iamVjdFsnQm9keSddLnJlYWQoKQogICAgICAgIHJlc3VsdHMgPSBwZC5yZWFkX2NzdihCeXRlc0lPKG9iamVjdF9jb250ZW50KSkKICAgICAgICBsb2dnZXIuZGVidWcoZidBdGhlbmEgcXVlcnkgcmFuIHN1Y2Nlc3NmdWxseScpCiAgICAgICAgcmV0dXJuIHJlc3VsdHMKICAgIGVsaWYgc3RhdHVzID09ICdGQUlMRUQnOgogICAgICAgIHJhaXNlIEV4Y2VwdGlvbignUXVlcnkgZnJvbSBBdGhlbmEgZmFpbGVkJyk=\",\"8683573\":\"Y2xhc3MgUGVyc29uX05ldzE6CiAgZGVmIF9faW5pdF9fKHNlbGYsIG5hbWUsIGFnZSk6CiAgICBzZWxmLm5hbWUgPSBuYW1lCiAgICBzZWxmLmFnZSA9IGFnZQoKICBkZWYgbXlmdW5jKHNlbGYpOgogICAgcHJpbnQoIkhlbGxvIG15IG5hbWUgaXMgIiArIHNlbGYubmFtZSkK\",\"8683551\":\"ZnJvbSBpbyBpbXBvcnQgQnl0ZXNJTwpmcm9tIHRpbWUgaW1wb3J0IHBlcmZfY291bnRlcgppbXBvcnQgbG9nZ2luZwpsb2dnaW5nLmJhc2ljQ29uZmlnKCkKbG9nZ2VyID0gbG9nZ2luZy5nZXRMb2dnZXIoJ01UQScpCmxvZ2dpbmdfbGV2ZWwgPSBsb2dnaW5nLkRFQlVHCmxvZ2dlci5zZXRMZXZlbChsb2dnaW5nX2xldmVsKQppbXBvcnQgYm90bzMKZnJvbSBib3RvY29yZS5leGNlcHRpb25zIGltcG9ydCBDbGllbnRFcnJvcgppbXBvcnQgcGFuZGFzIGFzIHBkCgpkZWYgZ2V0X2F0aGVuYV9jb25uZWN0aW9uKFJFR0lPTl9OQU1FLEFXU19BQ0NFU1NfS0VZX0lELEFXU19TRUNSRVRfQUNDRVNTX0tFWSk6CiAgICBhdGhlbmFfY2xpZW50ID0gYm90bzMuY2xpZW50KAogICAgICAgICdhdGhlbmEnLCAKICAgICAgICByZWdpb25fbmFtZT1SRUdJT05fTkFNRSwgCiAgICAgICAgYXdzX2FjY2Vzc19rZXlfaWQ9QVdTX0FDQ0VTU19LRVlfSUQsIAogICAgICAgIGF3c19zZWNyZXRfYWNjZXNzX2tleT1BV1NfU0VDUkVUX0FDQ0VTU19LRVkKICAgICkKICAgIHJldHVybiBhdGhlbmFfY2xpZW50CgpkZWYgcnVuX2F0aGVuYV9xdWVyeShxdWVyeSwgUkVHSU9OX05BTUUsQVdTX0FDQ0VTU19LRVlfSUQsQVdTX1NFQ1JFVF9BQ0NFU1NfS0VZLEFUSEVOQV9EQVRBQkFTRSxBVEhFTkFfU1RBVFVTX09VVFBVVF9MT0NBVElPTiwKICAgICAgICAgICAgICAgICAgICAgUzNfVEFSR0VUX0JVQ0tFVCxTMyk6CiAgICBwcmludCgnU3RhcnRpbmcgQXRoZW5hIHF1ZXJ5IHJ1bicpCiAgICBsb2dnZXIuZGVidWcoJ0Nvbm5lY3RpbmcgdG8gQXRoZW5hJykKICAgIEFUSEVOQV9DTElFTlQgPSBnZXRfYXRoZW5hX2Nvbm5lY3Rpb24oUkVHSU9OX05BTUUsQVdTX0FDQ0VTU19LRVlfSUQsQVdTX1NFQ1JFVF9BQ0NFU1NfS0VZKQogICAgbG9nZ2VyLmRlYnVnKGYnU3RhcnRpbmcgQXRoZW5hIHF1ZXJ5IGV4ZWN1dGlvbicpCiAgICBsb2dnZXIuZGVidWcoZidBdGhlbmEgcXVlcnk6XG57cXVlcnl9JykKCiAgICByZXNwb25zZSA9IEFUSEVOQV9DTElFTlQuc3RhcnRfcXVlcnlfZXhlY3V0aW9uKAogICAgICAgIFF1ZXJ5U3RyaW5nPXF1ZXJ5LAogICAgICAgIFF1ZXJ5RXhlY3V0aW9uQ29udGV4dD17J0RhdGFiYXNlJzogQVRIRU5BX0RBVEFCQVNFfSwKICAgICAgICBSZXN1bHRDb25maWd1cmF0aW9uPXsnT3V0cHV0TG9jYXRpb24nOiBBVEhFTkFfU1RBVFVTX09VVFBVVF9MT0NBVElPTn0KICAgICkKCiAgICAjIEdldCB0aGUgcXVlcnkgZXhlY3V0aW9uIElECiAgICBxdWVyeV9leGVjdXRpb25faWQgPSByZXNwb25zZVsnUXVlcnlFeGVjdXRpb25JZCddCgogICAgIyBXYWl0IGZvciB0aGUgcXVlcnkgdG8gY29tcGxldGUKICAgIHdoaWxlIFRydWU6CiAgICAgICAgcXVlcnlfc3RhdHVzID0gQVRIRU5BX0NMSUVOVC5nZXRfcXVlcnlfZXhlY3V0aW9uKFF1ZXJ5RXhlY3V0aW9uSWQ9cXVlcnlfZXhlY3V0aW9uX2lkKQogICAgICAgIHN0YXR1cyA9IHF1ZXJ5X3N0YXR1c1snUXVlcnlFeGVjdXRpb24nXVsnU3RhdHVzJ11bJ1N0YXRlJ10KCiAgICAgICAgaWYgc3RhdHVzIGluIFsnU1VDQ0VFREVEJywgJ0ZBSUxFRCcsICdDQU5DRUxMRUQnXToKICAgICAgICAgICAgYnJlYWsKICAgICAgICAjIFJldHJpZXZlIGFuZCByZXR1cm4gdGhlIHF1ZXJ5IHJlc3VsdHMgaWYgdGhlIHF1ZXJ5IHN1Y2NlZWRlZAogICAgaWYgc3RhdHVzID09ICdTVUNDRUVERUQnOgojICAgICAgICAgcmVzdWx0cyA9IEFUSEVOQV9DTElFTlQuZ2V0X3F1ZXJ5X3Jlc3VsdHMoUXVlcnlFeGVjdXRpb25JZD1xdWVyeV9leGVjdXRpb25faWQpCiMgICAgICAgICByZXN1bHRzID0gZm9ybWF0X2F0aGVuYV9yZXN1bHRzKHJlc3VsdHMpCiAgICAgICAgczNfcmVzcG9uc2Vfb2JqZWN0ID0gUzMuZ2V0X29iamVjdChCdWNrZXQ9UzNfVEFSR0VUX0JVQ0tFVCwgS2V5PWYie0FUSEVOQV9TVEFUVVNfT1VUUFVUX0xPQ0FUSU9OLnNwbGl0KCcvJylbLTJdfS97cXVlcnlfZXhlY3V0aW9uX2lkfS5jc3YiKQogICAgICAgIG9iamVjdF9jb250ZW50ID0gczNfcmVzcG9uc2Vfb2JqZWN0WydCb2R5J10ucmVhZCgpCiAgICAgICAgcmVzdWx0cyA9IHBkLnJlYWRfY3N2KEJ5dGVzSU8ob2JqZWN0X2NvbnRlbnQpKQogICAgICAgIGxvZ2dlci5kZWJ1ZyhmJ0F0aGVuYSBxdWVyeSByYW4gc3VjY2Vzc2Z1bGx5JykKICAgICAgICByZXR1cm4gcmVzdWx0cwogICAgZWxpZiBzdGF0dXMgPT0gJ0ZBSUxFRCc6CiAgICAgICAgcmFpc2UgRXhjZXB0aW9uKCdRdWVyeSBmcm9tIEF0aGVuYSBmYWlsZWQnKQ==\",\"8683583\":\"\",\"8683582\":\"IyEvdXNyL2Jpbi9lbnYgcHl0aG9uCiMgY29kaW5nOiB1dGYtOAoKIyAjIE1vZGVsIGZpdHRpbmcgJiB0cmFpbmluZwoKIyBJblsgXToKCgojc2tsZWFybiB0cmFpbiBtb2RlbAppbXBvcnQgcGFuZGFzCmZyb20gc2tsZWFybiBpbXBvcnQgbW9kZWxfc2VsZWN0aW9uCmZyb20gc2tsZWFybi5saW5lYXJfbW9kZWwgaW1wb3J0IExvZ2lzdGljUmVncmVzc2lvbgpmcm9tIHNrbGVhcm4ubmFpdmVfYmF5ZXMgaW1wb3J0IEdhdXNzaWFuTkIKZnJvbSBza2xlYXJuLm5haXZlX2JheWVzIGltcG9ydCBNdWx0aW5vbWlhbE5CCmltcG9ydCBwaWNrbGUKdXJsID0gImh0dHBzOi8vcmF3LmdpdGh1YnVzZXJjb250ZW50LmNvbS9qYnJvd25sZWUvRGF0YXNldHMvbWFzdGVyL3BpbWEtaW5kaWFucy1kaWFiZXRlcy5kYXRhLmNzdiIKbmFtZXMgPSBbJ3ByZWcnLCAncGxhcycsICdwcmVzJywgJ3NraW4nLCAndGVzdCcsICdtYXNzJywgJ3BlZGknLCAnYWdlJywgJ2NsYXNzJ10KZGF0YWZyYW1lID0gcGFuZGFzLnJlYWRfY3N2KHVybCwgbmFtZXM9bmFtZXMpCmFycmF5ID0gZGF0YWZyYW1lLnZhbHVlcwpYID0gYXJyYXlbOiwwOjhdClkgPSBhcnJheVs6LDhdCnRlc3Rfc2l6ZSA9IDAuMzMKc2VlZCA9IDcKWF90cmFpbiwgWF90ZXN0LCBZX3RyYWluLCBZX3Rlc3QgPSBtb2RlbF9zZWxlY3Rpb24udHJhaW5fdGVzdF9zcGxpdChYLCBZLCB0ZXN0X3NpemU9dGVzdF9zaXplLCByYW5kb21fc3RhdGU9c2VlZCkKbW9kZWwgPSBNdWx0aW5vbWlhbE5CKCkKbW9kZWwuZml0KFhfdHJhaW4sIFlfdHJhaW4pOwoKIyAjIE1vZGVsIFNhdmUKCiMgSW5bIF06CgoKZnJvbSBOb3RlYm9vay5EU05vdGVib29rLk5vdGVib29rRXhlY3V0b3IgaW1wb3J0IE5vdGVib29rRXhlY3V0b3IKbmIgPSBOb3RlYm9va0V4ZWN1dG9yKCkKc2F2ZWRfbW9kZWwgPSBuYi5zYXZlX21vZGVsKG1vZGVsID0gbW9kZWwsIG1vZGVsTmFtZSA9ICdNb2RlbF9uZXdUZW5hbnRfVjInLCBtb2RlbFR5cGUgPSAnbWwnLCBYID0gWF90cmFpbiwgeSA9IFlfdHJhaW4sIGVzdGltYXRvcl90eXBlPSdjbGFzc2lmaWNhdGlvbicpCiNYIGFuZCB5IGFyZSB0cmFpbmluZyBkYXRhc2V0cyB0byBnZXQgZXhwbGFpbmVyIGRhc2hib2FyZC4KI2VzdGltYXRvcl90eXBlIGlzIHRvIHNwZWNpZnkgYWxnb3JpdGhtIHR5cGUgaS5lLiwgY2xhc3NpZmljYXRpb24gYW5kIHJlZ3Jlc3Npb24uCiNPbmx5ICdtbOKAmSBtb2RlbHMgd2l0aCB0YWJ1bGFyIGRhdGEgYXMgaW5wdXQgd2lsbCBzdXBwb3J0IGluIEV4cGxhaW5lciBEYXNoYm9hcmQuCiNDaG9vc2UgbW9kZWxUeXBlID0gJ21sJyBmb3IgbWFjaGluZSBsZWFybmluZyBtb2RlbHMsIG1vZGVsVHlwZSA9ICdjdicgZm9yIGNvbXB1dGVyIHZpc2lvbiBtb2RlbHMgYW5kIG1vZGVsVHlwZSA9ICdkcCcgZm9yIGRhdGEgdHJhbnNmb3JtYXRpb24gcGlja2xlIGZpbGVzLiAKI1Byb3ZpZGUg4oCYY29sdW1uX2hlYWRlcnPigJkgYXMgYSBwYXJhbWV0ZXIgaWYgdGhleSBoYXZlIHRvIGJlIHNhdmVkIGluIHRoZSBtb2RlbC4KI0lmIHVzaW5nIGN1c3RvbSBsYXllciBpbiBrZXJhcywgdXNlIG5hdGl2ZSBzYXZlIGZ1bmN0aW9uYWxpdHkgZnJvbSBrZXJhcy4KCiMgIyBNb2RlbCBMb2FkCgojIEluWyBdOgoKCmZyb20gTm90ZWJvb2suRFNOb3RlYm9vay5Ob3RlYm9va0V4ZWN1dG9yIGltcG9ydCBOb3RlYm9va0V4ZWN1dG9yCm5iID0gTm90ZWJvb2tFeGVjdXRvcigpCmxvYWRlZF9tb2RlbCA9IG5iLmxvYWRfc2F2ZWRfbW9kZWwoJzE3MTcxNjkyNzczNDY5NTExJykKCiMgSW5bIF06CgoKWF90ZXN0X2NvcHkgPSBYX3Rlc3QuY29weSgpCgojICMgTW9kZWwgUHJlZGljdAoKIyBJblsgXToKCgpuYi5wcmVkaWN0KG1vZGVsID0gbG9hZGVkX21vZGVsLCBkYXRhZnJhbWUgPSBYX3Rlc3RfY29weSwgbW9kZWx0eXBlPSdtbCcpIAogI0Nob29zZSBtb2RlbHR5cGUgJ21sJyBmb3IgbWFjaGluZSBsZWFybmluZyBtb2RlbHMgYW5kICdjdicgZm9yIGNvbXB1dGVyIHZpc2lvbiBtb2RlbCAKICNleDogRm9yIG1hY2hpbmUgbGVhcm5pbmcgbW9kZWwgbmIucHJlZGljdChtb2RlbCA9IG1vZGVsLCBtb2RlbHR5cGUgPSAnbWwnLCBkYXRhZnJhbWUgPSBkZikgCiAjZXg6IEZvciBjb21wdXRlciB2aXNpb24ga2VyYXMgbW9kZWwgbmIucHJlZGljdChtb2RlbCA9IG1vZGVsLCBtb2RlbHR5cGUgPSAnY3YnLCBpbWdzID0gaW1ncywgaW1nc2l6ZSA9ICgyOCwgMjgpLCBkaW0gPSAxLCBjbGFzc19uYW1lcyA9IGNsYXNzX25hbWVzKSAKICNhbmQgZm9yIHB5dG9yY2ggbW9kZWwobW9kZWwgPSBtb2RlbCwgbW9kZWx0eXBlID0gJ2N2JywgaW1ncyA9IGltZ3MsIGNsYXNzX25hbWVzID0gY2xhc3NfbmFtZXMpIAogI05vdGU6IGluY2FzZSBhbnkgZXJyb3IgaW4gcHJlZGljdGlvbiB1c2VyIHNxdWVlemVkIGltYWdlIGRhdGEgaW4ga2VyYXMKCiMgSW5bIF06CgoKWF90ZXN0X2NvcHkgPSBYX3Rlc3QuY29weSgpCgojIEluWyBdOgoKCllfcHJlZCA9IG5iLnByZWRpY3QobW9kZWwgPSBsb2FkZWRfbW9kZWwsIGRhdGFmcmFtZSA9IFhfdGVzdF9jb3B5LCBtb2RlbHR5cGU9J21sJykgCgojIEluWyBdOgoKCllfcHJlZC5oZWFkKCkKCiMgSW5bIF06CgoKZnJvbSBza2xlYXJuLm1ldHJpY3MgaW1wb3J0IGFjY3VyYWN5X3Njb3JlCmFjY3VyYWN5X3Njb3JlKFlfdGVzdCwgWV9wcmVkLnByZWRpY3Rpb25zKQoKIyAjIFNhbmRib3ggZmlsZSByZWFkCgojIEluWyBdOgoKCmZyb20gTm90ZWJvb2suRFNOb3RlYm9vay5Ob3RlYm9va0V4ZWN1dG9yIGltcG9ydCBOb3RlYm9va0V4ZWN1dG9yCm5iID0gTm90ZWJvb2tFeGVjdXRvcigpCmRmX1Rlc3RfRGF0YSA9IG5iLmdldF9kYXRhKCcxNzE3MTY5MjY4MTk0MjM0OScsICdAU1lTLlVTRVJJRCcsICdUcnVlJywge30sIFtdKQpkZl9UZXN0X0RhdGEKCiMgIyBBcnRpZmFjdHMgZmlsZSBzYXZlCgojIEluWyBdOgoKCmZyb20gTm90ZWJvb2suRFNOb3RlYm9vay5Ob3RlYm9va0V4ZWN1dG9yIGltcG9ydCBOb3RlYm9va0V4ZWN1dG9yCm5iID0gTm90ZWJvb2tFeGVjdXRvcigpCiNGaWxlIGV4dGVuc2lvbiBzaG91bGQgYmUgd2l0aCAuY3N2Ly5qc29uLy50eHQKbmIuc2F2ZV9hcnRpZmFjdChkYXRhZnJhbWUgPSBkZl9UZXN0X0RhdGEsIG5hbWUgPSAnZGZfVGVzdF9EYXRhLnR4dCcpCgojICMgQXJ0aWZhY3RzIHNhdmVkIGZpbGUgcmVhZAoKIyBJblsgXToKCgpAU1lTLkFSVElGQUNUX1BBVEgrJ2RmX1Rlc3RfRGF0YS50eHQnCgojIEluWyBdOgoKCnByaW50KG9wZW4oQFNZUy5BUlRJRkFDVF9QQVRIKydkZl9UZXN0X0RhdGEudHh0JykucmVhZCgpKQoKIyAjIFJlYWRpbmcgdXBsb2FkZWQgZmlsZSBpbiBmb3JkZXIgc3RydWN0dXJlCgojIEluWyBdOgoKCkBTWVMuREFUQVNBTkRCT1hfUEFUSCArICcxMjMxNDIxNDQxL0RhdGEvRm9sZGVyX1YxL2NodXJuX2RhdGFfbmV3LmNzdicKCiMgSW5bIF06CgoKcGQucmVhZF9jc3YoQFNZUy5EQVRBU0FOREJPWF9QQVRIICsgJzEyMzE0MjE0NDEvRGF0YS9Gb2xkZXJfVjEvY2h1cm5fZGF0YV9uZXcuY3N2JykKCiMgIyBVdGlsaXR5IGZpbGUgcmVhZAoKIyBJblsgXToKCgpmcm9tIFV0aWl0eV9zY3JpcHRfVjE1IGltcG9ydCBQZXJzb24KRnV0dXJlID0gUGVyc29uKCJTaHlhbSIsICIyOSIpCnByaW50KEZ1dHVyZS5uYW1lKQpwcmludChGdXR1cmUuYWdlKQoKIyAjIERhdGEgVHJhbnNmb3JtYXRpb24gc2F2ZQoKIyBJblsgXToKCgpmcm9tIHNrbGVhcm4uZGF0YXNldHMgaW1wb3J0IG1ha2VfYmxvYnMKZnJvbSBza2xlYXJuLm1vZGVsX3NlbGVjdGlvbiBpbXBvcnQgdHJhaW5fdGVzdF9zcGxpdApmcm9tIHNrbGVhcm4ucHJlcHJvY2Vzc2luZyBpbXBvcnQgTWluTWF4U2NhbGVyCmZyb20gc2tsZWFybi5saW5lYXJfbW9kZWwgaW1wb3J0IExvZ2lzdGljUmVncmVzc2lvbgpmcm9tIHBpY2tsZSBpbXBvcnQgZHVtcAojIHByZXBhcmUgZGF0YXNldApYLCB5ID0gbWFrZV9ibG9icyhuX3NhbXBsZXM9MTAwLCBjZW50ZXJzPTIsIG5fZmVhdHVyZXM9MiwgcmFuZG9tX3N0YXRlPTEpCiMgc3BsaXQgZGF0YSBpbnRvIHRyYWluIGFuZCB0ZXN0IHNldHMKWF90cmFpbiwgXywgeV90cmFpbiwgXyA9IHRyYWluX3Rlc3Rfc3BsaXQoWCwgeSwgdGVzdF9zaXplPTAuMzMsIHJhbmRvbV9zdGF0ZT0xKQojIGRlZmluZSBzY2FsZXIKc2NhbGVyID0gTWluTWF4U2NhbGVyKCkKIyBmaXQgc2NhbGVyIG9uIHRoZSB0cmFpbmluZyBkYXRhc2V0CnNjYWxlci5maXQoWF90cmFpbik7CiMgdHJhbnNmb3JtIHRoZSB0cmFpbmluZyBkYXRhc2V0ClhfdHJhaW5fc2NhbGVkID0gc2NhbGVyLnRyYW5zZm9ybShYX3RyYWluKQpmcm9tIE5vdGVib29rLkRTTm90ZWJvb2suTm90ZWJvb2tFeGVjdXRvciBpbXBvcnQgTm90ZWJvb2tFeGVjdXRvcgpuYiA9IE5vdGVib29rRXhlY3V0b3IoKQpzYXZlZF9tb2RlbCA9IG5iLnNhdmVfbW9kZWwobW9kZWwgPSBzY2FsZXIsIG1vZGVsTmFtZSA9ICdTY2FsZXJUcmFuc2Zvcm0nLCBtb2RlbFR5cGUgPSAnZHAnLCBYID0gTm9uZSwgeSA9IE5vbmUsIGVzdGltYXRvcl90eXBlPScnKQojWCBhbmQgeSBhcmUgdHJhaW5pbmcgZGF0YXNldHMgdG8gZ2V0IGV4cGxhaW5lciBkYXNoYm9hcmQuCiNlc3RpbWF0b3JfdHlwZSBpcyB0byBzcGVjaWZ5IGFsZ29yaXRobSB0eXBlIGkuZS4sIGNsYXNzaWZpY2F0aW9uIGFuZCByZWdyZXNzaW9uLgojT25seSAnbWzigJkgbW9kZWxzIHdpdGggdGFidWxhciBkYXRhIGFzIGlucHV0IHdpbGwgc3VwcG9ydCBpbiBFeHBsYWluZXIgRGFzaGJvYXJkLgojQ2hvb3NlIG1vZGVsVHlwZSA9ICdtbCcgZm9yIG1hY2hpbmUgbGVhcm5pbmcgbW9kZWxzLCBtb2RlbFR5cGUgPSAnY3YnIGZvciBjb21wdXRlciB2aXNpb24gbW9kZWxzIGFuZCBtb2RlbFR5cGUgPSAnZHAnIGZvciBkYXRhIHRyYW5zZm9ybWF0aW9uIHBpY2tsZSBmaWxlcy4gCiNQcm92aWRlIOKAmGNvbHVtbl9oZWFkZXJz4oCZIGFzIGEgcGFyYW1ldGVyIGlmIHRoZXkgaGF2ZSB0byBiZSBzYXZlZCBpbiB0aGUgbW9kZWwuCiNJZiB1c2luZyBjdXN0b20gbGF5ZXIgaW4ga2VyYXMsIHVzZSBuYXRpdmUgc2F2ZSBmdW5jdGlvbmFsaXR5IGZyb20ga2VyYXMuCgojICMgVHJhbnNmb3JtYXRpb24gbG9hZAoKIyBJblsgXToKCgpmcm9tIE5vdGVib29rLkRTTm90ZWJvb2suTm90ZWJvb2tFeGVjdXRvciBpbXBvcnQgTm90ZWJvb2tFeGVjdXRvcgpuYiA9IE5vdGVib29rRXhlY3V0b3IoKQpsb2FkZWRfbW9kZWwgPSBuYi5sb2FkX21vZGVsKCcxNzE3MTY5Mjc3Mzc3MTAxMicpCgojICMgVHJhbnNmb3JtaW5nIHRyYWluZyBkYXRhCgojIEluWyBdOgoKCmxvYWRlZF9tb2RlbC50cmFuc2Zvcm0oWF90cmFpbikK\",\"8683581\":\"Y2xhc3MgUGVyc29uX1YzOgogICAgZGVmIF9faW5pdF9fKHNlbGYsIG5hbWUsIGFnZSk6CgkgICAgc2VsZi5uYW1lID0gbmFtZQoJICAgIHNlbGYuYWdlID0gYWdlCgkgICAgcHJpbnQoIjEiKQoKICAgIGRlZiBteWZ1bmMoc2VsZik6CiAgICAJcHJpbnQoIkhlbGxvIG15IG5hbWUgaXMgIiArIHNlbGYubmFtZSk=\",\"8683580\":\"IyEvdXNyL2Jpbi9lbnYgcHl0aG9uCiMgY29kaW5nOiB1dGYtOAoKIyAjIE1vZGVsIGZpdHRpbmcgJiB0cmFpbmluZwoKIyBJblsgXToKCgojc2tsZWFybiB0cmFpbiBtb2RlbAppbXBvcnQgcGFuZGFzCmZyb20gc2tsZWFybiBpbXBvcnQgbW9kZWxfc2VsZWN0aW9uCmZyb20gc2tsZWFybi5saW5lYXJfbW9kZWwgaW1wb3J0IExvZ2lzdGljUmVncmVzc2lvbgpmcm9tIHNrbGVhcm4ubmFpdmVfYmF5ZXMgaW1wb3J0IEdhdXNzaWFuTkIKZnJvbSBza2xlYXJuLm5haXZlX2JheWVzIGltcG9ydCBNdWx0aW5vbWlhbE5CCmltcG9ydCBwaWNrbGUKdXJsID0gImh0dHBzOi8vcmF3LmdpdGh1YnVzZXJjb250ZW50LmNvbS9qYnJvd25sZWUvRGF0YXNldHMvbWFzdGVyL3BpbWEtaW5kaWFucy1kaWFiZXRlcy5kYXRhLmNzdiIKbmFtZXMgPSBbJ3ByZWcnLCAncGxhcycsICdwcmVzJywgJ3NraW4nLCAndGVzdCcsICdtYXNzJywgJ3BlZGknLCAnYWdlJywgJ2NsYXNzJ10KZGF0YWZyYW1lID0gcGFuZGFzLnJlYWRfY3N2KHVybCwgbmFtZXM9bmFtZXMpCmFycmF5ID0gZGF0YWZyYW1lLnZhbHVlcwpYID0gYXJyYXlbOiwwOjhdClkgPSBhcnJheVs6LDhdCnRlc3Rfc2l6ZSA9IDAuMzMKc2VlZCA9IDcKWF90cmFpbiwgWF90ZXN0LCBZX3RyYWluLCBZX3Rlc3QgPSBtb2RlbF9zZWxlY3Rpb24udHJhaW5fdGVzdF9zcGxpdChYLCBZLCB0ZXN0X3NpemU9dGVzdF9zaXplLCByYW5kb21fc3RhdGU9c2VlZCkKbW9kZWwgPSBNdWx0aW5vbWlhbE5CKCkKbW9kZWwuZml0KFhfdHJhaW4sIFlfdHJhaW4pOwoKIyAjIE1vZGVsIFNhdmUKCiMgSW5bIF06CgoKZnJvbSBOb3RlYm9vay5EU05vdGVib29rLk5vdGVib29rRXhlY3V0b3IgaW1wb3J0IE5vdGVib29rRXhlY3V0b3IKbmIgPSBOb3RlYm9va0V4ZWN1dG9yKCkKc2F2ZWRfbW9kZWwgPSBuYi5zYXZlX21vZGVsKG1vZGVsID0gbW9kZWwsIG1vZGVsTmFtZSA9ICdNb2RlbF9uZXdUZW5hbnRfVjInLCBtb2RlbFR5cGUgPSAnbWwnLCBYID0gWF90cmFpbiwgeSA9IFlfdHJhaW4sIGVzdGltYXRvcl90eXBlPSdjbGFzc2lmaWNhdGlvbicpCiNYIGFuZCB5IGFyZSB0cmFpbmluZyBkYXRhc2V0cyB0byBnZXQgZXhwbGFpbmVyIGRhc2hib2FyZC4KI2VzdGltYXRvcl90eXBlIGlzIHRvIHNwZWNpZnkgYWxnb3JpdGhtIHR5cGUgaS5lLiwgY2xhc3NpZmljYXRpb24gYW5kIHJlZ3Jlc3Npb24uCiNPbmx5ICdtbOKAmSBtb2RlbHMgd2l0aCB0YWJ1bGFyIGRhdGEgYXMgaW5wdXQgd2lsbCBzdXBwb3J0IGluIEV4cGxhaW5lciBEYXNoYm9hcmQuCiNDaG9vc2UgbW9kZWxUeXBlID0gJ21sJyBmb3IgbWFjaGluZSBsZWFybmluZyBtb2RlbHMsIG1vZGVsVHlwZSA9ICdjdicgZm9yIGNvbXB1dGVyIHZpc2lvbiBtb2RlbHMgYW5kIG1vZGVsVHlwZSA9ICdkcCcgZm9yIGRhdGEgdHJhbnNmb3JtYXRpb24gcGlja2xlIGZpbGVzLiAKI1Byb3ZpZGUg4oCYY29sdW1uX2hlYWRlcnPigJkgYXMgYSBwYXJhbWV0ZXIgaWYgdGhleSBoYXZlIHRvIGJlIHNhdmVkIGluIHRoZSBtb2RlbC4KI0lmIHVzaW5nIGN1c3RvbSBsYXllciBpbiBrZXJhcywgdXNlIG5hdGl2ZSBzYXZlIGZ1bmN0aW9uYWxpdHkgZnJvbSBrZXJhcy4KCiMgIyBNb2RlbCBMb2FkCgojIEluWyBdOgoKCmZyb20gTm90ZWJvb2suRFNOb3RlYm9vay5Ob3RlYm9va0V4ZWN1dG9yIGltcG9ydCBOb3RlYm9va0V4ZWN1dG9yCm5iID0gTm90ZWJvb2tFeGVjdXRvcigpCmxvYWRlZF9tb2RlbCA9IG5iLmxvYWRfc2F2ZWRfbW9kZWwoJzE3MTcxNjkyNzczNDY5NTExJykKCiMgSW5bIF06CgoKWF90ZXN0X2NvcHkgPSBYX3Rlc3QuY29weSgpCgojICMgTW9kZWwgUHJlZGljdAoKIyBJblsgXToKCgpuYi5wcmVkaWN0KG1vZGVsID0gbG9hZGVkX21vZGVsLCBkYXRhZnJhbWUgPSBYX3Rlc3RfY29weSwgbW9kZWx0eXBlPSdtbCcpIAogI0Nob29zZSBtb2RlbHR5cGUgJ21sJyBmb3IgbWFjaGluZSBsZWFybmluZyBtb2RlbHMgYW5kICdjdicgZm9yIGNvbXB1dGVyIHZpc2lvbiBtb2RlbCAKICNleDogRm9yIG1hY2hpbmUgbGVhcm5pbmcgbW9kZWwgbmIucHJlZGljdChtb2RlbCA9IG1vZGVsLCBtb2RlbHR5cGUgPSAnbWwnLCBkYXRhZnJhbWUgPSBkZikgCiAjZXg6IEZvciBjb21wdXRlciB2aXNpb24ga2VyYXMgbW9kZWwgbmIucHJlZGljdChtb2RlbCA9IG1vZGVsLCBtb2RlbHR5cGUgPSAnY3YnLCBpbWdzID0gaW1ncywgaW1nc2l6ZSA9ICgyOCwgMjgpLCBkaW0gPSAxLCBjbGFzc19uYW1lcyA9IGNsYXNzX25hbWVzKSAKICNhbmQgZm9yIHB5dG9yY2ggbW9kZWwobW9kZWwgPSBtb2RlbCwgbW9kZWx0eXBlID0gJ2N2JywgaW1ncyA9IGltZ3MsIGNsYXNzX25hbWVzID0gY2xhc3NfbmFtZXMpIAogI05vdGU6IGluY2FzZSBhbnkgZXJyb3IgaW4gcHJlZGljdGlvbiB1c2VyIHNxdWVlemVkIGltYWdlIGRhdGEgaW4ga2VyYXMKCiMgSW5bIF06CgoKWF90ZXN0X2NvcHkgPSBYX3Rlc3QuY29weSgpCgojIEluWyBdOgoKCllfcHJlZCA9IG5iLnByZWRpY3QobW9kZWwgPSBsb2FkZWRfbW9kZWwsIGRhdGFmcmFtZSA9IFhfdGVzdF9jb3B5LCBtb2RlbHR5cGU9J21sJykgCgojIEluWyBdOgoKCllfcHJlZC5oZWFkKCkKCiMgSW5bIF06CgoKZnJvbSBza2xlYXJuLm1ldHJpY3MgaW1wb3J0IGFjY3VyYWN5X3Njb3JlCmFjY3VyYWN5X3Njb3JlKFlfdGVzdCwgWV9wcmVkLnByZWRpY3Rpb25zKQoKIyAjIFNhbmRib3ggZmlsZSByZWFkCgojIEluWyBdOgoKCmZyb20gTm90ZWJvb2suRFNOb3RlYm9vay5Ob3RlYm9va0V4ZWN1dG9yIGltcG9ydCBOb3RlYm9va0V4ZWN1dG9yCm5iID0gTm90ZWJvb2tFeGVjdXRvcigpCmRmX1Rlc3RfRGF0YSA9IG5iLmdldF9kYXRhKCcxNzE3MTY5MjY4MTk0MjM0OScsICdAU1lTLlVTRVJJRCcsICdUcnVlJywge30sIFtdKQpkZl9UZXN0X0RhdGEKCiMgIyBBcnRpZmFjdHMgZmlsZSBzYXZlCgojIEluWyBdOgoKCmZyb20gTm90ZWJvb2suRFNOb3RlYm9vay5Ob3RlYm9va0V4ZWN1dG9yIGltcG9ydCBOb3RlYm9va0V4ZWN1dG9yCm5iID0gTm90ZWJvb2tFeGVjdXRvcigpCiNGaWxlIGV4dGVuc2lvbiBzaG91bGQgYmUgd2l0aCAuY3N2Ly5qc29uLy50eHQKbmIuc2F2ZV9hcnRpZmFjdChkYXRhZnJhbWUgPSBkZl9UZXN0X0RhdGEsIG5hbWUgPSAnZGZfVGVzdF9EYXRhLnR4dCcpCgojICMgQXJ0aWZhY3RzIHNhdmVkIGZpbGUgcmVhZAoKIyBJblsgXToKCgpAU1lTLkFSVElGQUNUX1BBVEgrJ2RmX1Rlc3RfRGF0YS50eHQnCgojIEluWyBdOgoKCnByaW50KG9wZW4oQFNZUy5BUlRJRkFDVF9QQVRIKydkZl9UZXN0X0RhdGEudHh0JykucmVhZCgpKQoKIyAjIFJlYWRpbmcgdXBsb2FkZWQgZmlsZSBpbiBmb3JkZXIgc3RydWN0dXJlCgojIEluWyBdOgoKCkBTWVMuREFUQVNBTkRCT1hfUEFUSCArICcxMjMxNDIxNDQxL0RhdGEvRm9sZGVyX1YxL2NodXJuX2RhdGFfbmV3LmNzdicKCiMgSW5bIF06CgoKcGQucmVhZF9jc3YoQFNZUy5EQVRBU0FOREJPWF9QQVRIICsgJzEyMzE0MjE0NDEvRGF0YS9Gb2xkZXJfVjEvY2h1cm5fZGF0YV9uZXcuY3N2JykKCiMgIyBVdGlsaXR5IGZpbGUgcmVhZAoKIyBJblsgXToKCgpmcm9tIFV0aWl0eV9zY3JpcHRfVjE1IGltcG9ydCBQZXJzb24KRnV0dXJlID0gUGVyc29uKCJTaHlhbSIsICIyOSIpCnByaW50KEZ1dHVyZS5uYW1lKQpwcmludChGdXR1cmUuYWdlKQoKIyAjIERhdGEgVHJhbnNmb3JtYXRpb24gc2F2ZQoKIyBJblsgXToKCgpmcm9tIHNrbGVhcm4uZGF0YXNldHMgaW1wb3J0IG1ha2VfYmxvYnMKZnJvbSBza2xlYXJuLm1vZGVsX3NlbGVjdGlvbiBpbXBvcnQgdHJhaW5fdGVzdF9zcGxpdApmcm9tIHNrbGVhcm4ucHJlcHJvY2Vzc2luZyBpbXBvcnQgTWluTWF4U2NhbGVyCmZyb20gc2tsZWFybi5saW5lYXJfbW9kZWwgaW1wb3J0IExvZ2lzdGljUmVncmVzc2lvbgpmcm9tIHBpY2tsZSBpbXBvcnQgZHVtcAojIHByZXBhcmUgZGF0YXNldApYLCB5ID0gbWFrZV9ibG9icyhuX3NhbXBsZXM9MTAwLCBjZW50ZXJzPTIsIG5fZmVhdHVyZXM9MiwgcmFuZG9tX3N0YXRlPTEpCiMgc3BsaXQgZGF0YSBpbnRvIHRyYWluIGFuZCB0ZXN0IHNldHMKWF90cmFpbiwgXywgeV90cmFpbiwgXyA9IHRyYWluX3Rlc3Rfc3BsaXQoWCwgeSwgdGVzdF9zaXplPTAuMzMsIHJhbmRvbV9zdGF0ZT0xKQojIGRlZmluZSBzY2FsZXIKc2NhbGVyID0gTWluTWF4U2NhbGVyKCkKIyBmaXQgc2NhbGVyIG9uIHRoZSB0cmFpbmluZyBkYXRhc2V0CnNjYWxlci5maXQoWF90cmFpbik7CiMgdHJhbnNmb3JtIHRoZSB0cmFpbmluZyBkYXRhc2V0ClhfdHJhaW5fc2NhbGVkID0gc2NhbGVyLnRyYW5zZm9ybShYX3RyYWluKQpmcm9tIE5vdGVib29rLkRTTm90ZWJvb2suTm90ZWJvb2tFeGVjdXRvciBpbXBvcnQgTm90ZWJvb2tFeGVjdXRvcgpuYiA9IE5vdGVib29rRXhlY3V0b3IoKQpzYXZlZF9tb2RlbCA9IG5iLnNhdmVfbW9kZWwobW9kZWwgPSBzY2FsZXIsIG1vZGVsTmFtZSA9ICdTY2FsZXJUcmFuc2Zvcm0nLCBtb2RlbFR5cGUgPSAnZHAnLCBYID0gTm9uZSwgeSA9IE5vbmUsIGVzdGltYXRvcl90eXBlPScnKQojWCBhbmQgeSBhcmUgdHJhaW5pbmcgZGF0YXNldHMgdG8gZ2V0IGV4cGxhaW5lciBkYXNoYm9hcmQuCiNlc3RpbWF0b3JfdHlwZSBpcyB0byBzcGVjaWZ5IGFsZ29yaXRobSB0eXBlIGkuZS4sIGNsYXNzaWZpY2F0aW9uIGFuZCByZWdyZXNzaW9uLgojT25seSAnbWzigJkgbW9kZWxzIHdpdGggdGFidWxhciBkYXRhIGFzIGlucHV0IHdpbGwgc3VwcG9ydCBpbiBFeHBsYWluZXIgRGFzaGJvYXJkLgojQ2hvb3NlIG1vZGVsVHlwZSA9ICdtbCcgZm9yIG1hY2hpbmUgbGVhcm5pbmcgbW9kZWxzLCBtb2RlbFR5cGUgPSAnY3YnIGZvciBjb21wdXRlciB2aXNpb24gbW9kZWxzIGFuZCBtb2RlbFR5cGUgPSAnZHAnIGZvciBkYXRhIHRyYW5zZm9ybWF0aW9uIHBpY2tsZSBmaWxlcy4gCiNQcm92aWRlIOKAmGNvbHVtbl9oZWFkZXJz4oCZIGFzIGEgcGFyYW1ldGVyIGlmIHRoZXkgaGF2ZSB0byBiZSBzYXZlZCBpbiB0aGUgbW9kZWwuCiNJZiB1c2luZyBjdXN0b20gbGF5ZXIgaW4ga2VyYXMsIHVzZSBuYXRpdmUgc2F2ZSBmdW5jdGlvbmFsaXR5IGZyb20ga2VyYXMuCgojICMgVHJhbnNmb3JtYXRpb24gbG9hZAoKIyBJblsgXToKCgpmcm9tIE5vdGVib29rLkRTTm90ZWJvb2suTm90ZWJvb2tFeGVjdXRvciBpbXBvcnQgTm90ZWJvb2tFeGVjdXRvcgpuYiA9IE5vdGVib29rRXhlY3V0b3IoKQpsb2FkZWRfbW9kZWwgPSBuYi5sb2FkX21vZGVsKCcxNzE3MTY5Mjc3Mzc3MTAxMicpCgojICMgVHJhbnNmb3JtaW5nIHRyYWluZyBkYXRhCgojIEluWyBdOgoKCmxvYWRlZF9tb2RlbC50cmFuc2Zvcm0oWF90cmFpbikK\"}","sandboxService":[],"notebookContent":"{\"nbformat_minor\":2,\"metadata\":{},\"cells\":[{\"outputs\":[],\"metadata\":{\"id\":\"11730976_0.392308708434143\"},\"execution_count\":null,\"source\":[\"def sample_func():\\n    #sklearn train model new_V5\\n    import pandas\\n    from sklearn  import model_selection\\n    from sklearn.linear_model import LogisticRegression\\n    from sklearn.naive_bayes import GaussianNB\\n    from sklearn.naive_bayes import MultinomialNB\\n    import pickle as pkle\\n    url = \\\"https://raw.githubusercontent.com/jbrownlee/Datasets/master/pima-indians-diabetes.data.csv\\\"\\n    names = ['preg', 'plas', 'pres', 'skin', 'test', 'mass', 'pedi', 'age', 'class']\\n    dataframe = pandas.read_csv(url, names=names)\\n    array = dataframe.values\\n    X = array[:,0:8]\\n    Y = array[:,8]\\n    test_size = 0.33\\n    seed = 7\\n    X_train, X_test, Y_train, Y_test = model_selection.train_test_split(X, Y, test_size=test_size, random_state=seed)\\n    model = MultinomialNB()\\n    model.fit(X_train, Y_train);\\n    return dataframe\"],\"cell_type\":\"code\"}],\"nbformat\":4}","secrets":"{\"reserv1\":null,\"reserv2\":null,\"reserv3\":null,\"reserv4\":null,\"reserv5\":null,\"createdDate\":null,\"isActive\":0,\"lastUpdatedDate\":null,\"active\":1,\"migrationId\":null,\"id\":5537798,\"type\":\"210\",\"status\":1,\"spaceKey\":\"1156\",\"settings\":\"[]\"}","dataSource":[],"notebook":"{\"migrationId\":null,\"id\":11730976,\"projectId\":1474560,\"spaceKey\":\"1156\",\"notebookName\":\"SampleScript\",\"data\":\"{\\\"datasets\\\":[],\\\"uncheckeddatasets\\\":[],\\\"kernalID\\\":\\\"\\\",\\\"Algorithms\\\":[],\\\"isScheduled\\\":0,\\\"filename\\\":\\\"SampleScript.ipynb\\\",\\\"last_modified_date\\\":\\\"2023-10-27T04:50:32.000+00:00\\\"}\",\"description\":null,\"createdDate\":1698387611656,\"lastUpdatedDate\":1698387611659,\"createdBy\":950278,\"updatedBy\":950278,\"status\":1,\"committedBy\":950278,\"lastcommittedDate\":1698387611656,\"isShared\":null,\"customComponentscript\":null,\"type\":1,\"isScheduled\":null,\"isImported\":1,\"uuid\":\"11561698387611658\"}","preparation":[]}}