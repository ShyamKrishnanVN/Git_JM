{"featureSets":null,"autoML":null,"superFeatureSet":null,"errorMessage":null,"featureSet":null,"errorCode":null,"notebookModels":null,"message":"Successfully retrived!","notebookModelAsApi":null,"notebookScriptAsApi":null,"notebookModel":null,"notebookModelAsApis":null,"success":true,"notebooks":null,"customNotebookScript":null,"superFeatureSets":null,"messageCode":null,"stackTrace":null,"notebookContent":"{\"sucess\":true,\"content\":{\"nbformat_minor\":2,\"metadata\":{},\"cells\":[{\"outputs\":[],\"metadata\":{\"id\":\"16955299383_0.41219816627637695\"},\"execution_count\":null,\"source\":[\"from Notebook.DSNotebook.NotebookExecutor import NotebookExecutor\\nnb = NotebookExecutor() \\ndf_PA_Data = nb.get_data('11111722937216409', '@SYS.USERID', 'True', {}, [], sheet_name = '')\\ndf_PA_Data        \"],\"cell_type\":\"code\"},{\"outputs\":[],\"metadata\":{\"id\":\"16955299383_0.20273913066326021\"},\"execution_count\":null,\"source\":[\"Testing  purpuse dd\"],\"cell_type\":\"code\"},{\"outputs\":[],\"metadata\":{\"id\":\"16955299383_0.05924745868753356\"},\"execution_count\":null,\"source\":[\"def getFunction():\\n    return \\\"\\\";\"],\"cell_type\":\"code\"},{\"outputs\":[],\"metadata\":{\"id\":\"16955299383_0.9538663026267205\"},\"execution_count\":null,\"source\":[\"from Notebook.DSNotebook.NotebookExecutor import NotebookExecutor\\nnb = NotebookExecutor()\\ndf_Limrik_Data = nb.get_data('11111722232241985', '@SYS.USERID', 'False', {}, [], sheet_name = '')\\ndisplay(df_Limrik_Data)\"],\"cell_type\":\"code\"},{\"outputs\":[],\"metadata\":{\"id\":\"16955299383_0.6342120827809221\"},\"execution_count\":null,\"source\":[\"from Notebook.DSNotebook.NotebookExecutor import NotebookExecutor\\nnb = NotebookExecutor()\\ndf_PA_Data = nb.get_data('11111722937216409', '@SYS.USERID', 'True', {}, [], sheet_name = '')\\ndf_PA_Data\"],\"cell_type\":\"code\"},{\"outputs\":[],\"metadata\":{\"id\":\"16955299383_0.9259649467341657\"},\"execution_count\":null,\"source\":[\"from Notebook.DSNotebook.NotebookExecutor import NotebookExecutor\\nnb = NotebookExecutor()\\ndf_PA_Data = nb.get_data('11111722937216409', '@SYS.USERID', 'True', {}, [], sheet_name = '')\\ndf_PA_Data\"],\"cell_type\":\"code\"},{\"outputs\":[{\"metadata\":{},\"data\":{\"text/html\":[\"<div>\\n<style scoped>\\n    .dataframe tbody tr th:only-of-type {\\n        vertical-align: middle;\\n    }\\n\\n    .dataframe tbody tr th {\\n        vertical-align: top;\\n    }\\n\\n    .dataframe thead th {\\n        text-align: right;\\n    }\\n<\/style>\\n<table border=\\\"1\\\" class=\\\"dataframe\\\">\\n  <thead>\\n    <tr style=\\\"text-align: right;\\\">\\n      <th><\/th>\\n      <th>UID<\/th>\\n      <th>Product ID<\/th>\\n      <th>Type<\/th>\\n      <th>Air temperature<\/th>\\n      <th>Process temperature<\/th>\\n      <th>Rotational speed<\/th>\\n      <th>Torque<\/th>\\n      <th>Tool wear<\/th>\\n      <th>Target<\/th>\\n      <th>Failure Type<\/th>\\n    <\/tr>\\n  <\/thead>\\n  <tbody>\\n    <tr>\\n      <th>0<\/th>\\n      <td>1<\/td>\\n      <td>M14860<\/td>\\n      <td>M<\/td>\\n      <td>298.1<\/td>\\n      <td>308.6<\/td>\\n      <td>1551<\/td>\\n      <td>42.8<\/td>\\n      <td>0<\/td>\\n      <td>0<\/td>\\n      <td>No Failure<\/td>\\n    <\/tr>\\n    <tr>\\n      <th>1<\/th>\\n      <td>2<\/td>\\n      <td>L47181<\/td>\\n      <td>L<\/td>\\n      <td>298.2<\/td>\\n      <td>308.7<\/td>\\n      <td>1408<\/td>\\n      <td>46.3<\/td>\\n      <td>3<\/td>\\n      <td>0<\/td>\\n      <td>No Failure<\/td>\\n    <\/tr>\\n    <tr>\\n      <th>2<\/th>\\n      <td>3<\/td>\\n      <td>L47182<\/td>\\n      <td>L<\/td>\\n      <td>298.1<\/td>\\n      <td>308.5<\/td>\\n      <td>1498<\/td>\\n      <td>49.4<\/td>\\n      <td>5<\/td>\\n      <td>0<\/td>\\n      <td>No Failure<\/td>\\n    <\/tr>\\n    <tr>\\n      <th>3<\/th>\\n      <td>4<\/td>\\n      <td>L47183<\/td>\\n      <td>L<\/td>\\n      <td>298.2<\/td>\\n      <td>308.6<\/td>\\n      <td>1433<\/td>\\n      <td>39.5<\/td>\\n      <td>7<\/td>\\n      <td>0<\/td>\\n      <td>No Failure<\/td>\\n    <\/tr>\\n    <tr>\\n      <th>4<\/th>\\n      <td>5<\/td>\\n      <td>L47184<\/td>\\n      <td>L<\/td>\\n      <td>298.2<\/td>\\n      <td>308.7<\/td>\\n      <td>1408<\/td>\\n      <td>40.0<\/td>\\n      <td>9<\/td>\\n      <td>0<\/td>\\n      <td>No Failure<\/td>\\n    <\/tr>\\n    <tr>\\n      <th>...<\/th>\\n      <td>...<\/td>\\n      <td>...<\/td>\\n      <td>...<\/td>\\n      <td>...<\/td>\\n      <td>...<\/td>\\n      <td>...<\/td>\\n      <td>...<\/td>\\n      <td>...<\/td>\\n      <td>...<\/td>\\n      <td>...<\/td>\\n    <\/tr>\\n    <tr>\\n      <th>9995<\/th>\\n      <td>9996<\/td>\\n      <td>M24855<\/td>\\n      <td>M<\/td>\\n      <td>298.8<\/td>\\n      <td>308.4<\/td>\\n      <td>1604<\/td>\\n      <td>29.5<\/td>\\n      <td>14<\/td>\\n      <td>0<\/td>\\n      <td>No Failure<\/td>\\n    <\/tr>\\n    <tr>\\n      <th>9996<\/th>\\n      <td>9997<\/td>\\n      <td>H39410<\/td>\\n      <td>H<\/td>\\n      <td>298.9<\/td>\\n      <td>308.4<\/td>\\n      <td>1632<\/td>\\n      <td>31.8<\/td>\\n      <td>17<\/td>\\n      <td>0<\/td>\\n      <td>No Failure<\/td>\\n    <\/tr>\\n    <tr>\\n      <th>9997<\/th>\\n      <td>9998<\/td>\\n      <td>M24857<\/td>\\n      <td>M<\/td>\\n      <td>299.0<\/td>\\n      <td>308.6<\/td>\\n      <td>1645<\/td>\\n      <td>33.4<\/td>\\n      <td>22<\/td>\\n      <td>0<\/td>\\n      <td>No Failure<\/td>\\n    <\/tr>\\n    <tr>\\n      <th>9998<\/th>\\n      <td>9999<\/td>\\n      <td>H39412<\/td>\\n      <td>H<\/td>\\n      <td>299.0<\/td>\\n      <td>308.7<\/td>\\n      <td>1408<\/td>\\n      <td>48.5<\/td>\\n      <td>25<\/td>\\n      <td>0<\/td>\\n      <td>No Failure<\/td>\\n    <\/tr>\\n    <tr>\\n      <th>9999<\/th>\\n      <td>10000<\/td>\\n      <td>M24859<\/td>\\n      <td>M<\/td>\\n      <td>299.0<\/td>\\n      <td>308.7<\/td>\\n      <td>1500<\/td>\\n      <td>40.2<\/td>\\n      <td>30<\/td>\\n      <td>0<\/td>\\n      <td>No Failure<\/td>\\n    <\/tr>\\n  <\/tbody>\\n<\/table>\\n<p>10000 rows Ã— 10 columns<\/p>\\n<\/div>\"],\"text/plain\":[\"        UID Product ID Type  Air temperature   Process temperature   Rotational speed   Torque   Tool wear   Target Failure Type\\n0         1     M14860    M             298.1                 308.6               1551     42.8           0       0   No Failure\\n1         2     L47181    L             298.2                 308.7               1408     46.3           3       0   No Failure\\n2         3     L47182    L             298.1                 308.5               1498     49.4           5       0   No Failure\\n3         4     L47183    L             298.2                 308.6               1433     39.5           7       0   No Failure\\n4         5     L47184    L             298.2                 308.7               1408     40.0           9       0   No Failure\\n...     ...        ...  ...               ...                   ...                ...      ...         ...     ...          ...\\n9995   9996     M24855    M             298.8                 308.4               1604     29.5          14       0   No Failure\\n9996   9997     H39410    H             298.9                 308.4               1632     31.8          17       0   No Failure\\n9997   9998     M24857    M             299.0                 308.6               1645     33.4          22       0   No Failure\\n9998   9999     H39412    H             299.0                 308.7               1408     48.5          25       0   No Failure\\n9999  10000     M24859    M             299.0                 308.7               1500     40.2          30       0   No Failure\\n\\n[10000 rows x 10 columns]\"]},\"output_type\":\"execute_result\",\"execution_count\":2}],\"metadata\":{\"id\":\"0_0.48609073815996373\"},\"execution_count\":1,\"source\":[\"from Notebook.DSNotebook.NotebookExecutor import NotebookExecutor\\nnb = NotebookExecutor()\\ndf = nb.get_data('11111722937216409', '@SYS.USERID', 'True', {}, [], sheet_name = '')\\ndf\"],\"cell_type\":\"code\"},{\"outputs\":[],\"metadata\":{\"id\":\"0_0.9636487687681692\"},\"execution_count\":null,\"source\":[\"## **Analyze data**\"],\"cell_type\":\"markdown\"},{\"outputs\":[],\"metadata\":{\"id\":\"0_0.7690709001041043\"},\"execution_count\":null,\"source\":[\"df.info()\"],\"cell_type\":\"code\"},{\"outputs\":[],\"metadata\":{\"id\":\"0_0.1956408025105676\"},\"execution_count\":null,\"source\":[\"df.describe()\"],\"cell_type\":\"code\"},{\"outputs\":[],\"metadata\":{\"id\":\"0_0.5526815036003192\"},\"execution_count\":null,\"source\":[\"## **Encode data**\"],\"cell_type\":\"markdown\"},{\"outputs\":[{\"metadata\":{},\"data\":{\"text/html\":[\"<div>\\n<style scoped>\\n    .dataframe tbody tr th:only-of-type {\\n        vertical-align: middle;\\n    }\\n\\n    .dataframe tbody tr th {\\n        vertical-align: top;\\n    }\\n\\n    .dataframe thead th {\\n        text-align: right;\\n    }\\n<\/style>\\n<table border=\\\"1\\\" class=\\\"dataframe\\\">\\n  <thead>\\n    <tr style=\\\"text-align: right;\\\">\\n      <th><\/th>\\n      <th>UID<\/th>\\n      <th>Product ID<\/th>\\n      <th>Type<\/th>\\n      <th>Air temperature<\/th>\\n      <th>Process temperature<\/th>\\n      <th>Rotational speed<\/th>\\n      <th>Torque<\/th>\\n      <th>Tool wear<\/th>\\n      <th>Target<\/th>\\n      <th>Failure Type<\/th>\\n    <\/tr>\\n  <\/thead>\\n  <tbody>\\n    <tr>\\n      <th>0<\/th>\\n      <td>1<\/td>\\n      <td>7003<\/td>\\n      <td>2<\/td>\\n      <td>298.1<\/td>\\n      <td>308.6<\/td>\\n      <td>1551<\/td>\\n      <td>42.8<\/td>\\n      <td>0<\/td>\\n      <td>0<\/td>\\n      <td>1<\/td>\\n    <\/tr>\\n    <tr>\\n      <th>1<\/th>\\n      <td>2<\/td>\\n      <td>1003<\/td>\\n      <td>1<\/td>\\n      <td>298.2<\/td>\\n      <td>308.7<\/td>\\n      <td>1408<\/td>\\n      <td>46.3<\/td>\\n      <td>3<\/td>\\n      <td>0<\/td>\\n      <td>1<\/td>\\n    <\/tr>\\n    <tr>\\n      <th>2<\/th>\\n      <td>3<\/td>\\n      <td>1004<\/td>\\n      <td>1<\/td>\\n      <td>298.1<\/td>\\n      <td>308.5<\/td>\\n      <td>1498<\/td>\\n      <td>49.4<\/td>\\n      <td>5<\/td>\\n      <td>0<\/td>\\n      <td>1<\/td>\\n    <\/tr>\\n    <tr>\\n      <th>3<\/th>\\n      <td>4<\/td>\\n      <td>1005<\/td>\\n      <td>1<\/td>\\n      <td>298.2<\/td>\\n      <td>308.6<\/td>\\n      <td>1433<\/td>\\n      <td>39.5<\/td>\\n      <td>7<\/td>\\n      <td>0<\/td>\\n      <td>1<\/td>\\n    <\/tr>\\n    <tr>\\n      <th>4<\/th>\\n      <td>5<\/td>\\n      <td>1006<\/td>\\n      <td>1<\/td>\\n      <td>298.2<\/td>\\n      <td>308.7<\/td>\\n      <td>1408<\/td>\\n      <td>40.0<\/td>\\n      <td>9<\/td>\\n      <td>0<\/td>\\n      <td>1<\/td>\\n    <\/tr>\\n    <tr>\\n      <th>...<\/th>\\n      <td>...<\/td>\\n      <td>...<\/td>\\n      <td>...<\/td>\\n      <td>...<\/td>\\n      <td>...<\/td>\\n      <td>...<\/td>\\n      <td>...<\/td>\\n      <td>...<\/td>\\n      <td>...<\/td>\\n      <td>...<\/td>\\n    <\/tr>\\n    <tr>\\n      <th>9995<\/th>\\n      <td>9996<\/td>\\n      <td>9997<\/td>\\n      <td>2<\/td>\\n      <td>298.8<\/td>\\n      <td>308.4<\/td>\\n      <td>1604<\/td>\\n      <td>29.5<\/td>\\n      <td>14<\/td>\\n      <td>0<\/td>\\n      <td>1<\/td>\\n    <\/tr>\\n    <tr>\\n      <th>9996<\/th>\\n      <td>9997<\/td>\\n      <td>1001<\/td>\\n      <td>0<\/td>\\n      <td>298.9<\/td>\\n      <td>308.4<\/td>\\n      <td>1632<\/td>\\n      <td>31.8<\/td>\\n      <td>17<\/td>\\n      <td>0<\/td>\\n      <td>1<\/td>\\n    <\/tr>\\n    <tr>\\n      <th>9997<\/th>\\n      <td>9998<\/td>\\n      <td>9998<\/td>\\n      <td>2<\/td>\\n      <td>299.0<\/td>\\n      <td>308.6<\/td>\\n      <td>1645<\/td>\\n      <td>33.4<\/td>\\n      <td>22<\/td>\\n      <td>0<\/td>\\n      <td>1<\/td>\\n    <\/tr>\\n    <tr>\\n      <th>9998<\/th>\\n      <td>9999<\/td>\\n      <td>1002<\/td>\\n      <td>0<\/td>\\n      <td>299.0<\/td>\\n      <td>308.7<\/td>\\n      <td>1408<\/td>\\n      <td>48.5<\/td>\\n      <td>25<\/td>\\n      <td>0<\/td>\\n      <td>1<\/td>\\n    <\/tr>\\n    <tr>\\n      <th>9999<\/th>\\n      <td>10000<\/td>\\n      <td>9999<\/td>\\n      <td>2<\/td>\\n      <td>299.0<\/td>\\n      <td>308.7<\/td>\\n      <td>1500<\/td>\\n      <td>40.2<\/td>\\n      <td>30<\/td>\\n      <td>0<\/td>\\n      <td>1<\/td>\\n    <\/tr>\\n  <\/tbody>\\n<\/table>\\n<p>10000 rows Ã— 10 columns<\/p>\\n<\/div>\"],\"text/plain\":[\"        UID  Product ID  Type  Air temperature   Process temperature   Rotational speed   Torque   Tool wear   Target  Failure Type\\n0         1        7003     2             298.1                 308.6               1551     42.8           0       0             1\\n1         2        1003     1             298.2                 308.7               1408     46.3           3       0             1\\n2         3        1004     1             298.1                 308.5               1498     49.4           5       0             1\\n3         4        1005     1             298.2                 308.6               1433     39.5           7       0             1\\n4         5        1006     1             298.2                 308.7               1408     40.0           9       0             1\\n...     ...         ...   ...               ...                   ...                ...      ...         ...     ...           ...\\n9995   9996        9997     2             298.8                 308.4               1604     29.5          14       0             1\\n9996   9997        1001     0             298.9                 308.4               1632     31.8          17       0             1\\n9997   9998        9998     2             299.0                 308.6               1645     33.4          22       0             1\\n9998   9999        1002     0             299.0                 308.7               1408     48.5          25       0             1\\n9999  10000        9999     2             299.0                 308.7               1500     40.2          30       0             1\\n\\n[10000 rows x 10 columns]\"]},\"output_type\":\"execute_result\",\"execution_count\":4}],\"metadata\":{\"id\":\"0_0.018331495972319534\"},\"execution_count\":3,\"source\":[\"import pandas as pd\\nfrom sklearn.preprocessing import LabelEncoder\\n\\ndf_data = df.copy()\\n\\n#Encoding the string and date column values for model training.\\nlabel_encoder = LabelEncoder()\\nfor column in df_data.select_dtypes(include=['object']).columns:\\n    df_data[column] = label_encoder.fit_transform(df_data[column]);\\n# df_out = df_data.drop(\\\"time_difference\\\", axis=1)\\ndf_data\"],\"cell_type\":\"code\"},{\"outputs\":[],\"metadata\":{\"id\":\"0_0.6280640554711936\"},\"execution_count\":null,\"source\":[\"## **Fit and train a Random Forest classification model**\"],\"cell_type\":\"markdown\"},{\"outputs\":[{\"output_type\":\"stream\",\"name\":\"stdout\",\"text\":\"Shape of complete data: (10000, 10)\\nShape of training data: (7000, 9)\\nShape of testing data : (3000, 9)\\nModel RandomForestClassifier() trained\\nSeconds elapsed: 0.568\\nPredictions on training data made\\nAccuracy score of training predictions: 1.0\\nClassification report of training predictions:\\n              precision    recall  f1-score   support\\n\\n           0      1.000     1.000     1.000        74\\n           1      1.000     1.000     1.000      6772\\n           2      1.000     1.000     1.000        44\\n           3      1.000     1.000     1.000        65\\n           4      1.000     1.000     1.000         9\\n           5      1.000     1.000     1.000        36\\n\\n    accuracy                          1.000      7000\\n   macro avg      1.000     1.000     1.000      7000\\nweighted avg      1.000     1.000     1.000      7000\\n\\nPredictions on testing data made\\nAccuracy score of testing predictions: 0.993\\nClassification report of testing predictions:\\n              precision    recall  f1-score   support\\n\\n           0      0.974     0.974     0.974        38\\n           1      0.997     0.998     0.998      2880\\n           2      0.914     0.941     0.928        34\\n           3      0.818     0.900     0.857        30\\n           4      0.000     0.000     0.000         9\\n           5      0.800     0.889     0.842         9\\n\\n    accuracy                          0.993      3000\\n   macro avg      0.751     0.784     0.766      3000\\nweighted avg      0.990     0.993     0.992      3000\\n\\n\"}],\"metadata\":{\"id\":\"0_0.3965725609960251\"},\"execution_count\":4,\"source\":[\"import pandas as pd\\nfrom time import perf_counter as get_time\\nfrom sklearn.model_selection import train_test_split\\nfrom sklearn.ensemble import RandomForestClassifier\\nfrom sklearn.metrics import accuracy_score, classification_report\\n\\n# Define the necessary variables here\\n_data   = df_data    # pd.DataFrame: Full data to process\\n_target = 'Failure Type'    # string: Column name of the target variable\\n\\nif _data is None or _target is None:\\n    raise Exception(f'Both _data and _target must be specified')\\nelif not (isinstance(_data, pd.DataFrame) and isinstance(_target, str)):\\n    raise Exception(f'Datatype of _data must be pd.DataFrame; that of _target must be str')\\n\\n# Separating the independent and dependent variables into X and y respectively\\ny = _data[_target]\\nX = _data.drop(columns=_target)\\nprint(f'Shape of complete data: {_data.shape}')\\n\\n# Splitting the dataset into training and testing datasets\\nX_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.3)\\nprint(f'Shape of training data: {X_train.shape}')\\nprint(f'Shape of testing data : {X_test.shape}')\\n\\n# Creating the classifier and fitting it to the training data\\nran_for_clf = RandomForestClassifier()\\ntime_now = get_time()\\nran_for_clf.fit(X_train, y_train);\\nprint(f'Model {ran_for_clf} trained')\\nprint(f'Seconds elapsed: {round(get_time() - time_now, 3)}')\\n\\n# Making predictions on the training data\\npredict_train = ran_for_clf.predict(X_train)\\nprint(f'Predictions on training data made')\\n\\n# Finding the accuracy score of the training predictions\\naccuracy_train = accuracy_score(y_train, predict_train)\\nprint(f'Accuracy score of training predictions: {round(accuracy_train, 3)}')\\n\\n# Printing the classification report of the training predictions\\nreport_train = classification_report(y_train, predict_train, digits=3)\\nprint(f'Classification report of training predictions:')\\nprint(report_train)\\n\\n# Making predictions on the testing data\\npredict_test = ran_for_clf.predict(X_test)\\nprint(f'Predictions on testing data made')\\n\\n# Finding the accuracy score of the testing predictions\\naccuracy_test = accuracy_score(y_test, predict_test)\\nprint(f'Accuracy score of testing predictions: {round(accuracy_test, 3)}')\\n\\n# Printing the classification report of the testing predictions\\nreport_test = classification_report(y_test, predict_test, digits=3)\\nprint(f'Classification report of testing predictions:')\\nprint(report_test)\"],\"cell_type\":\"code\"},{\"outputs\":[],\"metadata\":{\"id\":\"0_0.0517703034233461\"},\"execution_count\":null,\"source\":[\"## **Save Model**\"],\"cell_type\":\"markdown\"},{\"outputs\":[],\"metadata\":{\"id\":\"0_0.16719976162261885\"},\"execution_count\":5,\"source\":[\"from Notebook.DSNotebook.NotebookExecutor import NotebookExecutor\\nnb = NotebookExecutor()\\nsaved_model = nb.save_model(model = ran_for_clf, modelName = 'RandomForest_model', modelType = 'ml', X = X_train, y = y_train, estimator_type='classification')\\n#X and y are training datasets to get explainer dashboard.\\n#estimator_type is to specify algorithm type i.e., classification and regression.\\n#Only 'ml' models with tabular data as input will support in Explainer Dashboard.\\n#Choose modelType = 'ml' for machine learning models, modelType = 'cv' for computer vision models and modelType = 'dp' for data transformation pickle files. \\n#Provide 'column_headers' as a parameter if they have to be saved in the model.\\n#If using custom layer in keras, use native save functionality from keras.\"],\"cell_type\":\"code\"},{\"outputs\":[],\"metadata\":{\"id\":\"0_0.8959979726592404\"},\"execution_count\":null,\"source\":[\"## **Load model**\"],\"cell_type\":\"markdown\"},{\"outputs\":[],\"metadata\":{\"id\":\"0_0.349344562163024\"},\"execution_count\":6,\"source\":[\"from Notebook.DSNotebook.NotebookExecutor import NotebookExecutor\\nnb = NotebookExecutor()\\nloaded_model = nb.load_saved_model('11111736489392348')\"],\"cell_type\":\"code\"},{\"outputs\":[{\"metadata\":{},\"data\":{\"text/plain\":\"<Notebook.DSNotebook.SaveModel.DSModel at 0x7fd135bc53c0>\"},\"output_type\":\"execute_result\",\"execution_count\":8}],\"metadata\":{\"id\":\"0_0.8272570892185795\"},\"execution_count\":7,\"source\":[\"loaded_model\"],\"cell_type\":\"code\"},{\"outputs\":[{\"metadata\":{},\"data\":{\"text/html\":[\"<div>\\n<style scoped>\\n    .dataframe tbody tr th:only-of-type {\\n        vertical-align: middle;\\n    }\\n\\n    .dataframe tbody tr th {\\n        vertical-align: top;\\n    }\\n\\n    .dataframe thead th {\\n        text-align: right;\\n    }\\n<\/style>\\n<table border=\\\"1\\\" class=\\\"dataframe\\\">\\n  <thead>\\n    <tr style=\\\"text-align: right;\\\">\\n      <th><\/th>\\n      <th>UID<\/th>\\n      <th>Product ID<\/th>\\n      <th>Type<\/th>\\n      <th>Air temperature<\/th>\\n      <th>Process temperature<\/th>\\n      <th>Rotational speed<\/th>\\n      <th>Torque<\/th>\\n      <th>Tool wear<\/th>\\n      <th>Target<\/th>\\n    <\/tr>\\n  <\/thead>\\n  <tbody>\\n    <tr>\\n      <th>6436<\/th>\\n      <td>6437<\/td>\\n      <td>4872<\/td>\\n      <td>1<\/td>\\n      <td>300.4<\/td>\\n      <td>310.0<\/td>\\n      <td>1769<\/td>\\n      <td>26.1<\/td>\\n      <td>38<\/td>\\n      <td>0<\/td>\\n    <\/tr>\\n    <tr>\\n      <th>193<\/th>\\n      <td>194<\/td>\\n      <td>24<\/td>\\n      <td>0<\/td>\\n      <td>298.2<\/td>\\n      <td>308.4<\/td>\\n      <td>1678<\/td>\\n      <td>34.6<\/td>\\n      <td>81<\/td>\\n      <td>0<\/td>\\n    <\/tr>\\n    <tr>\\n      <th>1639<\/th>\\n      <td>1640<\/td>\\n      <td>7480<\/td>\\n      <td>2<\/td>\\n      <td>297.9<\/td>\\n      <td>307.8<\/td>\\n      <td>1450<\/td>\\n      <td>43.5<\/td>\\n      <td>106<\/td>\\n      <td>0<\/td>\\n    <\/tr>\\n    <tr>\\n      <th>8908<\/th>\\n      <td>8909<\/td>\\n      <td>6368<\/td>\\n      <td>1<\/td>\\n      <td>297.2<\/td>\\n      <td>308.5<\/td>\\n      <td>1518<\/td>\\n      <td>44.3<\/td>\\n      <td>163<\/td>\\n      <td>0<\/td>\\n    <\/tr>\\n    <tr>\\n      <th>3986<\/th>\\n      <td>3987<\/td>\\n      <td>8196<\/td>\\n      <td>2<\/td>\\n      <td>302.2<\/td>\\n      <td>311.3<\/td>\\n      <td>1577<\/td>\\n      <td>29.8<\/td>\\n      <td>112<\/td>\\n      <td>0<\/td>\\n    <\/tr>\\n    <tr>\\n      <th>...<\/th>\\n      <td>...<\/td>\\n      <td>...<\/td>\\n      <td>...<\/td>\\n      <td>...<\/td>\\n      <td>...<\/td>\\n      <td>...<\/td>\\n      <td>...<\/td>\\n      <td>...<\/td>\\n      <td>...<\/td>\\n    <\/tr>\\n    <tr>\\n      <th>1048<\/th>\\n      <td>1049<\/td>\\n      <td>1635<\/td>\\n      <td>1<\/td>\\n      <td>296.5<\/td>\\n      <td>307.6<\/td>\\n      <td>1607<\/td>\\n      <td>33.5<\/td>\\n      <td>104<\/td>\\n      <td>0<\/td>\\n    <\/tr>\\n    <tr>\\n      <th>5488<\/th>\\n      <td>5489<\/td>\\n      <td>4299<\/td>\\n      <td>1<\/td>\\n      <td>302.7<\/td>\\n      <td>312.2<\/td>\\n      <td>1450<\/td>\\n      <td>52.1<\/td>\\n      <td>213<\/td>\\n      <td>1<\/td>\\n    <\/tr>\\n    <tr>\\n      <th>4070<\/th>\\n      <td>4071<\/td>\\n      <td>3440<\/td>\\n      <td>1<\/td>\\n      <td>302.0<\/td>\\n      <td>310.7<\/td>\\n      <td>1348<\/td>\\n      <td>58.1<\/td>\\n      <td>83<\/td>\\n      <td>0<\/td>\\n    <\/tr>\\n    <tr>\\n      <th>5340<\/th>\\n      <td>5341<\/td>\\n      <td>4208<\/td>\\n      <td>1<\/td>\\n      <td>303.5<\/td>\\n      <td>312.7<\/td>\\n      <td>1393<\/td>\\n      <td>49.3<\/td>\\n      <td>82<\/td>\\n      <td>0<\/td>\\n    <\/tr>\\n    <tr>\\n      <th>5872<\/th>\\n      <td>5873<\/td>\\n      <td>8757<\/td>\\n      <td>2<\/td>\\n      <td>301.5<\/td>\\n      <td>311.0<\/td>\\n      <td>1504<\/td>\\n      <td>42.6<\/td>\\n      <td>109<\/td>\\n      <td>0<\/td>\\n    <\/tr>\\n  <\/tbody>\\n<\/table>\\n<p>3000 rows Ã— 9 columns<\/p>\\n<\/div>\"],\"text/plain\":[\"       UID  Product ID  Type  Air temperature   Process temperature   Rotational speed   Torque   Tool wear   Target\\n6436  6437        4872     1             300.4                 310.0               1769     26.1          38       0\\n193    194          24     0             298.2                 308.4               1678     34.6          81       0\\n1639  1640        7480     2             297.9                 307.8               1450     43.5         106       0\\n8908  8909        6368     1             297.2                 308.5               1518     44.3         163       0\\n3986  3987        8196     2             302.2                 311.3               1577     29.8         112       0\\n...    ...         ...   ...               ...                   ...                ...      ...         ...     ...\\n1048  1049        1635     1             296.5                 307.6               1607     33.5         104       0\\n5488  5489        4299     1             302.7                 312.2               1450     52.1         213       1\\n4070  4071        3440     1             302.0                 310.7               1348     58.1          83       0\\n5340  5341        4208     1             303.5                 312.7               1393     49.3          82       0\\n5872  5873        8757     2             301.5                 311.0               1504     42.6         109       0\\n\\n[3000 rows x 9 columns]\"]},\"output_type\":\"execute_result\",\"execution_count\":9}],\"metadata\":{\"id\":\"0_0.7485735663421662\"},\"execution_count\":8,\"source\":[\"X_test\"],\"cell_type\":\"code\"},{\"outputs\":[],\"metadata\":{\"id\":\"0_0.15066662941485887\"},\"execution_count\":1,\"source\":[\"## **Model inference**\"],\"cell_type\":\"markdown\"},{\"outputs\":[{\"metadata\":{},\"data\":{\"text/html\":[\"<div>\\n<style scoped>\\n    .dataframe tbody tr th:only-of-type {\\n        vertical-align: middle;\\n    }\\n\\n    .dataframe tbody tr th {\\n        vertical-align: top;\\n    }\\n\\n    .dataframe thead th {\\n        text-align: right;\\n    }\\n<\/style>\\n<table border=\\\"1\\\" class=\\\"dataframe\\\">\\n  <thead>\\n    <tr style=\\\"text-align: right;\\\">\\n      <th><\/th>\\n      <th>UID<\/th>\\n      <th>Product ID<\/th>\\n      <th>Type<\/th>\\n      <th>Air temperature<\/th>\\n      <th>Process temperature<\/th>\\n      <th>Rotational speed<\/th>\\n      <th>Torque<\/th>\\n      <th>Tool wear<\/th>\\n      <th>Target<\/th>\\n      <th>predictions<\/th>\\n    <\/tr>\\n  <\/thead>\\n  <tbody>\\n    <tr>\\n      <th>6436<\/th>\\n      <td>6437<\/td>\\n      <td>4872<\/td>\\n      <td>1<\/td>\\n      <td>300.4<\/td>\\n      <td>310.0<\/td>\\n      <td>1769<\/td>\\n      <td>26.1<\/td>\\n      <td>38<\/td>\\n      <td>0<\/td>\\n      <td>1<\/td>\\n    <\/tr>\\n    <tr>\\n      <th>193<\/th>\\n      <td>194<\/td>\\n      <td>24<\/td>\\n      <td>0<\/td>\\n      <td>298.2<\/td>\\n      <td>308.4<\/td>\\n      <td>1678<\/td>\\n      <td>34.6<\/td>\\n      <td>81<\/td>\\n      <td>0<\/td>\\n      <td>1<\/td>\\n    <\/tr>\\n    <tr>\\n      <th>1639<\/th>\\n      <td>1640<\/td>\\n      <td>7480<\/td>\\n      <td>2<\/td>\\n      <td>297.9<\/td>\\n      <td>307.8<\/td>\\n      <td>1450<\/td>\\n      <td>43.5<\/td>\\n      <td>106<\/td>\\n      <td>0<\/td>\\n      <td>1<\/td>\\n    <\/tr>\\n    <tr>\\n      <th>8908<\/th>\\n      <td>8909<\/td>\\n      <td>6368<\/td>\\n      <td>1<\/td>\\n      <td>297.2<\/td>\\n      <td>308.5<\/td>\\n      <td>1518<\/td>\\n      <td>44.3<\/td>\\n      <td>163<\/td>\\n      <td>0<\/td>\\n      <td>1<\/td>\\n    <\/tr>\\n    <tr>\\n      <th>3986<\/th>\\n      <td>3987<\/td>\\n      <td>8196<\/td>\\n      <td>2<\/td>\\n      <td>302.2<\/td>\\n      <td>311.3<\/td>\\n      <td>1577<\/td>\\n      <td>29.8<\/td>\\n      <td>112<\/td>\\n      <td>0<\/td>\\n      <td>1<\/td>\\n    <\/tr>\\n    <tr>\\n      <th>...<\/th>\\n      <td>...<\/td>\\n      <td>...<\/td>\\n      <td>...<\/td>\\n      <td>...<\/td>\\n      <td>...<\/td>\\n      <td>...<\/td>\\n      <td>...<\/td>\\n      <td>...<\/td>\\n      <td>...<\/td>\\n      <td>...<\/td>\\n    <\/tr>\\n    <tr>\\n      <th>1048<\/th>\\n      <td>1049<\/td>\\n      <td>1635<\/td>\\n      <td>1<\/td>\\n      <td>296.5<\/td>\\n      <td>307.6<\/td>\\n      <td>1607<\/td>\\n      <td>33.5<\/td>\\n      <td>104<\/td>\\n      <td>0<\/td>\\n      <td>1<\/td>\\n    <\/tr>\\n    <tr>\\n      <th>5488<\/th>\\n      <td>5489<\/td>\\n      <td>4299<\/td>\\n      <td>1<\/td>\\n      <td>302.7<\/td>\\n      <td>312.2<\/td>\\n      <td>1450<\/td>\\n      <td>52.1<\/td>\\n      <td>213<\/td>\\n      <td>1<\/td>\\n      <td>2<\/td>\\n    <\/tr>\\n    <tr>\\n      <th>4070<\/th>\\n      <td>4071<\/td>\\n      <td>3440<\/td>\\n      <td>1<\/td>\\n      <td>302.0<\/td>\\n      <td>310.7<\/td>\\n      <td>1348<\/td>\\n      <td>58.1<\/td>\\n      <td>83<\/td>\\n      <td>0<\/td>\\n      <td>1<\/td>\\n    <\/tr>\\n    <tr>\\n      <th>5340<\/th>\\n      <td>5341<\/td>\\n      <td>4208<\/td>\\n      <td>1<\/td>\\n      <td>303.5<\/td>\\n      <td>312.7<\/td>\\n      <td>1393<\/td>\\n      <td>49.3<\/td>\\n      <td>82<\/td>\\n      <td>0<\/td>\\n      <td>1<\/td>\\n    <\/tr>\\n    <tr>\\n      <th>5872<\/th>\\n      <td>5873<\/td>\\n      <td>8757<\/td>\\n      <td>2<\/td>\\n      <td>301.5<\/td>\\n      <td>311.0<\/td>\\n      <td>1504<\/td>\\n      <td>42.6<\/td>\\n      <td>109<\/td>\\n      <td>0<\/td>\\n      <td>1<\/td>\\n    <\/tr>\\n  <\/tbody>\\n<\/table>\\n<p>3000 rows Ã— 10 columns<\/p>\\n<\/div>\"],\"text/plain\":[\"       UID  Product ID  Type  Air temperature   Process temperature   Rotational speed   Torque   Tool wear   Target  predictions\\n6436  6437        4872     1             300.4                 310.0               1769     26.1          38       0            1\\n193    194          24     0             298.2                 308.4               1678     34.6          81       0            1\\n1639  1640        7480     2             297.9                 307.8               1450     43.5         106       0            1\\n8908  8909        6368     1             297.2                 308.5               1518     44.3         163       0            1\\n3986  3987        8196     2             302.2                 311.3               1577     29.8         112       0            1\\n...    ...         ...   ...               ...                   ...                ...      ...         ...     ...          ...\\n1048  1049        1635     1             296.5                 307.6               1607     33.5         104       0            1\\n5488  5489        4299     1             302.7                 312.2               1450     52.1         213       1            2\\n4070  4071        3440     1             302.0                 310.7               1348     58.1          83       0            1\\n5340  5341        4208     1             303.5                 312.7               1393     49.3          82       0            1\\n5872  5873        8757     2             301.5                 311.0               1504     42.6         109       0            1\\n\\n[3000 rows x 10 columns]\"]},\"output_type\":\"execute_result\",\"execution_count\":10}],\"metadata\":{\"id\":\"0_0.389122483635856\"},\"execution_count\":9,\"source\":[\"nb.predict(model = loaded_model, dataframe = X_test, modeltype='ml') \\n #Choose modeltype 'ml' for machine learning models and 'cv' for computer vision model \\n #ex: For machine learning model nb.predict(model = model, modeltype = 'ml', dataframe = df) \\n #ex: For computer vision keras model nb.predict(model = model, modeltype = 'cv', imgs = imgs, imgsize = (28, 28), dim = 1, class_names = class_names) \\n #and for pytorch model(model = model, modeltype = 'cv', imgs = imgs, class_names = class_names) \\n #Note: incase any error in prediction user squeezed image data in keras\"],\"cell_type\":\"code\"}],\"nbformat\":4}}","bizvizNotebook":null,"autoMLs":null,"scripts":null,"bizvizNotebooks":null,"notebook":{"mongoQL":null,"updatedBy":524290,"data":"{\"datasets\":[{\"queryservicename\":\"PA_Data\",\"id\":8875827153,\"type\":\"Data Sandbox\",\"uuid\":\"11111722937216409\",\"extenstion\":\"csv\",\"fileType\":\"\",\"dataSourceType\":\"csv\",\"createdDate\":1722937216000,\"isSelected\":true},{\"queryservicename\":\"Limrik_Data\",\"id\":7696167225,\"type\":\"Data Sets\",\"uuid\":\"11111722232241985\",\"dataSourceType\":\"mongo\",\"createdDate\":\"2024-07-29 05:50:41\",\"isSelected\":true}],\"uncheckeddatasets\":[],\"code\":[{\"id\":\"16955299383_0.41219816627637695\",\"conflict\":\"false\",\"code\":\"from Notebook.DSNotebook.NotebookExecutor import NotebookExecutor\\nnb = NotebookExecutor() \\ndf_PA_Data = nb.get_data('11111722937216409', '@SYS.USERID', 'True', {}, [], sheet_name = '')\\ndf_PA_Data        \",\"count\":1,\"mode\":\"preview\",\"type\":\"code\",\"hover\":true,\"interrupt\":false,\"warning\":false,\"outputArray\":[],\"lineNumber\":false,\"laodmodel\":false,\"pre_cell_id\":0,\"is_pre_cell\":false,\"succORerr\":true,\"expand\":false,\"outputexpand\":false,\"readonly\":false,\"markDowns\":false,\"loader\":false,\"image\":\"\",\"error\":\"\",\"result\":\"\",\"algorithms\":\"\",\"semicolon\":\"\",\"cputimes\":\"\",\"showcputime\":false,\"secret\":[]},{\"id\":\"16955299383_0.20273913066326021\",\"conflict\":\"false\",\"code\":\"Testing  purpuse dd\",\"count\":2,\"mode\":\"preview\",\"type\":\"code\",\"hover\":true,\"interrupt\":false,\"warning\":false,\"outputArray\":[],\"lineNumber\":false,\"laodmodel\":false,\"pre_cell_id\":0,\"is_pre_cell\":false,\"succORerr\":true,\"expand\":false,\"outputexpand\":false,\"readonly\":false,\"markDowns\":false,\"loader\":false,\"image\":\"\",\"error\":\"\",\"result\":\"\",\"algorithms\":\"\",\"semicolon\":\"\",\"cputimes\":\"\",\"showcputime\":false,\"secret\":[]},{\"id\":\"16955299383_0.05924745868753356\",\"conflict\":\"false\",\"code\":\"def getFunction():\\n    return \\\"\\\";\",\"count\":3,\"mode\":\"preview\",\"type\":\"code\",\"hover\":true,\"interrupt\":false,\"warning\":false,\"outputArray\":[],\"lineNumber\":false,\"laodmodel\":false,\"pre_cell_id\":0,\"is_pre_cell\":false,\"succORerr\":true,\"expand\":false,\"outputexpand\":false,\"readonly\":false,\"markDowns\":false,\"loader\":false,\"image\":\"\",\"error\":\"\",\"result\":\"\",\"algorithms\":\"\",\"semicolon\":\"\",\"cputimes\":\"\",\"showcputime\":false,\"secret\":[]},{\"id\":\"16955299383_0.9538663026267205\",\"conflict\":\"false\",\"code\":\"from Notebook.DSNotebook.NotebookExecutor import NotebookExecutor\\nnb = NotebookExecutor()\\ndf_Limrik_Data = nb.get_data('11111722232241985', '@SYS.USERID', 'False', {}, [], sheet_name = '')\\ndisplay(df_Limrik_Data)\",\"count\":4,\"mode\":\"preview\",\"type\":\"code\",\"hover\":true,\"interrupt\":false,\"warning\":false,\"outputArray\":[],\"lineNumber\":false,\"laodmodel\":false,\"pre_cell_id\":0,\"is_pre_cell\":false,\"succORerr\":true,\"expand\":false,\"outputexpand\":false,\"readonly\":false,\"markDowns\":false,\"loader\":false,\"image\":\"\",\"error\":\"\",\"result\":\"\",\"algorithms\":\"\",\"semicolon\":\"\",\"cputimes\":\"\",\"showcputime\":false,\"secret\":[]},{\"id\":\"16955299383_0.6342120827809221\",\"conflict\":\"false\",\"code\":\"from Notebook.DSNotebook.NotebookExecutor import NotebookExecutor\\nnb = NotebookExecutor()\\ndf_PA_Data = nb.get_data('11111722937216409', '@SYS.USERID', 'True', {}, [], sheet_name = '')\\ndf_PA_Data\",\"count\":5,\"mode\":\"preview\",\"type\":\"code\",\"hover\":true,\"interrupt\":false,\"warning\":false,\"outputArray\":[],\"lineNumber\":false,\"laodmodel\":false,\"pre_cell_id\":0,\"is_pre_cell\":false,\"succORerr\":true,\"expand\":false,\"outputexpand\":false,\"readonly\":false,\"markDowns\":false,\"loader\":false,\"image\":\"\",\"error\":\"\",\"result\":\"\",\"algorithms\":\"\",\"semicolon\":\"\",\"cputimes\":\"\",\"showcputime\":false,\"secret\":[]},{\"id\":\"16955299383_0.9259649467341657\",\"conflict\":\"false\",\"code\":\"from Notebook.DSNotebook.NotebookExecutor import NotebookExecutor\\nnb = NotebookExecutor()\\ndf_PA_Data = nb.get_data('11111722937216409', '@SYS.USERID', 'True', {}, [], sheet_name = '')\\ndf_PA_Data\",\"count\":6,\"mode\":\"preview\",\"type\":\"code\",\"hover\":true,\"interrupt\":false,\"warning\":false,\"outputArray\":[],\"lineNumber\":false,\"laodmodel\":false,\"pre_cell_id\":0,\"is_pre_cell\":false,\"succORerr\":true,\"expand\":false,\"outputexpand\":false,\"readonly\":false,\"markDowns\":false,\"loader\":false,\"image\":\"\",\"error\":\"\",\"result\":\"\",\"algorithms\":\"\",\"semicolon\":\"\",\"cputimes\":\"\",\"showcputime\":false,\"secret\":[]},{\"id\":\"0_0.48609073815996373\",\"conflict\":\"false\",\"code\":\"from Notebook.DSNotebook.NotebookExecutor import NotebookExecutor\\nnb = NotebookExecutor()\\ndf = nb.get_data('11111722937216409', '@SYS.USERID', 'True', {}, [], sheet_name = '')\\ndf\",\"count\":7,\"mode\":\"preview\",\"type\":\"code\",\"hover\":true,\"interrupt\":false,\"warning\":false,\"outputArray\":[],\"lineNumber\":false,\"laodmodel\":false,\"pre_cell_id\":0,\"is_pre_cell\":false,\"succORerr\":true,\"expand\":false,\"outputexpand\":false,\"readonly\":false,\"markDowns\":false,\"loader\":false,\"image\":\"\",\"error\":\"\",\"result\":\"\",\"algorithms\":\"\",\"semicolon\":\"\",\"cputimes\":\"\",\"showcputime\":false,\"secret\":[]},{\"id\":\"0_0.9636487687681692\",\"conflict\":\"false\",\"code\":\"## **Analyze data**\",\"count\":8,\"mode\":\"preview\",\"type\":\"markdown\",\"hover\":true,\"interrupt\":false,\"warning\":false,\"outputArray\":[],\"lineNumber\":false,\"laodmodel\":false,\"pre_cell_id\":0,\"is_pre_cell\":false,\"succORerr\":true,\"expand\":false,\"outputexpand\":false,\"readonly\":false,\"markDowns\":false,\"loader\":false,\"image\":\"\",\"error\":\"\",\"algorithms\":\"\",\"semicolon\":\"\",\"cputimes\":\"\",\"showcputime\":false,\"secret\":[],\"markdownCollapse\":{\"index\":0,\"isExpand\":false,\"hiddenCell\":[],\"tag\":2},\"result\":\"\"},{\"id\":\"0_0.7690709001041043\",\"conflict\":\"false\",\"code\":\"df.info()\",\"count\":9,\"mode\":\"preview\",\"type\":\"code\",\"hover\":true,\"interrupt\":false,\"warning\":false,\"outputArray\":[],\"lineNumber\":false,\"laodmodel\":false,\"pre_cell_id\":0,\"is_pre_cell\":false,\"succORerr\":true,\"expand\":false,\"outputexpand\":false,\"readonly\":false,\"markDowns\":false,\"loader\":false,\"image\":\"\",\"error\":\"\",\"result\":\"\",\"algorithms\":\"\",\"semicolon\":\"\",\"cputimes\":\"\",\"showcputime\":false,\"secret\":[]},{\"id\":\"0_0.1956408025105676\",\"conflict\":\"false\",\"code\":\"df.describe()\",\"count\":10,\"mode\":\"preview\",\"type\":\"code\",\"hover\":true,\"interrupt\":false,\"warning\":false,\"outputArray\":[],\"lineNumber\":false,\"laodmodel\":false,\"pre_cell_id\":0,\"is_pre_cell\":false,\"succORerr\":true,\"expand\":false,\"outputexpand\":false,\"readonly\":false,\"markDowns\":false,\"loader\":false,\"image\":\"\",\"error\":\"\",\"result\":\"\",\"algorithms\":\"\",\"semicolon\":\"\",\"cputimes\":\"\",\"showcputime\":false,\"secret\":[]},{\"id\":\"0_0.5526815036003192\",\"conflict\":\"false\",\"code\":\"## **Encode data**\",\"count\":11,\"mode\":\"preview\",\"type\":\"markdown\",\"hover\":true,\"interrupt\":false,\"warning\":false,\"outputArray\":[],\"lineNumber\":false,\"laodmodel\":false,\"pre_cell_id\":0,\"is_pre_cell\":false,\"succORerr\":true,\"expand\":false,\"outputexpand\":false,\"readonly\":false,\"markDowns\":false,\"loader\":false,\"image\":\"\",\"error\":\"\",\"algorithms\":\"\",\"semicolon\":\"\",\"cputimes\":\"\",\"showcputime\":false,\"secret\":[],\"markdownCollapse\":{\"index\":1,\"isExpand\":false,\"hiddenCell\":[],\"tag\":2},\"result\":\"\"},{\"id\":\"0_0.018331495972319534\",\"conflict\":\"false\",\"code\":\"import pandas as pd\\nfrom sklearn.preprocessing import LabelEncoder\\n\\ndf_data = df.copy()\\n\\n#Encoding the string and date column values for model training.\\nlabel_encoder = LabelEncoder()\\nfor column in df_data.select_dtypes(include=['object']).columns:\\n    df_data[column] = label_encoder.fit_transform(df_data[column]);\\n# df_out = df_data.drop(\\\"time_difference\\\", axis=1)\\ndf_data\",\"count\":12,\"mode\":\"preview\",\"type\":\"code\",\"hover\":true,\"interrupt\":false,\"warning\":false,\"outputArray\":[],\"lineNumber\":false,\"laodmodel\":false,\"pre_cell_id\":0,\"is_pre_cell\":false,\"succORerr\":true,\"expand\":false,\"outputexpand\":false,\"readonly\":false,\"markDowns\":false,\"loader\":false,\"image\":\"\",\"error\":\"\",\"result\":\"\",\"algorithms\":\"\",\"semicolon\":\"\",\"cputimes\":\"\",\"showcputime\":false,\"secret\":[]},{\"id\":\"0_0.6280640554711936\",\"conflict\":\"false\",\"code\":\"## **Fit and train a Random Forest classification model**\",\"count\":13,\"mode\":\"preview\",\"type\":\"markdown\",\"hover\":true,\"interrupt\":false,\"warning\":false,\"outputArray\":[],\"lineNumber\":false,\"laodmodel\":false,\"pre_cell_id\":0,\"is_pre_cell\":false,\"succORerr\":true,\"expand\":false,\"outputexpand\":false,\"readonly\":false,\"markDowns\":false,\"loader\":false,\"image\":\"\",\"error\":\"\",\"algorithms\":\"\",\"semicolon\":\"\",\"cputimes\":\"\",\"showcputime\":false,\"secret\":[],\"markdownCollapse\":{\"index\":2,\"isExpand\":false,\"hiddenCell\":[],\"tag\":2},\"result\":\"\"},{\"id\":\"0_0.3965725609960251\",\"conflict\":\"false\",\"code\":\"import pandas as pd\\nfrom time import perf_counter as get_time\\nfrom sklearn.model_selection import train_test_split\\nfrom sklearn.ensemble import RandomForestClassifier\\nfrom sklearn.metrics import accuracy_score, classification_report\\n\\n# Define the necessary variables here\\n_data   = df_data    # pd.DataFrame: Full data to process\\n_target = 'Failure Type'    # string: Column name of the target variable\\n\\nif _data is None or _target is None:\\n    raise Exception(f'Both _data and _target must be specified')\\nelif not (isinstance(_data, pd.DataFrame) and isinstance(_target, str)):\\n    raise Exception(f'Datatype of _data must be pd.DataFrame; that of _target must be str')\\n\\n# Separating the independent and dependent variables into X and y respectively\\ny = _data[_target]\\nX = _data.drop(columns=_target)\\nprint(f'Shape of complete data: {_data.shape}')\\n\\n# Splitting the dataset into training and testing datasets\\nX_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.3)\\nprint(f'Shape of training data: {X_train.shape}')\\nprint(f'Shape of testing data : {X_test.shape}')\\n\\n# Creating the classifier and fitting it to the training data\\nran_for_clf = RandomForestClassifier()\\ntime_now = get_time()\\nran_for_clf.fit(X_train, y_train);\\nprint(f'Model {ran_for_clf} trained')\\nprint(f'Seconds elapsed: {round(get_time() - time_now, 3)}')\\n\\n# Making predictions on the training data\\npredict_train = ran_for_clf.predict(X_train)\\nprint(f'Predictions on training data made')\\n\\n# Finding the accuracy score of the training predictions\\naccuracy_train = accuracy_score(y_train, predict_train)\\nprint(f'Accuracy score of training predictions: {round(accuracy_train, 3)}')\\n\\n# Printing the classification report of the training predictions\\nreport_train = classification_report(y_train, predict_train, digits=3)\\nprint(f'Classification report of training predictions:')\\nprint(report_train)\\n\\n# Making predictions on the testing data\\npredict_test = ran_for_clf.predict(X_test)\\nprint(f'Predictions on testing data made')\\n\\n# Finding the accuracy score of the testing predictions\\naccuracy_test = accuracy_score(y_test, predict_test)\\nprint(f'Accuracy score of testing predictions: {round(accuracy_test, 3)}')\\n\\n# Printing the classification report of the testing predictions\\nreport_test = classification_report(y_test, predict_test, digits=3)\\nprint(f'Classification report of testing predictions:')\\nprint(report_test)\",\"count\":14,\"mode\":\"preview\",\"type\":\"code\",\"hover\":true,\"interrupt\":false,\"warning\":false,\"outputArray\":[],\"lineNumber\":false,\"laodmodel\":false,\"pre_cell_id\":0,\"is_pre_cell\":false,\"succORerr\":true,\"expand\":false,\"outputexpand\":false,\"readonly\":false,\"markDowns\":false,\"loader\":false,\"image\":\"\",\"error\":\"\",\"result\":\"\",\"algorithms\":\"\",\"semicolon\":\"\",\"cputimes\":\"\",\"showcputime\":false,\"secret\":[]},{\"id\":\"0_0.0517703034233461\",\"conflict\":\"false\",\"code\":\"## **Save Model**\",\"count\":15,\"mode\":\"preview\",\"type\":\"markdown\",\"hover\":true,\"interrupt\":false,\"warning\":false,\"outputArray\":[],\"lineNumber\":false,\"laodmodel\":false,\"pre_cell_id\":0,\"is_pre_cell\":false,\"succORerr\":true,\"expand\":false,\"outputexpand\":false,\"readonly\":false,\"markDowns\":false,\"loader\":false,\"image\":\"\",\"error\":\"\",\"algorithms\":\"\",\"semicolon\":\"\",\"cputimes\":\"\",\"showcputime\":false,\"secret\":[],\"markdownCollapse\":{\"index\":3,\"isExpand\":false,\"hiddenCell\":[],\"tag\":2},\"result\":\"\"},{\"id\":\"0_0.16719976162261885\",\"conflict\":\"false\",\"code\":\"from Notebook.DSNotebook.NotebookExecutor import NotebookExecutor\\nnb = NotebookExecutor()\\nsaved_model = nb.save_model(model = ran_for_clf, modelName = 'RandomForest_model', modelType = 'ml', X = X_train, y = y_train, estimator_type='classification')\\n#X and y are training datasets to get explainer dashboard.\\n#estimator_type is to specify algorithm type i.e., classification and regression.\\n#Only 'ml' models with tabular data as input will support in Explainer Dashboard.\\n#Choose modelType = 'ml' for machine learning models, modelType = 'cv' for computer vision models and modelType = 'dp' for data transformation pickle files. \\n#Provide 'column_headers' as a parameter if they have to be saved in the model.\\n#If using custom layer in keras, use native save functionality from keras.\",\"count\":16,\"mode\":\"preview\",\"type\":\"code\",\"hover\":true,\"interrupt\":false,\"warning\":false,\"outputArray\":[],\"lineNumber\":false,\"laodmodel\":false,\"pre_cell_id\":0,\"is_pre_cell\":false,\"succORerr\":true,\"expand\":false,\"outputexpand\":false,\"readonly\":false,\"markDowns\":false,\"loader\":false,\"image\":\"\",\"error\":\"\",\"result\":\"\",\"algorithms\":\"\",\"semicolon\":\"\",\"cputimes\":\"\",\"showcputime\":false,\"secret\":[]},{\"id\":\"0_0.8959979726592404\",\"conflict\":\"false\",\"code\":\"## **Load model**\",\"count\":17,\"mode\":\"preview\",\"type\":\"markdown\",\"hover\":true,\"interrupt\":false,\"warning\":false,\"outputArray\":[],\"lineNumber\":false,\"laodmodel\":false,\"pre_cell_id\":0,\"is_pre_cell\":false,\"succORerr\":true,\"expand\":false,\"outputexpand\":false,\"readonly\":false,\"markDowns\":false,\"loader\":false,\"image\":\"\",\"error\":\"\",\"algorithms\":\"\",\"semicolon\":\"\",\"cputimes\":\"\",\"showcputime\":false,\"secret\":[],\"markdownCollapse\":{\"index\":4,\"isExpand\":false,\"hiddenCell\":[],\"tag\":2},\"result\":\"\"},{\"id\":\"0_0.349344562163024\",\"conflict\":\"false\",\"code\":\"from Notebook.DSNotebook.NotebookExecutor import NotebookExecutor\\nnb = NotebookExecutor()\\nloaded_model = nb.load_saved_model('11111736489392348')\",\"count\":18,\"mode\":\"preview\",\"type\":\"code\",\"hover\":true,\"interrupt\":false,\"warning\":false,\"outputArray\":[],\"lineNumber\":false,\"laodmodel\":false,\"pre_cell_id\":0,\"is_pre_cell\":false,\"succORerr\":true,\"expand\":false,\"outputexpand\":false,\"readonly\":false,\"markDowns\":false,\"loader\":false,\"image\":\"\",\"error\":\"\",\"result\":\"\",\"algorithms\":\"\",\"semicolon\":\"\",\"cputimes\":\"\",\"showcputime\":false,\"secret\":[]},{\"id\":\"0_0.8272570892185795\",\"conflict\":\"false\",\"code\":\"loaded_model\",\"count\":19,\"mode\":\"preview\",\"type\":\"code\",\"hover\":true,\"interrupt\":false,\"warning\":false,\"outputArray\":[],\"lineNumber\":false,\"laodmodel\":false,\"pre_cell_id\":0,\"is_pre_cell\":false,\"succORerr\":true,\"expand\":false,\"outputexpand\":false,\"readonly\":false,\"markDowns\":false,\"loader\":false,\"image\":\"\",\"error\":\"\",\"result\":\"\",\"algorithms\":\"\",\"semicolon\":\"\",\"cputimes\":\"\",\"showcputime\":false,\"secret\":[]},{\"id\":\"0_0.7485735663421662\",\"conflict\":\"false\",\"code\":\"X_test\",\"count\":20,\"mode\":\"preview\",\"type\":\"code\",\"hover\":true,\"interrupt\":false,\"warning\":false,\"outputArray\":[],\"lineNumber\":false,\"laodmodel\":false,\"pre_cell_id\":0,\"is_pre_cell\":false,\"succORerr\":true,\"expand\":false,\"outputexpand\":false,\"readonly\":false,\"markDowns\":false,\"loader\":false,\"image\":\"\",\"error\":\"\",\"result\":\"\",\"algorithms\":\"\",\"semicolon\":\"\",\"cputimes\":\"\",\"showcputime\":false,\"secret\":[]},{\"id\":\"0_0.15066662941485887\",\"conflict\":\"false\",\"code\":\"## **Model inference**\",\"count\":21,\"mode\":\"preview\",\"type\":\"markdown\",\"hover\":true,\"interrupt\":false,\"warning\":false,\"outputArray\":[],\"lineNumber\":false,\"laodmodel\":false,\"pre_cell_id\":0,\"is_pre_cell\":false,\"succORerr\":true,\"expand\":false,\"outputexpand\":false,\"readonly\":false,\"markDowns\":false,\"loader\":false,\"image\":\"\",\"error\":\"\",\"algorithms\":\"\",\"semicolon\":\"\",\"cputimes\":\"\",\"showcputime\":false,\"secret\":[],\"markdownCollapse\":{\"index\":5,\"isExpand\":false,\"hiddenCell\":[],\"tag\":2},\"result\":\"\"},{\"id\":\"0_0.389122483635856\",\"conflict\":\"false\",\"code\":\"nb.predict(model = loaded_model, dataframe = X_test, modeltype='ml') \\n #Choose modeltype 'ml' for machine learning models and 'cv' for computer vision model \\n #ex: For machine learning model nb.predict(model = model, modeltype = 'ml', dataframe = df) \\n #ex: For computer vision keras model nb.predict(model = model, modeltype = 'cv', imgs = imgs, imgsize = (28, 28), dim = 1, class_names = class_names) \\n #and for pytorch model(model = model, modeltype = 'cv', imgs = imgs, class_names = class_names) \\n #Note: incase any error in prediction user squeezed image data in keras\",\"count\":22,\"mode\":\"preview\",\"type\":\"code\",\"hover\":true,\"interrupt\":false,\"warning\":false,\"outputArray\":[],\"lineNumber\":false,\"laodmodel\":false,\"pre_cell_id\":0,\"is_pre_cell\":false,\"succORerr\":true,\"expand\":false,\"outputexpand\":false,\"readonly\":false,\"markDowns\":false,\"loader\":false,\"image\":\"\",\"error\":\"\",\"result\":\"\",\"algorithms\":\"\",\"semicolon\":\"\",\"cputimes\":\"\",\"showcputime\":false,\"secret\":[]}],\"kernalID\":\"4c9ae192-652c-4906-8d3b-a6b10679dd37\",\"Algorithms\":[],\"isScheduled\":0,\"last_modified_date\":\"\"}","isImported":0,"workSpaceKey":"","customComponentscript":"","description":"","lastcommittedDate":1736489245259,"isScheduled":null,"committedBy":524290,"type":1,"uuid":"11111736489245265","loggedUserId":null,"spaceKey":"1111","migrationId":null,"path":"","lastUpdatedDate":1740742526734,"createdDate":1736489245259,"createdBy":524290,"notebookName":"RFW","id":16955299383,"projectId":15455307350,"isShared":null,"status":1}}