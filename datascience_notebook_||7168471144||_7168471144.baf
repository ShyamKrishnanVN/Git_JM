{"featureSet":null,"errorCode":null,"notebookModels":null,"tools":null,"notebookModel":null,"knowledgeBase":null,"stackTrace":null,"autoMLs":null,"scripts":null,"notebook":{"mongoQL":null,"updatedBy":7485778619,"data":"{\"datasets\":[],\"uncheckeddatasets\":[],\"code\":[{\"id\":\"0_0.6544248185684435\",\"conflict\":\"false\",\"code\":\"def pythn():\\n    from Notebook.DSNotebook.NotebookExecutor import NotebookExecutor\\n    nb = NotebookExecutor()\\n    df_new = nb.get_data('11561747821223595', '@SYS.USERID', 'False', {}, [], sheet_name = '')\\n    return df_new\\n\",\"count\":1,\"mode\":\"preview\",\"type\":\"code\",\"hover\":true,\"interrupt\":false,\"warning\":false,\"outputArray\":[],\"lineNumber\":false,\"laodmodel\":false,\"pre_cell_id\":0,\"is_pre_cell\":false,\"succORerr\":true,\"expand\":false,\"outputexpand\":false,\"readonly\":false,\"markDowns\":false,\"loader\":false,\"image\":\"\",\"error\":\"\",\"result\":\"\",\"algorithms\":\"\",\"semicolon\":\"\",\"cputimes\":\"\",\"showcputime\":false,\"secret\":[]},{\"id\":\"7168471144_0.7401917259643442\",\"conflict\":\"false\",\"code\":\"def pythn():\\n    from Notebook.DSNotebook.NotebookExecutor import NotebookExecutor\\n    import pandas as pd \\n\\n    # Fetch the data\\n    nb = NotebookExecutor()\\n    df_new = nb.get_data('11561747821223595', '@SYS.USERID', 'False', {}, [], sheet_name='')\\n\\n    # Handle null values\\n    # Strategy: Fill numerical columns with mean, categorical with mode\\n    for col in df_new.columns:\\n        if df_new[col].dtype in ['float64', 'int64']:\\n            df_new[col].fillna(df_new[col].mean(), inplace=True)\\n        else:\\n            df_new[col].fillna(df_new[col].mode().iloc[0] if not df_new[col].mode().empty else '', inplace=True)\\n\\n    # Convert data types and handle invalid types  \\n    for col in df_new.columns:\\n        try:\\n            # Attempt numeric conversion, errors='coerce' will turn invalid strings to NaN\\n            df_new[col] = pd.to_numeric(df_new[col], errors='coerce')\\n        except:\\n            try:\\n                # Try converting to datetime if numeric fails\\n                df_new[col] = pd.to_datetime(df_new[col], errors='coerce')\\n            except:\\n                # Leave as is if neither conversion applies\\n                pass\\n\\n    # Re-handle any NaNs from coercion\\n    for col in df_new.columns:\\n        if df_new[col].dtype in ['float64', 'int64']:\\n            df_new[col].fillna(df_new[col].mean(), inplace=True)\\n        elif pd.api.types.is_datetime64_any_dtype(df_new[col]):\\n            df_new[col].fillna(pd.Timestamp(\\\"1970-01-01\\\"), inplace=True)\\n        else:\\n            df_new[col].fillna(df_new[col].mode().iloc[0] if not df_new[col].mode().empty else '', inplace=True)\\n\\n    return df_new\\n\",\"count\":2,\"mode\":\"preview\",\"type\":\"code\",\"hover\":true,\"interrupt\":false,\"warning\":false,\"outputArray\":[],\"lineNumber\":false,\"laodmodel\":false,\"pre_cell_id\":0,\"is_pre_cell\":false,\"succORerr\":true,\"expand\":false,\"outputexpand\":false,\"readonly\":false,\"markDowns\":false,\"loader\":false,\"image\":\"\",\"error\":\"\",\"result\":\"\",\"algorithms\":\"\",\"semicolon\":\"\",\"cputimes\":\"\",\"showcputime\":false,\"secret\":[]},{\"id\":\"7168471144_0.9391005179132843\",\"conflict\":\"false\",\"code\":\"pythn()\",\"count\":3,\"mode\":\"preview\",\"type\":\"code\",\"hover\":true,\"interrupt\":false,\"warning\":false,\"outputArray\":[{\"usd_billing\":2000,\"expected_joining_date\":\"2018-02-16\",\"gender\":\"NaN\",\"previous_ctc\":500000,\"source\":\"NaN\",\"team\":\"NaN\",\"experience\":3,\"candidate_id\":9,\"skills\":\"NaN\",\"expyrsper_ctc\":260000,\"monthly_salary\":43333,\"cur_monthly_payment\":0,\"previous_organisation\":\"NaN\",\"name\":\"NaN\",\"current_status\":\"NaN\",\"id\":\"NaN\",\"offered_ctc\":520000,\"designation\":\"NaN\",\"referral_of\":\"NaN\",\"joining_status\":\"NaN\"},{\"usd_billing\":3860,\"expected_joining_date\":\"2018-04-21\",\"gender\":\"NaN\",\"previous_ctc\":380000,\"source\":\"NaN\",\"team\":\"NaN\",\"experience\":3,\"candidate_id\":10,\"skills\":\"NaN\",\"expyrsper_ctc\":325000,\"monthly_salary\":54167,\"cur_monthly_payment\":0,\"previous_organisation\":\"NaN\",\"name\":\"NaN\",\"current_status\":\"NaN\",\"id\":\"NaN\",\"offered_ctc\":650000,\"designation\":\"NaN\",\"referral_of\":\"NaN\",\"joining_status\":\"NaN\"},{\"usd_billing\":10,\"expected_joining_date\":0,\"gender\":\"NaN\",\"previous_ctc\":0,\"source\":\"NaN\",\"team\":\"NaN\",\"experience\":10,\"candidate_id\":20,\"skills\":\"NaN\",\"expyrsper_ctc\":0,\"monthly_salary\":0,\"cur_monthly_payment\":0,\"previous_organisation\":\"NaN\",\"name\":\"NaN\",\"current_status\":\"NaN\",\"id\":\"NaN\",\"offered_ctc\":0,\"designation\":\"NaN\",\"referral_of\":\"NaN\",\"joining_status\":\"NaN\"},{\"usd_billing\":1000,\"expected_joining_date\":\"2018-11-12\",\"gender\":\"NaN\",\"previous_ctc\":730000,\"source\":\"NaN\",\"team\":\"NaN\",\"experience\":3,\"candidate_id\":6,\"skills\":\"NaN\",\"expyrsper_ctc\":233333,\"monthly_salary\":81667,\"cur_monthly_payment\":0,\"previous_organisation\":\"NaN\",\"name\":\"NaN\",\"current_status\":\"NaN\",\"id\":\"NaN\",\"offered_ctc\":980000,\"designation\":\"NaN\",\"referral_of\":\"NaN\",\"joining_status\":\"NaN\"},{\"usd_billing\":2310,\"expected_joining_date\":\"2018-04-14\",\"gender\":\"NaN\",\"previous_ctc\":510000,\"source\":\"NaN\",\"team\":\"NaN\",\"experience\":4,\"candidate_id\":7,\"skills\":\"NaN\",\"expyrsper_ctc\":216667,\"monthly_salary\":54167,\"cur_monthly_payment\":0,\"previous_organisation\":\"NaN\",\"name\":\"NaN\",\"current_status\":\"NaN\",\"id\":\"NaN\",\"offered_ctc\":650000,\"designation\":\"NaN\",\"referral_of\":\"NaN\",\"joining_status\":\"NaN\"},{\"usd_billing\":21120,\"expected_joining_date\":\"2018-08-19\",\"gender\":\"NaN\",\"previous_ctc\":650000,\"source\":\"NaN\",\"team\":\"NaN\",\"experience\":2,\"candidate_id\":8,\"skills\":\"NaN\",\"expyrsper_ctc\":281667,\"monthly_salary\":70417,\"cur_monthly_payment\":0,\"previous_organisation\":\"NaN\",\"name\":\"NaN\",\"current_status\":\"NaN\",\"id\":\"NaN\",\"offered_ctc\":845000,\"designation\":\"NaN\",\"referral_of\":\"NaN\",\"joining_status\":\"NaN\"},{\"usd_billing\":4000,\"expected_joining_date\":\"2018-07-02\",\"gender\":\"NaN\",\"previous_ctc\":2000000,\"source\":\"NaN\",\"team\":\"NaN\",\"experience\":15,\"candidate_id\":1,\"skills\":\"NaN\",\"expyrsper_ctc\":120000,\"monthly_salary\":150000,\"cur_monthly_payment\":125000,\"previous_organisation\":\"NaN\",\"name\":\"NaN\",\"current_status\":\"NaN\",\"id\":\"NaN\",\"offered_ctc\":1800000,\"designation\":\"NaN\",\"referral_of\":\"NaN\",\"joining_status\":\"NaN\"},{\"usd_billing\":4000,\"expected_joining_date\":\"2018-08-01\",\"gender\":\"NaN\",\"previous_ctc\":2000000,\"source\":\"NaN\",\"team\":\"NaN\",\"experience\":10,\"candidate_id\":2,\"skills\":\"NaN\",\"expyrsper_ctc\":150000,\"monthly_salary\":125000,\"cur_monthly_payment\":125000,\"previous_organisation\":\"NaN\",\"name\":\"NaN\",\"current_status\":\"NaN\",\"id\":\"NaN\",\"offered_ctc\":1500000,\"designation\":\"NaN\",\"referral_of\":\"NaN\",\"joining_status\":\"NaN\"},{\"usd_billing\":2600,\"expected_joining_date\":\"2018-02-02\",\"gender\":\"NaN\",\"previous_ctc\":650000,\"source\":\"NaN\",\"team\":\"NaN\",\"experience\":4,\"candidate_id\":3,\"skills\":\"NaN\",\"expyrsper_ctc\":256000,\"monthly_salary\":85333,\"cur_monthly_payment\":85333,\"previous_organisation\":\"NaN\",\"name\":\"NaN\",\"current_status\":\"NaN\",\"id\":\"NaN\",\"offered_ctc\":1024000,\"designation\":\"NaN\",\"referral_of\":\"NaN\",\"joining_status\":\"NaN\"},{\"usd_billing\":2300,\"expected_joining_date\":\"2018-09-11\",\"gender\":\"NaN\",\"previous_ctc\":580000,\"source\":\"NaN\",\"team\":\"NaN\",\"experience\":5,\"candidate_id\":4,\"skills\":\"NaN\",\"expyrsper_ctc\":130000,\"monthly_salary\":54167,\"cur_monthly_payment\":52000,\"previous_organisation\":\"NaN\",\"name\":\"NaN\",\"current_status\":\"NaN\",\"id\":\"NaN\",\"offered_ctc\":650000,\"designation\":\"NaN\",\"referral_of\":\"NaN\",\"joining_status\":\"NaN\"},{\"usd_billing\":1750,\"expected_joining_date\":\"2018-05-22\",\"gender\":\"NaN\",\"previous_ctc\":500000,\"source\":\"NaN\",\"team\":\"NaN\",\"experience\":4,\"candidate_id\":5,\"skills\":\"NaN\",\"expyrsper_ctc\":208000,\"monthly_salary\":43333,\"cur_monthly_payment\":43333,\"previous_organisation\":\"NaN\",\"name\":\"NaN\",\"current_status\":\"NaN\",\"id\":\"NaN\",\"offered_ctc\":520000,\"designation\":\"NaN\",\"referral_of\":\"NaN\",\"joining_status\":\"NaN\"}],\"lineNumber\":false,\"laodmodel\":false,\"pre_cell_id\":0,\"is_pre_cell\":false,\"succORerr\":true,\"expand\":false,\"outputexpand\":false,\"readonly\":false,\"markDowns\":false,\"loader\":false,\"image\":\"\",\"error\":\"\",\"result\":\"\",\"algorithms\":\"\",\"semicolon\":\"\",\"cputimes\":\"\",\"showcputime\":false,\"secret\":[]},{\"id\":\"7168471144_0.805106313101086\",\"conflict\":\"false\",\"code\":\"from Notebook.DSNotebook.NotebookExecutor import NotebookExecutor\\nnb = NotebookExecutor()\\n#File extension should be with .csv/.json/.txt\\nnb.save_artifact(dataframe = pythn(), name = 'clean.csv')\",\"count\":4,\"mode\":\"preview\",\"type\":\"code\",\"hover\":true,\"interrupt\":false,\"warning\":false,\"outputArray\":[],\"lineNumber\":false,\"laodmodel\":false,\"pre_cell_id\":0,\"is_pre_cell\":false,\"succORerr\":false,\"expand\":false,\"outputexpand\":false,\"readonly\":false,\"markDowns\":false,\"loader\":false,\"image\":\"\",\"result\":\"\",\"error\":\"\",\"algorithms\":\"\",\"semicolon\":\"\",\"cputimes\":\"\",\"showcputime\":false,\"secret\":[]},{\"id\":\"7168471144_0.8307717802653407\",\"conflict\":\"false\",\"code\":\"a=\\\"new\\\"\",\"count\":5,\"mode\":\"preview\",\"type\":\"code\",\"hover\":true,\"interrupt\":false,\"warning\":false,\"outputArray\":[],\"lineNumber\":false,\"laodmodel\":false,\"pre_cell_id\":0,\"is_pre_cell\":false,\"succORerr\":true,\"expand\":false,\"outputexpand\":false,\"readonly\":false,\"markDowns\":false,\"loader\":false,\"image\":\"\",\"error\":\"\",\"result\":\"\",\"algorithms\":\"\",\"semicolon\":\"\",\"cputimes\":\"\",\"showcputime\":false,\"secret\":[]},{\"id\":\"7168471144_0.10893886586011259\",\"conflict\":\"false\",\"code\":\"dataframe\",\"count\":6,\"mode\":\"preview\",\"type\":\"code\",\"hover\":true,\"interrupt\":false,\"warning\":false,\"outputArray\":[],\"lineNumber\":false,\"laodmodel\":false,\"pre_cell_id\":0,\"is_pre_cell\":false,\"succORerr\":false,\"expand\":false,\"outputexpand\":false,\"readonly\":false,\"markDowns\":false,\"loader\":false,\"image\":\"\",\"result\":\"\",\"error\":\"\",\"algorithms\":\"\",\"semicolon\":\"\",\"cputimes\":\"\",\"showcputime\":false,\"secret\":[]},{\"id\":\"7168471144_0.6908357820104982\",\"conflict\":\"false\",\"code\":\"!!pip install prettytable\",\"count\":7,\"mode\":\"preview\",\"type\":\"code\",\"hover\":true,\"interrupt\":false,\"warning\":false,\"outputArray\":[],\"lineNumber\":false,\"laodmodel\":false,\"pre_cell_id\":0,\"is_pre_cell\":false,\"succORerr\":true,\"expand\":false,\"outputexpand\":false,\"readonly\":false,\"markDowns\":false,\"loader\":false,\"image\":\"\",\"error\":\"\",\"result\":\"\",\"algorithms\":\"\",\"semicolon\":\"\",\"cputimes\":\"\",\"showcputime\":false,\"secret\":[]},{\"id\":\"7168471144_0.04338819120303283\",\"conflict\":\"false\",\"code\":\"from prettytable import PrettyTable\\n\\ntable = PrettyTable()\\ntable.field_names = [\\\"ID\\\", \\\"Actual\\\", \\\"Predicted\\\"]\\n\\nrows = [\\n    [1, \\\"cat\\\", \\\"cat\\\"],\\n    [2, \\\"dog\\\", \\\"cat\\\"],\\n    [3, \\\"cat\\\", \\\"cat\\\"],\\n    [4, \\\"dog\\\", \\\"dog\\\"]\\n]\\n\\nfor row in rows:\\n    table.add_row(row)\\n\\nprint(table)\\n\",\"count\":14,\"mode\":\"preview\",\"type\":\"code\",\"hover\":true,\"interrupt\":false,\"warning\":false,\"outputArray\":\"\",\"lineNumber\":false,\"laodmodel\":false,\"pre_cell_id\":0,\"is_pre_cell\":false,\"succORerr\":true,\"expand\":false,\"outputexpand\":false,\"readonly\":false,\"markDowns\":false,\"loader\":false,\"image\":\"\",\"error\":\"\",\"result\":\"\",\"algorithms\":\"\",\"semicolon\":\"\",\"cputimes\":\"\",\"showcputime\":true,\"secret\":[],\"widget\":false,\"executionTime\":\"0.07\"},{\"id\":\"7168471144_0.16631809143877696\",\"conflict\":\"false\",\"code\":\"!!pip install rich\",\"count\":9,\"mode\":\"preview\",\"type\":\"code\",\"hover\":true,\"interrupt\":false,\"warning\":false,\"outputArray\":[],\"lineNumber\":false,\"laodmodel\":false,\"pre_cell_id\":0,\"is_pre_cell\":false,\"succORerr\":true,\"expand\":false,\"outputexpand\":false,\"readonly\":false,\"markDowns\":false,\"loader\":false,\"image\":\"\",\"error\":\"\",\"result\":\"\",\"algorithms\":\"\",\"semicolon\":\"\",\"cputimes\":\"\",\"showcputime\":false,\"secret\":[]},{\"id\":\"7168471144_0.632440714017554\",\"conflict\":\"false\",\"code\":\"from rich.console import Console\\nfrom rich.table import Table\\nfrom rich import box\\n\\nconsole = Console()\\n\\n# Sample data\\ndata = [\\n    [1, \\\"cat\\\", \\\"cat\\\"],\\n    [2, \\\"dog\\\", \\\"cat\\\"],\\n    [3, \\\"cat\\\", \\\"cat\\\"],\\n    [4, \\\"dog\\\", \\\"dog\\\"]\\n]\\n\\n# Create a table\\ntable = Table(title=\\\"ML Predictions\\\", box=box.SIMPLE_HEAD)\\n\\ntable.add_column(\\\"ID\\\", justify=\\\"center\\\")\\ntable.add_column(\\\"Actual\\\", justify=\\\"center\\\")\\ntable.add_column(\\\"Predicted\\\", justify=\\\"center\\\")\\n\\n# Add rows with color based on correctness\\nfor row in data:\\n    idx, actual, predicted = row\\n    if actual == predicted:\\n        predicted_cell = f\\\"[green]{predicted}[/green]\\\"\\n    else:\\n        predicted_cell = f\\\"[red]{predicted}[/red]\\\"\\n    \\n    table.add_row(str(idx), actual, predicted_cell)\\n\\nconsole.print(table)\\n\",\"count\":19,\"mode\":\"preview\",\"type\":\"code\",\"hover\":true,\"interrupt\":false,\"warning\":false,\"outputArray\":\"\",\"lineNumber\":false,\"laodmodel\":false,\"pre_cell_id\":0,\"is_pre_cell\":false,\"succORerr\":true,\"expand\":false,\"outputexpand\":false,\"readonly\":false,\"markDowns\":false,\"loader\":false,\"image\":\"\",\"error\":\"\",\"result\":\"\",\"algorithms\":\"\",\"semicolon\":\"\",\"cputimes\":\"\",\"showcputime\":true,\"secret\":[],\"widget\":false,\"executionTime\":\"0.07\"},{\"id\":\"7168471144_0.7440081228835448\",\"pre_cell_id\":\"7168471144_0.632440714017554\",\"is_pre_cell\":true,\"succORerr\":true,\"type\":\"code\",\"code\":\"!!pip install colorama\",\"count\":17,\"mode\":\"editor\",\"result\":\"\",\"outputArray\":\"\",\"image\":\"\",\"error\":\"\",\"hover\":true,\"interrupt\":false,\"warning\":false,\"lineNumber\":false,\"laodmodel\":false,\"loader\":false,\"expand\":false,\"outputexpand\":false,\"readonly\":false,\"secret\":[],\"markDowns\":false,\"widget\":false,\"executionTime\":\"2.72\",\"showcputime\":true},{\"id\":\"7168471144_0.25378764866204484\",\"pre_cell_id\":0,\"is_pre_cell\":false,\"succORerr\":true,\"type\":\"code\",\"code\":\"from colorama import Fore, Style, init\\ninit(autoreset=True)  # Reset colors after each line\\n\\n# Data\\nrows = [\\n    [1, \\\"cat\\\", \\\"cat\\\"],\\n    [2, \\\"dog\\\", \\\"cat\\\"],\\n    [3, \\\"cat\\\", \\\"cat\\\"],\\n    [4, \\\"dog\\\", \\\"dog\\\"]\\n]\\n\\n# Header\\nprint(f\\\"{'ID':<5}{'Actual':<10}{'Predicted'}\\\")\\nprint(\\\"-\\\" * 30)\\n\\n# Rows with color\\nfor id_, actual, predicted in rows:\\n    color = Fore.GREEN if actual == predicted else Fore.RED\\n    print(f\\\"{id_:<5}{actual:<10}{color}{predicted}{Style.RESET_ALL}\\\")\\n\",\"count\":18,\"mode\":\"preview\",\"result\":\"\",\"outputArray\":\"\",\"error\":\"\",\"image\":\"\",\"hover\":true,\"interrupt\":false,\"warning\":false,\"lineNumber\":false,\"laodmodel\":false,\"expand\":false,\"outputexpand\":false,\"readonly\":false,\"loader\":false,\"markDowns\":false,\"algorithms\":\"\",\"semicolon\":\"\",\"cputimes\":\"\",\"showcputime\":true,\"secret\":[],\"widget\":false,\"executionTime\":\"0.31\"}],\"kernalID\":\"a784ddc5-9b1f-46fb-988c-4acda14bfcdc\",\"Algorithms\":[],\"isScheduled\":0,\"last_modified_date\":\"\"}","isImported":0,"workSpaceKey":"","customComponentscript":"{\"DSLAB_content\":\"[{\\\"id\\\":\\\"0_0.6544248185684435\\\",\\\"code\\\":\\\"def pythn():\\\\n    from Notebook.DSNotebook.NotebookExecutor import NotebookExecutor\\\\n    nb = NotebookExecutor()\\\\n    df_new = nb.get_data('11561747821223595', '@SYS.USERID', 'False', {}, [], sheet_name = '')\\\\n    return df_new\\\\n\\\",\\\"count\\\":0,\\\"error\\\":\\\"\\\",\\\"type\\\":\\\"code\\\",\\\"ischecked\\\":true}]\",\"pipeline_content\":\"\\\"def pythn():\\\\n    from Notebook.DSNotebook.NotebookExecutor import NotebookExecutor\\\\n    nb = NotebookExecutor()\\\\n    df_new = nb.get_data('11561747821223595', '@SYS.USERID', 'False', {}, [], sheet_name = '')\\\\n    return df_new\\\\n\\\"\",\"externalLibraries\":\"[]\"}","description":"","lastcommittedDate":1747828228051,"isScheduled":null,"committedBy":7485778619,"type":2,"uuid":"11561747828228059","loggedUserId":null,"spaceKey":"1156","migrationId":null,"path":"","lastUpdatedDate":1748320181259,"createdDate":1747828228051,"createdBy":7485778619,"notebookName":"python","id":7168471144,"projectId":7168095276,"isShared":null,"status":1},"featureSets":null,"autoML":null,"superFeatureSet":null,"errorMessage":null,"message":"Successfully retrived!","notebookModelAsApi":null,"notebookScriptAsApi":null,"tool":null,"notebookModelAsApis":null,"success":true,"knowledgeBases":null,"notebooks":null,"customNotebookScript":null,"superFeatureSets":null,"messageCode":null,"bizvizNotebook":null,"bizvizNotebooks":null}