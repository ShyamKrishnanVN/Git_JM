{"autoML":null,"errorMessage":null,"errorCode":null,"notebookModels":null,"message":null,"notebookModel":null,"success":true,"notebooks":null,"customNotebookScript":null,"messageCode":null,"stackTrace":null,"notebookContent":"{\"sucess\":true,\"content\":{\"cells\":[{\"cell_type\":\"code\",\"metadata\":{\"id\":\"120881395_0.7753035856211343\"},\"execution_count\":null,\"source\":[\"from Notebook.DSNotebook.NotebookExecutor import NotebookExecutor\\nnb = NotebookExecutor()\\ndf_Abalone_Prep_Test = nb.get_data('11121674188059683', '@SYS.USERID', 'True',{},[])\\ndf_Abalone_Prep_Test\"],\"outputs\":[]},{\"cell_type\":\"code\",\"metadata\":{\"id\":\"120881395_0.9894713615021993\"},\"execution_count\":null,\"source\":[\"import pandas as pd\\nfrom time import perf_counter as get_time\\nfrom sklearn.model_selection import train_test_split\\nfrom sklearn.svm import SVC\\nfrom sklearn.metrics import accuracy_score, classification_report\\n\\n# Define the necessary variables here\\n_data   = df_Abalone_Prep_Test    # pd.DataFrame: Full data to process\\n_target = 'sex'    # string: Column name of the target variable\\n\\nif _data is None or _target is None:\\n    raise Exception(f'Both _data and _target must be specified')\\nelif not (isinstance(_data, pd.DataFrame) and isinstance(_target, str)):\\n    raise Exception(f'Datatype of _data must be pd.DataFrame; that of _target must be str')\\n\\n# Separating the independent and dependent variables into X and y respectively\\ny = _data[_target]\\nX = _data.drop(columns=_target)\\nprint(f'Shape of complete data: {_data.shape}')\\n\\n# Splitting the dataset into training and testing datasets\\nX_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.3)\\nprint(f'Shape of training data: {X_train.shape}')\\nprint(f'Shape of testing data : {X_test.shape}')\\n\\n# Creating the classifier and fitting it to the training data\\nsvc = SVC()\\ntime_now = get_time()\\nsvc.fit(X_train, y_train);\\nprint(f'Model {svc} trained')\\nprint(f'Seconds elapsed: {round(get_time() - time_now, 3)}')\\n\\n# Making predictions on the training data\\npredict_train = svc.predict(X_train)\\nprint(f'Predictions on training data made')\\n\\n# Finding the accuracy score of the training predictions\\naccuracy_train = accuracy_score(y_train, predict_train)\\nprint(f'Accuracy score of training predictions: {round(accuracy_train, 3)}')\\n\\n# Printing the classification report of the training predictions\\nreport_train = classification_report(y_train, predict_train, digits=3)\\nprint(f'Classification report of training predictions:')\\nprint(report_train)\\n\\n# Making predictions on the testing data\\npredict_test = svc.predict(X_test)\\nprint(f'Predictions on testing data made')\\n\\n# Finding the accuracy score of the testing predictions\\naccuracy_test = accuracy_score(y_test, predict_test)\\nprint(f'Accuracy score of testing predictions: {round(accuracy_test, 3)}')\\n\\n# Printing the classification report of the testing predictions\\nreport_test = classification_report(y_test, predict_test, digits=3)\\nprint(f'Classification report of testing predictions:')\\nprint(report_test)\"],\"outputs\":[]},{\"cell_type\":\"code\",\"metadata\":{\"id\":\"120881395_0.06437375177737104\"},\"execution_count\":null,\"source\":[\"from Notebook.DSNotebook.NotebookExecutor import NotebookExecutor\\nnb = NotebookExecutor()\\nsaved_model = nb.save_model(model = svc, modelName = 'SVC_V1', modelType = 'ml', X = X_train, y = y_train, estimator_type='classification')\\n#X and y are training datasets to get explainer dashboard.\\n#estimator_type is to specify algorithm type i.e., classification and regression.\\n#Only 'ml\u2019 models with tabular data as input will support in Explainer Dashboard.\\n#Choose modelType = 'ml' for machine learning models, modelType = 'cv' for computer vision models and modelType = 'dp' for data transformation pickle files. \\n#Provide \u2018column_headers\u2019 as a parameter if they have to be saved in the model.\\n#If using custom layer in keras, use native save functionality from keras.\"],\"outputs\":[]},{\"cell_type\":\"code\",\"metadata\":{\"id\":\"120881395_0.3496166117097159\"},\"execution_count\":null,\"source\":[\"from Notebook.DSNotebook.NotebookExecutor import NotebookExecutor\\nnb = NotebookExecutor()\\nloaded_model = nb.load_saved_model('11121677653771238')\"],\"outputs\":[]},{\"cell_type\":\"code\",\"metadata\":{\"id\":\"120881395_0.3593016946718133\"},\"execution_count\":null,\"source\":[\"nb.predict(model = loaded_model, dataframe = X_test, modeltype='ml') \\n #Choose modeltype 'ml' for machine learning models and 'cv' for computer vision model \\n #ex: For machine learning model nb.predict(model = model, modeltype = 'ml', dataframe = df) \\n #ex: For computer vision keras model nb.predict(model = model, modeltype = 'cv', imgs = imgs, imgsize = (28, 28), dim = 1, class_names = class_names) \\n #and for pytorch model(model = model, modeltype = 'cv', imgs = imgs, class_names = class_names) \\n #Note: incase any error in prediction user squeezed image data in keras\"],\"outputs\":[]}],\"metadata\":{},\"nbformat\":4,\"nbformat_minor\":2}}","autoMLs":null,"scripts":null,"notebook":{"updatedBy":950278,"data":"{\"datasets\":[],\"uncheckeddatasets\":[],\"kernalID\":\"\",\"Algorithms\":[],\"isScheduled\":0,\"last_modified_date\":\"\"}","isImported":0,"customComponentscript":null,"description":null,"lastcommittedDate":1705495491934,"isScheduled":null,"committedBy":950278,"type":1,"uuid":"11561705495492215","spaceKey":"1156","migrationId":null,"path":null,"lastUpdatedDate":1705495492215,"createdDate":1705495491934,"createdBy":950278,"notebookName":"Test_V3","id":120881395,"projectId":112656384,"isShared":null,"status":1}}