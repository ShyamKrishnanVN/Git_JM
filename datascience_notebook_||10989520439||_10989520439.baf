{"featureSets":null,"autoML":null,"superFeatureSet":null,"errorMessage":null,"featureSet":null,"errorCode":null,"notebookModels":null,"message":"Successfully retrived!","notebookModel":null,"success":true,"notebooks":null,"customNotebookScript":null,"superFeatureSets":null,"messageCode":null,"stackTrace":null,"notebookContent":"{\"sucess\":true,\"content\":{\"cells\":[{\"cell_type\":\"code\",\"metadata\":{\"id\":\"0_0.4458191328785286\"},\"execution_count\":null,\"source\":[\"#sklearn train model\\nimport pandas as pd\\nfrom sklearn import model_selection\\nfrom sklearn.linear_model import LogisticRegression\\nfrom sklearn.naive_bayes import GaussianNB\\nfrom sklearn.naive_bayes import MultinomialNB\\nimport pickle\\nurl = \\\"https://raw.githubusercontent.com/jbrownlee/Datasets/master/pima-indians-diabetes.data.csv\\\"\\nnames = ['preg', 'plas', 'pres', 'skin', 'test', 'mass', 'pedi', 'age', 'class']\\ndataframe = pd.read_csv(url, names=names)\\narray = dataframe.values\\nX = array[:,0:8]\\nY = array[:,8]\\ntest_size = 0.33\\nseed = 7\\nX_train, X_test, Y_train, Y_test = model_selection.train_test_split(X, Y, test_size=test_size, random_state=seed)\\nmodel = MultinomialNB()\\nmodel.fit(X_train, Y_train);\"],\"outputs\":[]},{\"cell_type\":\"code\",\"metadata\":{\"id\":\"0_0.7920844811053975\"},\"execution_count\":null,\"source\":[\"from Notebook.DSNotebook.NotebookExecutor import NotebookExecutor\\nnb = NotebookExecutor()\\nsaved_model = nb.save_model(model = model, modelName = 'Model_Test_V2', modelType = 'ml', X = None, y = None, estimator_type='')\\n#X and y are training datasets to get explainer dashboard.\\n#estimator_type is to specify algorithm type i.e., classification and regression.\\n#Only 'ml\u2019 models with tabular data as input will support in Explainer Dashboard.\\n#Choose modelType = 'ml' for machine learning models, modelType = 'cv' for computer vision models and modelType = 'dp' for data transformation pickle files. \\n#Provide \u2018column_headers\u2019 as a parameter if they have to be saved in the model.\\n#If using custom layer in keras, use native save functionality from keras.\"],\"outputs\":[]},{\"cell_type\":\"code\",\"metadata\":{\"id\":\"0_0.33207022300835876\"},\"execution_count\":null,\"source\":[\"from Notebook.DSNotebook.NotebookExecutor import NotebookExecutor\\nnb = NotebookExecutor()\\nloaded_model = nb.load_saved_model('11561711013856078')\"],\"outputs\":[]},{\"cell_type\":\"code\",\"metadata\":{\"id\":\"0_0.25167511387742514\"},\"execution_count\":null,\"source\":[\"nb.predict(model = loaded_model, dataframe = X_test, modeltype='ml') \\n #Choose modeltype 'ml' for machine learning models and 'cv' for computer vision model \\n #ex: For machine learning model nb.predict(model = model, modeltype = 'ml', dataframe = df) \\n #ex: For computer vision keras model nb.predict(model = model, modeltype = 'cv', imgs = imgs, imgsize = (28, 28), dim = 1, class_names = class_names) \\n #and for pytorch model(model = model, modeltype = 'cv', imgs = imgs, class_names = class_names) \\n #Note: incase any error in prediction user squeezed image data in keras\"],\"outputs\":[]}],\"metadata\":{},\"nbformat\":4,\"nbformat_minor\":2}}","autoMLs":null,"scripts":null,"notebook":{"mongoQL":null,"updatedBy":99391227,"data":"{\"datasets\":[],\"uncheckeddatasets\":[],\"code\":[{\"id\":\"0_0.4458191328785286\",\"code\":\"#sklearn train model\\nimport pandas as pd\\nfrom sklearn import model_selection\\nfrom sklearn.linear_model import LogisticRegression\\nfrom sklearn.naive_bayes import GaussianNB\\nfrom sklearn.naive_bayes import MultinomialNB\\nimport pickle\\nurl = \\\"https://raw.githubusercontent.com/jbrownlee/Datasets/master/pima-indians-diabetes.data.csv\\\"\\nnames = ['preg', 'plas', 'pres', 'skin', 'test', 'mass', 'pedi', 'age', 'class']\\ndataframe = pd.read_csv(url, names=names)\\narray = dataframe.values\\nX = array[:,0:8]\\nY = array[:,8]\\ntest_size = 0.33\\nseed = 7\\nX_train, X_test, Y_train, Y_test = model_selection.train_test_split(X, Y, test_size=test_size, random_state=seed)\\nmodel = MultinomialNB()\\nmodel.fit(X_train, Y_train);\",\"count\":1,\"mode\":\"preview\",\"type\":\"code\",\"pre_cell_id\":0,\"is_pre_cell\":false,\"succORerr\":true,\"hover\":true,\"interrupt\":false,\"warning\":false,\"lineNumber\":false,\"laodmodel\":false,\"expand\":false,\"outputexpand\":false,\"readonly\":false,\"markDowns\":false,\"algorithms\":\"\",\"semicolon\":\"\",\"cputimes\":\"\",\"showcputime\":false,\"secret\":[],\"loader\":false,\"image\":\"\",\"error\":\"\",\"result\":\"\"},{\"id\":\"0_0.7920844811053975\",\"code\":\"from Notebook.DSNotebook.NotebookExecutor import NotebookExecutor\\nnb = NotebookExecutor()\\nsaved_model = nb.save_model(model = model, modelName = 'Model_Test_V2', modelType = 'ml', X = None, y = None, estimator_type='')\\n#X and y are training datasets to get explainer dashboard.\\n#estimator_type is to specify algorithm type i.e., classification and regression.\\n#Only 'ml\u2019 models with tabular data as input will support in Explainer Dashboard.\\n#Choose modelType = 'ml' for machine learning models, modelType = 'cv' for computer vision models and modelType = 'dp' for data transformation pickle files. \\n#Provide \u2018column_headers\u2019 as a parameter if they have to be saved in the model.\\n#If using custom layer in keras, use native save functionality from keras.\",\"count\":2,\"mode\":\"preview\",\"type\":\"code\",\"pre_cell_id\":0,\"is_pre_cell\":false,\"succORerr\":true,\"hover\":true,\"interrupt\":false,\"warning\":false,\"lineNumber\":false,\"laodmodel\":false,\"expand\":false,\"outputexpand\":false,\"readonly\":false,\"markDowns\":false,\"algorithms\":\"\",\"semicolon\":\"\",\"cputimes\":\"\",\"showcputime\":false,\"secret\":[],\"loader\":false,\"image\":\"\",\"error\":\"\",\"result\":\"\"},{\"id\":\"0_0.33207022300835876\",\"code\":\"from Notebook.DSNotebook.NotebookExecutor import NotebookExecutor\\nnb = NotebookExecutor()\\nloaded_model = nb.load_saved_model('11561711013856078')\",\"count\":3,\"mode\":\"preview\",\"type\":\"code\",\"pre_cell_id\":0,\"is_pre_cell\":false,\"succORerr\":true,\"hover\":true,\"interrupt\":false,\"warning\":false,\"lineNumber\":false,\"laodmodel\":false,\"expand\":false,\"outputexpand\":false,\"readonly\":false,\"markDowns\":false,\"algorithms\":\"\",\"semicolon\":\"\",\"cputimes\":\"\",\"showcputime\":false,\"secret\":[],\"loader\":false,\"image\":\"\",\"error\":\"\",\"result\":\"\"},{\"id\":\"0_0.25167511387742514\",\"code\":\"nb.predict(model = loaded_model, dataframe = X_test, modeltype='ml') \\n #Choose modeltype 'ml' for machine learning models and 'cv' for computer vision model \\n #ex: For machine learning model nb.predict(model = model, modeltype = 'ml', dataframe = df) \\n #ex: For computer vision keras model nb.predict(model = model, modeltype = 'cv', imgs = imgs, imgsize = (28, 28), dim = 1, class_names = class_names) \\n #and for pytorch model(model = model, modeltype = 'cv', imgs = imgs, class_names = class_names) \\n #Note: incase any error in prediction user squeezed image data in keras\",\"count\":4,\"mode\":\"preview\",\"type\":\"code\",\"pre_cell_id\":0,\"is_pre_cell\":false,\"succORerr\":true,\"hover\":true,\"interrupt\":false,\"warning\":false,\"lineNumber\":false,\"laodmodel\":false,\"expand\":false,\"outputexpand\":false,\"readonly\":false,\"markDowns\":false,\"algorithms\":\"\",\"semicolon\":\"\",\"cputimes\":\"\",\"showcputime\":false,\"secret\":[],\"loader\":false,\"image\":\"\",\"error\":\"\",\"result\":\"\"}],\"kernalID\":\"c5d7c512-8cf0-46ab-8ccd-fb8807848182\",\"Algorithms\":[],\"isScheduled\":0,\"last_modified_date\":\"\"}","isImported":0,"customComponentscript":"","description":"","lastcommittedDate":1715668143993,"isScheduled":null,"committedBy":99391227,"type":1,"uuid":"11561715668144041","loggedUserId":null,"spaceKey":"1156","migrationId":null,"path":"","lastUpdatedDate":1715668278044,"createdDate":1715668143993,"createdBy":99391227,"notebookName":"Sklearn Workflow","id":10989520439,"projectId":10987558848,"isShared":null,"status":1}}