{"featureSets":null,"autoML":null,"superFeatureSet":null,"errorMessage":null,"featureSet":null,"errorCode":null,"notebookModels":null,"message":"Successfully retrived!","notebookModel":null,"success":true,"notebooks":null,"customNotebookScript":null,"superFeatureSets":null,"messageCode":null,"stackTrace":null,"notebookContent":"{\"sucess\":true,\"content\":{\"cells\":[{\"cell_type\":\"code\",\"metadata\":{\"id\":\"0_0.5344366003691956\"},\"execution_count\":0,\"source\":[\"import pandas as pd\\nimport numpy as np\\nimport matplotlib.pyplot as plt\\nimport logging \\nimport re\\nfrom datetime import datetime\\nimport json\\nfrom Notebook.DSNotebook.NotebookExecutor import NotebookExecutor\\nnb = NotebookExecutor()\"],\"outputs\":[]},{\"cell_type\":\"code\",\"metadata\":{\"id\":\"0_0.6959620921153264\"},\"execution_count\":1,\"source\":[\"df_CXM = nb.get_data('11111727249579788', '@SYS.USERID', 'True', {}, [])\\ndf_A_Records = nb.get_data('11111727249094446', '@SYS.USERID', 'True', {}, [])\\ndf_logs_inapp = nb.get_data('11111727250179094', '@SYS.USERID', 'True', {}, [])\\ndf_Logs_Fuzzy = nb.get_data('11111727249902767', '@SYS.USERID', 'True', {}, [])\\ndf_Logs_UDID = nb.get_data('11111727249921283', '@SYS.USERID', 'True', {}, [])\\ndf_logs_sms = nb.get_data('11111727250139530', '@SYS.USERID', 'True', {}, [])\\ndf_kibana = nb.get_data('11111727250122271', '@SYS.USERID', 'True', {}, [])\\ndf_doublesafe = nb.get_data('11111727249973467', '@SYS.USERID', 'True', {}, [])\\ndf_logs_web = nb.get_data('11111727250196261', '@SYS.USERID', 'True', {}, [])\\n\"],\"outputs\":[]},{\"cell_type\":\"markdown\",\"metadata\":{\"id\":\"0_0.7615903578949648\"},\"execution_count\":1,\"source\":[\"**Some data pre-processing**\"],\"outputs\":[]},{\"cell_type\":\"code\",\"metadata\":{\"id\":\"0_0.4079390879261222\"},\"execution_count\":2,\"source\":[\"df_CXM[\\\"Date_Transaction\\\"] = pd.to_datetime(pd.to_datetime(df_CXM[\\\"Date and Time of Transaction\\\"]).dt.date)\\ndf_CXM['Date and Time of Transaction'] = pd.to_datetime(df_CXM['Date and Time of Transaction'])\\ndf_CXM.rename({\\\"Complainant's\\\\nMobile# (Test Numbers)\\\":\\\"mobile_number\\\"},axis=1,inplace=True)\\ndf_kibana = df_kibana[~(df_kibana[\\\"Time\\\"]==\\\"Time\\\")]\"],\"outputs\":[]},{\"cell_type\":\"code\",\"metadata\":{\"id\":\"0_0.5115127751704645\"},\"execution_count\":3,\"source\":[\"# change the Transaction Date format of A_Records:\\ndef change_dt_format(date):\\n    date_obj = datetime.strptime(date, '%b %d %Y %H:%M:%S')\\n    formatted_date = date_obj.strftime('%Y-%m-%d %H:%M:%S')\\n    return formatted_date\\ndef currency_coversion(currency_string):\\n    match = re.search(r'[\\\\d,]+\\\\.?\\\\d*', currency_string)\\n    if match:\\n        numeric_value = float(match.group().replace(',', ''))\\n    return numeric_value\\ndef change_date_format(date):\\n    date_obj = datetime.strptime(date, \\\"%b %d, %Y @ %H:%M:%S.%f\\\")\\n    formatted_date = date_obj.strftime(\\\"%Y-%m-%d\\\")\\n    return formatted_date\\n\\ndf_A_Records[\\\"Transaction Date\\\"] = df_A_Records[\\\"Transaction Date\\\"].apply(change_dt_format)\\ndf_A_Records[\\\"Transaction Date\\\"] = pd.to_datetime(df_A_Records[\\\"Transaction Date\\\"])\\ndf_kibana[\\\"Time\\\"] = df_kibana[\\\"Time\\\"].apply(change_date_format)\\ndf_A_Records[\\\"Amount\\\"] = df_A_Records[\\\"Amount\\\"].apply(currency_coversion) \\ndf_A_Records[\\\"Service Fee\\\"] = df_A_Records[\\\"Service Fee\\\"].apply(currency_coversion) \"],\"outputs\":[]},{\"cell_type\":\"code\",\"metadata\":{\"id\":\"0_0.053290117168534934\"},\"execution_count\":4,\"source\":[\"df_logs_web.rename({\\\"result_event_result\\\":\\\"result_pay_result\\\"},axis=1,inplace=True)\\nresult_logs = pd.concat([df_logs_inapp,df_logs_web],axis=0,ignore_index=True)\\nresult_logs[\\\"event_amt\\\"] = result_logs[\\\"event_amt\\\"].astype(str)\"],\"outputs\":[]},{\"cell_type\":\"markdown\",\"metadata\":{\"id\":\"0_0.9717017969085109\"},\"execution_count\":1,\"source\":[\"** * Test Cases: (Several user inputs with and without APP terminal type)**\"],\"outputs\":[]},{\"cell_type\":\"code\",\"metadata\":{\"id\":\"0_0.560689664229562\"},\"execution_count\":34,\"source\":[\"# (with NOT APP)!\\n\\n# inputs = pd.DataFrame({\\\"mobile_number\\\": [9535728463], \\\"reference_id\\\": [20240424121212800110170864274019098], \\\"amount\\\":[17936.0], \\\"date_time_transaction\\\": [\\\"2024-04-24 09:21:16\\\"]})\\n\\n# inputs = pd.DataFrame({\\\"mobile_number\\\": [9537876847], \\\"reference_id\\\": [20240427121212800110170132367039550], \\\"amount\\\":[5898.0], \\\"date_time_transaction\\\": [\\\"2024-04-27 01:19:24\\\"]})\\n\\n# (with APP Inputs)!!\\n\\n# inputs = pd.DataFrame({\\\"mobile_number\\\": [9285344745], \\\"reference_id\\\": [20240513121212800100170850501568243], \\\"amount\\\":[5716.00], \\\"date_time_transaction\\\": [\\\"2024-05-13 13:28:20\\\"]})\\n\\ninputs = pd.DataFrame({\\\"mobile_number\\\": [9265626883], \\\"reference_id\\\": [20240511121212800100170573899641646], \\\"amount\\\":[13095.0], \\\"date_time_transaction\\\": [\\\"2024-05-11 00:45:44\\\"]})\\n\\ninput_date_time = pd.to_datetime(inputs[\\\"date_time_transaction\\\"].iloc[-1])\\n\"],\"outputs\":[]},{\"cell_type\":\"markdown\",\"metadata\":{\"id\":\"0_0.7685617141107768\"},\"execution_count\":1,\"source\":[\"user_inputs\"],\"outputs\":[]},{\"cell_type\":\"markdown\",\"metadata\":{\"id\":\"0_0.03081909411919126\"},\"execution_count\":1,\"source\":[\"**#user_story_1 starts**\"],\"outputs\":[]},{\"cell_type\":\"markdown\",\"metadata\":{\"id\":\"0_0.37267286901746255\"},\"execution_count\":1,\"source\":[\"- After user inputs\\n- Search for Transaction\\n- Identify if Transaction Exist!\\n- Get Details if Transaction Exist!\\n- Else inform user Transaction Doesn't Exist accordingly!\"],\"outputs\":[]},{\"cell_type\":\"code\",\"metadata\":{\"id\":\"0_0.6705458104487438\"},\"execution_count\":6,\"source\":[\"def user_1_CXM(inputs, input_date_time, df_CXM):\\n    \\n    if inputs[\\\"mobile_number\\\"].iloc[-1] not in df_CXM[\\\"mobile_number\\\"].values:\\n        raise ValueError(\\\"Mobile Number not identified for the transaction\\\")\\n\\n    # Filter DataFrame by mobile number\\n    filtered_df = df_CXM[df_CXM[\\\"mobile_number\\\"] == inputs[\\\"mobile_number\\\"].iloc[-1]]\\n\\n    # Ensure the input_date_time exists for that mobile number\\n    if input_date_time not in filtered_df[\\\"Date and Time of Transaction\\\"].values:\\n        raise ValueError(\\\"Transaction doesn't exist for the given date and time on this mobile number\\\")\\n\\n    # Extract the relevant row based on the date and time of transaction\\n    filtered_df_update = filtered_df[filtered_df[\\\"Date and Time of Transaction\\\"] == input_date_time]\\n    \\n    # Ensure disputed amount is present and then filter accordingly    \\n    if inputs[\\\"amount\\\"].iloc[-1] not in filtered_df_update[\\\"Disputed Amount\\\"].values:\\n        raise ValueError(\\\"Transaction Amount not Present\\\")\\n\\n    \\n    CXM_data = filtered_df_update[filtered_df_update[\\\"Disputed Amount\\\"] == inputs[\\\"amount\\\"].iloc[-1]]\\n\\n\\n    ticket_id = CXM_data[\\\"Ticket ID\\\"].iloc[-1]\\n    dispute_date = CXM_data[\\\"Date_Coverage\\\"].iloc[-1]\\n    dispute_amount = CXM_data[\\\"Disputed Amount\\\"].iloc[-1]\\n    Transaction_type = CXM_data[\\\"Type of Transaction\\\"].iloc[-1]\\n    Recipient_Mobile_Bank_Number = CXM_data[\\\"Recipient Mobile#/Bank Account# (Test Numbers)\\\"].iloc[-1]\\n    amt_be_recovered = CXM_data[\\\"Amount that can be recovered\\\"].iloc[-1]\\n    Modus = CXM_data[\\\"Modus\\\"].iloc[-1]\\n    \\n    dispute_amount = str(dispute_amount)\\n    claim = \\\"False Claim\\\" if input_date_time < dispute_date else \\\"ATO\\\"\\n#     dispute_amount = str(dispute_amount)\\n    return ticket_id, dispute_date, dispute_amount, Transaction_type, Recipient_Mobile_Bank_Number, amt_be_recovered, Modus, claim,CXM_data\\n\"],\"outputs\":[]},{\"cell_type\":\"code\",\"metadata\":{\"id\":\"0_0.10186432993966776\"},\"execution_count\":57,\"source\":[\"def user_1_A_records(inputs,input_date_time,df_A_Records):\\n    try:\\n        # Check if the mobile number exists in 'Source (Test Data)'\\n        if inputs[\\\"mobile_number\\\"].iloc[-1] in df_A_Records[\\\"Source (Test Data)\\\"].values:\\n            logging.info(\\\"mobile ok\\\")\\n            # Check if input_date_time exists for the corresponding mobile number\\n            global matching_records\\n            global filtered_df\\n            \\n            matching_records = df_A_Records[df_A_Records[\\\"Source (Test Data)\\\"] == inputs[\\\"mobile_number\\\"].iloc[-1]]\\n            if input_date_time in matching_records[\\\"Transaction Date\\\"].values:\\n                logging.info(\\\"transaction ok\\\")\\n                # Filter records by both mobile number and date\\n                filtered_df = matching_records[matching_records[\\\"Transaction Date\\\"] == input_date_time]\\n                filtered_df[\\\"A+ Transaction ID\\\"] = filtered_df[\\\"A+ Transaction ID\\\"].astype('str')\\n                logging.info(\\\"filtered df\\\")\\n                # Check if reference ID is there or not and filter accordingly\\n                if str(inputs[\\\"reference_id\\\"].iloc[-1]) in filtered_df[\\\"A+ Transaction ID\\\"].values:\\n                    logging.info(\\\"A+ ok\\\")\\n                    global new_df\\n                    new_df = filtered_df[filtered_df[\\\"A+ Transaction ID\\\"] == str(inputs[\\\"reference_id\\\"].iloc[-1])]\\n\\n                    # Verify the amount and status as well\\n                    if inputs[\\\"amount\\\"].iloc[-1] == new_df[\\\"Amount\\\"].iloc[-1]:\\n                        logging.info(\\\"AMOUNT OK!\\\")\\n                        if new_df[\\\"Transaction Status\\\"].iloc[-1] == 'SUCCESS':\\n                            logging.info(\\\"Transaction Exists!\\\")\\n                            # Extract relevant information\\n                            product_type = new_df[\\\"Product Type\\\"].iloc[-1]\\n                            product_name = new_df[\\\"Product Name\\\"].iloc[-1]\\n                        else:\\n                            raise ValueError(\\\"Transaction was not a SUCCESS\\\")\\n                    else:\\n                        raise ValueError(\\\"Amount mismatch\\\")\\n                else:\\n                    raise KeyError(\\\"Reference ID not found\\\")\\n            else:\\n                raise KeyError(\\\"Transaction doesn't Exist for Specific Date and Time on this Mobile Number\\\")\\n        else:\\n            raise KeyError(f\\\"Transaction corresponding to {inputs['mobile_number'].iloc[-1]} not present in A+ Records\\\")\\n\\n    except KeyError as e:\\n        print(f\\\"Response: {e}\\\")\\n        return None, None, None  # Returning None values if key checks fail\\n    except ValueError as e:\\n        print(f\\\"Response: {e}\\\")\\n        return None, None, None  # Returning None values if amount/status checks fail\\n    except Exception as e:\\n        print(f\\\"Response: {e}\\\")\\n        return None, None, None  # Catch-all for any other unexpected errors\\n\\n    return product_type, product_name, new_df\"],\"outputs\":[]},{\"cell_type\":\"markdown\",\"metadata\":{\"id\":\"0_0.28216807326688564\"},\"execution_count\":1,\"source\":[\"**#user_story_2**\"],\"outputs\":[]},{\"cell_type\":\"code\",\"metadata\":{\"id\":\"35695431341_0.3167900858342261\"},\"execution_count\":60,\"source\":[\"matching_records\"],\"outputs\":[{\"data\":{\"text/plain\":[\"   A+ Short Transaction ID                    A+ Transaction ID                            Merchant Trans ID Source (Test Data)     Target (Test Data) Product Type   Amount  Service Fee Transaction Status    Transaction Date   Product Name\\n3                522386950  20240511121212800100170573899641646  20240511-t-bd7e81b00eec11efa8deb61ae264ca98         9265626883  217020000000000000000    Acquiring  13095.0          0.0            SUCCESS 2024-05-11 00:45:44  Bills Payment\"],\"text/html\":[\"<div>\\n<style scoped>\\n    .dataframe tbody tr th:only-of-type {\\n        vertical-align: middle;\\n    }\\n\\n    .dataframe tbody tr th {\\n        vertical-align: top;\\n    }\\n\\n    .dataframe thead th {\\n        text-align: right;\\n    }\\n<\/style>\\n<table border=\\\"1\\\" class=\\\"dataframe\\\">\\n  <thead>\\n    <tr style=\\\"text-align: right;\\\">\\n      <th><\/th>\\n      <th>A+ Short Transaction ID<\/th>\\n      <th>A+ Transaction ID<\/th>\\n      <th>Merchant Trans ID<\/th>\\n      <th>Source (Test Data)<\/th>\\n      <th>Target (Test Data)<\/th>\\n      <th>Product Type<\/th>\\n      <th>Amount<\/th>\\n      <th>Service Fee<\/th>\\n      <th>Transaction Status<\/th>\\n      <th>Transaction Date<\/th>\\n      <th>Product Name<\/th>\\n    <\/tr>\\n  <\/thead>\\n  <tbody>\\n    <tr>\\n      <th>3<\/th>\\n      <td>522386950<\/td>\\n      <td>20240511121212800100170573899641646<\/td>\\n      <td>20240511-t-bd7e81b00eec11efa8deb61ae264ca98<\/td>\\n      <td>9265626883<\/td>\\n      <td>217020000000000000000<\/td>\\n      <td>Acquiring<\/td>\\n      <td>13095.0<\/td>\\n      <td>0.0<\/td>\\n      <td>SUCCESS<\/td>\\n      <td>2024-05-11 00:45:44<\/td>\\n      <td>Bills Payment<\/td>\\n    <\/tr>\\n  <\/tbody>\\n<\/table>\\n<\/div>\"]},\"metadata\":{},\"execution_count\":61,\"output_type\":\"execute_result\"}]},{\"cell_type\":\"markdown\",\"metadata\":{\"id\":\"0_0.5823539292082447\"},\"execution_count\":1,\"source\":[\"If transaction exists(Transaction Type is not None) in A+ Records then fetch Terminal Type from the next user_story_2:\"],\"outputs\":[]},{\"cell_type\":\"code\",\"metadata\":{\"id\":\"0_0.08607706945670812\"},\"execution_count\":40,\"source\":[\"def user_2_terminal_type(inputs,df_logs_inapp,dispute_amount):\\n    inapp = df_logs_inapp[df_logs_inapp[\\\"user_mobile\\\"]==inputs[\\\"mobile_number\\\"].iloc[-1]]\\n    if dispute_amount in inapp[\\\"event_amt\\\"].values:\\n            txn = inapp[inapp[\\\"event_amt\\\"] == dispute_amount]\\n            txn = txn[txn[\\\"result_pay_result\\\"]=='payment_success']\\n            terminal_type = txn[\\\"terminal_type\\\"].iloc[-1]\\n            result_pay_result = txn[\\\"result_pay_result\\\"].iloc[-1]\\n            fuzzy_device_id = txn[\\\"fuzzy_device_id\\\"].iloc[-1]\\n            login_udid = txn[\\\"login_udid\\\"].iloc[-1]\\n    return terminal_type,result_pay_result,fuzzy_device_id,login_udid,txn\\n\\n\"],\"outputs\":[]},{\"cell_type\":\"markdown\",\"metadata\":{\"id\":\"0_0.8585822995815775\"},\"execution_count\":1,\"source\":[\"- If_App: \\ncheck whether UDID is part of device history or Not\\nCount the number of successful Transactions\\n- Else if not App:\\nproceed to user stories 3 and beyond\"],\"outputs\":[]},{\"cell_type\":\"markdown\",\"metadata\":{\"id\":\"0_0.09069798651526817\"},\"execution_count\":1,\"source\":[\"**user_criteria_2 and 3:**\"],\"outputs\":[]},{\"cell_type\":\"code\",\"metadata\":{\"id\":\"0_0.8780598846262331\"},\"execution_count\":41,\"source\":[\"def user_2_face_score(terminal_type,df_doublesafe,login_udid):\\n    filter_safe = df_doublesafe[df_doublesafe[\\\"device_id\\\"]==login_udid]\\n    event_id_doublesafe = filter_safe[\\\"event_id\\\"].iloc[-1]\\n    face_score = filter_safe[\\\"face_score\\\"].iloc[-1]\\n    verification_method = filter_safe[\\\"result_verification_method\\\"].iloc[-1]\\n    gmt_occur_face_verification = filter_safe[\\\"gmt_occur\\\"].iloc[-1]\\n    print(f\\\"\\\"\\\"\\n    The DoubleSafe Link Event ID: {event_id_doublesafe}\\n    Detected Face Score: {face_score}\\n    The Verification Method: {verification_method}\\n    Time of Event Verification: {gmt_occur_face_verification}\\n    \\\"\\\"\\\",\\\"\\\\n\\\")\\n    return event_id_doublesafe, face_score, verification_method, gmt_occur_face_verification, filter_safe\\n\\n\\ndef user_2_UDID_history_check(df_Logs_UDID,login_udid,input_date_time):\\n    if login_udid in df_Logs_UDID[\\\"cohort\\\"].values:\\n        max_date = pd.to_datetime(df_Logs_UDID[df_Logs_UDID[\\\"cohort\\\"]==login_udid][\\\"max_trans_date\\\"].iloc[-1],errors=\\\"coerce\\\")\\n        min_date = pd.to_datetime(df_Logs_UDID[df_Logs_UDID[\\\"cohort\\\"]==login_udid][\\\"min_trans_date\\\"].iloc[-1],errors=\\\"coerce\\\")\\n        current_transaction_date = input_date_time\\n        print(f'Minimum_transaction_date : {min_date}')\\n        print(f'Reported_transaction_date: {current_transaction_date}')\\n        print(f'Maximum_transaction_date : {max_date}',\\\"\\\\n\\\")\\n        print(f'UDID is:{login_udid}')\\n        # if transaction time is between min_trans_date and max_trans_date of the the cohort then UDID is part of history\\n        if (current_transaction_date > min_date) & (current_transaction_date < max_date):\\n\\n            status = \\\"UDID is part of Device History, as the UDID based transaction is inside the Cohort Timeline\\\"\\n        else:\\n            status = \\\"UDID is not part of the Device History.\\\"\\n    else:\\n        logging.info(\\\"UDID not found\\\")\\n    return max_date, min_date,status\\n\\n\\ndef user_2_successfull_txn(df_logs_inapp,login_udid):\\n    if login_udid in df_logs_inapp[\\\"login_udid\\\"].values:\\n        df_udid = df_logs_inapp[df_logs_inapp[\\\"login_udid\\\"]==login_udid]\\n        number_successful_payment = len(df_udid[df_udid[\\\"result_pay_result\\\"]==\\\"payment_success\\\"])\\n    return number_successful_payment\"],\"outputs\":[]},{\"cell_type\":\"code\",\"metadata\":{\"id\":\"35695431341_0.3964182166342116\"},\"execution_count\":42,\"source\":[\"def user_story_3_updated(inputs,df_kibana):\\n    kibana_df = df_kibana[(df_kibana[\\\"destinationNumber\\\"]==str(inputs.mobile_number.iloc[-1]))]\\n    date_check = inputs[\\\"date_time_transaction\\\"].iloc[-1].split(\\\" \\\")[0]\\n    if \\\"OTP-DEFAULT\\\" in kibana_df[kibana_df[\\\"Time\\\"]==date_check][\\\"sourceNumber\\\"].values:\\n        OTP_Status= \\\"There is an OTP\\\"\\n\\n    else:\\n        OTP_Status = \\\"No OTP\\\"\\n    \\n    return OTP_Status\"],\"outputs\":[]},{\"cell_type\":\"markdown\",\"metadata\":{\"id\":\"0_0.5662535908831421\"},\"execution_count\":1,\"source\":[\"**Else if terminal type is not App then other user stories gets implemented below:**\"],\"outputs\":[]},{\"cell_type\":\"code\",\"metadata\":{\"id\":\"0_0.7171205019849021\"},\"execution_count\":11,\"source\":[\"OTP_Status = user_story_3_updated(inputs,df_kibana)\"],\"outputs\":[]},{\"cell_type\":\"markdown\",\"metadata\":{\"id\":\"0_0.4207766413908036\"},\"execution_count\":1,\"source\":[\"user_story_4\"],\"outputs\":[]},{\"cell_type\":\"markdown\",\"metadata\":{\"id\":\"0_0.9984778332025239\"},\"execution_count\":1,\"source\":[\"- DS Type detected is Face or Not\\n- If Face retrieve the Face Match Details\\n- Else not Face ? connect to kibana and check if it has a MAC SMS?!\"],\"outputs\":[]},{\"cell_type\":\"code\",\"metadata\":{\"id\":\"0_0.8907808587796784\"},\"execution_count\":43,\"source\":[\"def user_story_4(result_logs,df_Logs_UDID,inputs,fuzzy_device_id):\\n    global result_df\\n    global filtered_number\\n    global filtered_df\\n    global cohort_val\\n    global df_safe\\n    result_df = result_logs[result_logs[\\\"terminal_type\\\"]!=\\\"APP\\\"]\\n    filtered_number = result_df[result_df[\\\"user_mobile\\\"]==inputs[\\\"mobile_number\\\"].iloc[-1]]\\n    filtered_df = filtered_number[filtered_number[\\\"event_amt\\\"]==str(float(inputs[\\\"amount\\\"].iloc[-1]))]\\n    logging.info(\\\"filtered\\\")\\n    if 'payment_success' in filtered_df[\\\"result_pay_result\\\"].values:\\n        logging.info(\\\"Success\\\")\\n        df = filtered_df[filtered_df['result_pay_result']==\\\"payment_success\\\"]\\n        logging.info(\\\"df\\\")\\n        time = df[\\\"gmt_occur\\\"].iloc[-1]\\n        event_name = df[\\\"event_name\\\"].iloc[-1]\\n        fuzzy_id_df = df_Logs_Fuzzy[df_Logs_Fuzzy[\\\"user_mobile\\\"]==inputs.mobile_number.iloc[-1]][df_Logs_Fuzzy[df_Logs_Fuzzy[\\\"user_mobile\\\"]==inputs.mobile_number.iloc[-1]][\\\"cohort\\\"]==fuzzy_device_id]\\n        logging.info(\\\"fuzzy_id\\\")\\n        if event_name in fuzzy_id_df[\\\"event_name\\\"].values:\\n            date_time = fuzzy_id_df[\\\"first_date\\\"].iloc[-1]\\n            df_Logs_UDID[\\\"min_trans_date\\\"] = pd.to_datetime(df_Logs_UDID[\\\"min_trans_date\\\"])\\n            df_Logs_UDID[\\\"max_trans_date\\\"] =pd.to_datetime(df_Logs_UDID[\\\"max_trans_date\\\"])\\n            logging.info(\\\"udid_id\\\")\\n            filter_udid = (df_Logs_UDID[df_Logs_UDID[\\\"msisdn\\\"]==inputs.mobile_number.iloc[-1]])\\n            filter_udid = filter_udid.sort_values(by=\\\"max_trans_date\\\",ascending=False)\\n            logging.info(\\\"filter_udid\\\")\\n            cohort_val = filter_udid[(date_time >= filter_udid[\\\"min_trans_date\\\"]) & (date_time <= filter_udid[\\\"max_trans_date\\\"])].cohort.iloc[-1]\\n            print(f\\\"Cohort Value: {cohort_val}\\\")\\n            doublesafe_df = df_doublesafe[df_doublesafe[\\\"user_mobile\\\"]==inputs.mobile_number.iloc[-1]]\\n            logging.info(\\\"doublesafe\\\")\\n            df_safe = doublesafe_df[doublesafe_df[\\\"device_id\\\"]==cohort_val]\\n            # The GMT occurence is within the date_time of transaction:\\n            df_safe = df_safe[df_safe[\\\"gmt_occur\\\"]<=str(date_time)]\\n            logging.info(\\\"df_safe\\\")\\n            return df_safe\"],\"outputs\":[]},{\"cell_type\":\"markdown\",\"metadata\":{\"id\":\"0_0.32040245588436056\"},\"execution_count\":1,\"source\":[\"**#User story 5 cases:**\"],\"outputs\":[]},{\"cell_type\":\"markdown\",\"metadata\":{\"id\":\"0_0.6176675012694\"},\"execution_count\":1,\"source\":[\"- Identify if Face Matched or Not\\n- If matched, then return False Claim! with all summary and Details available!\\n- Else respond it's an ATO case with all summary and Details available!\"],\"outputs\":[]},{\"cell_type\":\"code\",\"metadata\":{\"id\":\"0_0.28689521803426743\"},\"execution_count\":13,\"source\":[\"# if terminal_type != \\\"APP\\\":\\n#     for i,val in enumerate(face_scores_):\\n#         gmt = occur_dates[i]\\n#         try:\\n#             if int(val) >= 63:\\n\\n#                 print(f\\\"\\\"\\\"\\n#                       Time: {gmt} has face score of {val}, hence its a face Match and False Claim!\\n#                       \\\"\\\"\\\")\\n#             else:\\n#                  print(f\\\"\\\"\\\"\\n#                       Time: {gmt} has face score of {val}, hence not a face Match and ATO case\\n#                       \\\"\\\"\\\")\\n#         except ValueError:\\n#             print(f\\\"{gmt}: corresponding face score not detected properly\\\")\\n#     product_type, product_name, test_df = user_1_A_records(inputs,input_date_time,df_A_Records)\\n\\n#     disputed_amt = test_df[\\\"Amount\\\"].iloc[-1]\\n#     merchant_id = test_df[\\\"Merchant Trans ID\\\"].iloc[-1]\\n#     A_txn_id = test_df[\\\"A+ Transaction ID\\\"].iloc[-1]\\n\\n#     terminal_type,result_pay_result,fuzzy_device_id,login_udid,txn = user_2_terminal_type(inputs,result_logs)\\n\\n#     print(f\\\"disputed_amt: {disputed_amt}\\\")\\n#     print(f\\\"Merchant_id: {merchant_id}\\\")\\n#     print(f\\\"A+ Transaction ID: {A_txn_id}\\\")\\n#     print(f\\\"Product Type: {product_type}\\\")\\n#     print(f\\\"Product Name: {product_name}\\\")\\n#     print(f\\\"Terminal Type: {terminal_type}\\\")\\n#     print(f\\\"Fuzzy_ID: {fuzzy_device_id}\\\")\\n    \"],\"outputs\":[]},{\"cell_type\":\"markdown\",\"metadata\":{\"id\":\"35695431341_0.23530764777627944\"},\"execution_count\":null,\"source\":[\"#pipeline modified_User Story_5\"],\"outputs\":[]},{\"cell_type\":\"markdown\",\"metadata\":{\"id\":\"0_0.8756064434007258\"},\"execution_count\":null,\"source\":[\"**#user_story_6**\"],\"outputs\":[]},{\"cell_type\":\"markdown\",\"metadata\":{\"id\":\"0_0.2109490182899434\"},\"execution_count\":null,\"source\":[\"- If not Face,connect to Kibana and check for MAC-SMS\\n- If MAC-SMS present return False Claim!\\n- Else if no MAC-SMS details found, return ATO\\n- In both cases fetch the details!\"],\"outputs\":[]},{\"cell_type\":\"code\",\"metadata\":{\"id\":\"0_0.6673405752258126\"},\"execution_count\":null,\"source\":[\"# filtered_df = result_df[result_df[\\\"user_mobile\\\"]==inputs.mobile_number.iloc[-1]][result_df[result_df[\\\"user_mobile\\\"]==inputs.mobile_number.iloc[-1]][\\\"event_amt\\\"]==str(inputs[\\\"amount\\\"].iloc[-1])]\\n\\n# if 'payment_success' in filtered_df[\\\"result_pay_result\\\"].values:\\n#     df = filtered_df[filtered_df['result_pay_result']==\\\"payment_success\\\"]\\n#     time = df[\\\"gmt_occur\\\"].iloc[-1]\\n#     event_name = df[\\\"event_name\\\"].iloc[-1]\\n#     fuzzy_id_df = df_Logs_Fuzzy[df_Logs_Fuzzy[\\\"user_mobile\\\"]==inputs.mobile_number.iloc[-1]][df_Logs_Fuzzy[df_Logs_Fuzzy[\\\"user_mobile\\\"]==inputs.mobile_number.iloc[-1]][\\\"cohort\\\"]==fuzzy_device_id]\\n#     if event_name in fuzzy_id_df[\\\"event_name\\\"].values:\\n#         date_time = fuzzy_id_df[\\\"first_date\\\"].iloc[-1]\\n#         df_Logs_UDID[\\\"min_trans_date\\\"] = pd.to_datetime(df_Logs_UDID[\\\"min_trans_date\\\"])\\n#         df_Logs_UDID[\\\"max_trans_date\\\"] =pd.to_datetime(df_Logs_UDID[\\\"max_trans_date\\\"])\\n#         filter_udid = (df_Logs_UDID[df_Logs_UDID[\\\"msisdn\\\"]==inputs.mobile_number.iloc[-1]])\\n#         filter_udid = filter_udid.sort_values(by=\\\"max_trans_date\\\",ascending=False)\\n#         cohort_val = filter_udid[(date_time >= filter_udid[\\\"min_trans_date\\\"]) & (date_time <= filter_udid[\\\"max_trans_date\\\"])].cohort.iloc[-1]\\n        \\n#         doublesafe_df = df_doublesafe[df_doublesafe[\\\"user_mobile\\\"]==inputs.mobile_number.iloc[-1]]\\n#         df_safe = doublesafe_df[doublesafe_df[\\\"device_id\\\"]==cohort_val]\\n#         df_safe = df_safe[df_safe[\\\"gmt_occur\\\"]<=str(date_time)]\\n# #########################\\n# # use df_safe\\n#         face_scores_ = []\\n#         occur_dates = []\\n\\n#         # Check if its a face verification method or not: \\n#         if 'ZOLOZ_FACE' not in df_safe[\\\"result_verification_method\\\"].values:\\n#             kibana_df = df_kibana[(df_kibana[\\\"destinationNumber\\\"]==str(inputs.mobile_number.iloc[-1]))]\\n#             date_check = inputs[\\\"date_time_transaction\\\"].iloc[-1].split(\\\" \\\")[0]\\n#             if \\\"MAC_SMS\\\" in kibana_df[kibana_df[\\\"Time\\\"]==date_check][\\\"sourceNumber\\\"].values:\\n#                 print(\\\"It has MAC-SMS, hence its a False Claim !\\\")\\n#             else:\\n#                 print(\\\"NO MAC-SMS,hence ATO case !!\\\")\\n                \\n#             product_type, product_name, test_df = user_1_A_records(inputs,input_date_time,df_A_Records)\\n#             disputed_amt = test_df[\\\"Amount\\\"].iloc[-1]\\n#             merchant_id = test_df[\\\"Merchant Trans ID\\\"].iloc[-1]\\n#             A_txn_id = test_df[\\\"A+ Transaction ID\\\"].iloc[-1]\\n\\n#             terminal_type,result_pay_result,fuzzy_device_id,login_udid,txn = user_2_terminal_type(inputs,result_logs)\\n\\n#             print(f\\\"disputed_amt: {disputed_amt}\\\")\\n#             print(f\\\"Merchant_id: {merchant_id}\\\")\\n#             print(f\\\"A+ Transaction ID: {A_txn_id}\\\")\\n#             print(f\\\"Product Type: {product_type}\\\")\\n#             print(f\\\"Product Name: {product_name}\\\")\\n#             print(f\\\"Terminal Type: {terminal_type}\\\")\\n#             print(f\\\"Fuzzy_ID: {fuzzy_device_id}\\\")\\n#         else:\\n#             print(\\\"DS Type is FACE\\\")\\n\\n# else:\\n#     print(\\\"payment_failure\\\")\"],\"outputs\":[]},{\"cell_type\":\"markdown\",\"metadata\":{\"id\":\"0_0.96079998143369\"},\"execution_count\":1,\"source\":[\"#Current Deployed Pipeline Function:\"],\"outputs\":[]},{\"cell_type\":\"code\",\"metadata\":{\"id\":\"35695431341_0.8273097794326589\"},\"execution_count\":90,\"source\":[\"def main_pipeline(inputs):\\n    input_date_time = pd.to_datetime(inputs[\\\"date_time_transaction\\\"].iloc[-1])\\n    \\n    ticket_id, dispute_date, dispute_amount, Transaction_type, Recipient_Mobile_Bank_Number, amt_be_recovered, Modus, claim,CXM_data = user_1_CXM(inputs, input_date_time, df_CXM)\\n    product_type, product_name, new_df = user_1_A_records(inputs,input_date_time,df_A_Records)\\n    terminal_type,result_pay_result,fuzzy_device_id,login_udid,txn = user_2_terminal_type(inputs,result_logs,dispute_amount) \\n    if terminal_type == \\\"APP\\\":\\n        logging.info(\\\"Terminal Type is APP:\\\")\\n        event_id_doublesafe, face_score, verification_method, gmt_occur_face_verification, filter_safe = user_2_face_score(terminal_type,df_doublesafe,login_udid)\\n        max_date, min_date,status = user_2_UDID_history_check(df_Logs_UDID,login_udid,input_date_time)   \\n        number_successful_payment = user_2_successfull_txn(df_logs_inapp,login_udid)\\n        \\n        A_txn_id = new_df[\\\"A+ Transaction ID\\\"].iloc[-1] \\n        dispute_date = dispute_date.strftime('%Y-%m-%d')\\n        \\n        return pd.DataFrame({\\\"Ticket_ID\\\" : [ticket_id],\\n            \\\"Dispute Date\\\": [dispute_date],\\n            \\\"Disputed Amount\\\": [dispute_amount],\\n            \\\"Transaction Type\\\": [Transaction_type],\\n            \\\"Recipient Mobile/Bank Number\\\": [Recipient_Mobile_Bank_Number],\\n            \\\"Amount to be Recovered\\\": [amt_be_recovered],\\n            \\\"Modus\\\": [Modus],\\n            \\\"Response_Claimed\\\": [claim],\\n            \\\"product_type\\\": [product_type],\\n            \\\"product_name\\\": [product_name],\\n            \\\"Terminal_Type\\\":[terminal_type],\\n            \\\"Payment_Result\\\":[result_pay_result],\\n            \\\"fuzzy_device_id\\\":[fuzzy_device_id],\\n            \\\"UDID\\\":[login_udid],\\n            \\\"Status of UDID\\\":[status],\\n            \\\"Doublesafe_Event_ID\\\" :[event_id_doublesafe],\\n            \\\"Verification_Method \\\":[verification_method],\\n            \\\"GMT_Verification\\\":[gmt_occur_face_verification],\\n            \\\"Detected_Face_Score\\\":[face_score]  ,\\n            \\\"No_of_Successful_Payments\\\":[number_successful_payment],\\n            \\\"OTP_Status\\\":[],\\n            \\\"Message\\\":[],\\n            \\\"Merchant_id\\\":[],\\n            \\\"A+ Transaction ID\\\":[A_txn_id]\\n            })\\n    else:\\n        #user Story 3 starts\\n        logging.info(\\\"User Story 3\\\")\\n        OTP_Status = user_story_3_updated(inputs,df_kibana)\\n        logging.info(\\\"User Story 4\\\")\\n        # User Story 4 checks!\\n        df_safe = user_story_4(result_logs,df_Logs_UDID,inputs,fuzzy_device_id)\\n        face_scores_ = []\\n        occur_dates = []\\n        message = \\\" \\\"\\n        # USer Story 4 checks if Face is detected Else Moves to Kibana logs and merge user story 6(Since Face not detected)\\n\\n        # Check if 'ZOLOZ_FACE' exists in the 'result_verification_method' column\\n        if 'ZOLOZ_FACE' in df_safe[\\\"result_verification_method\\\"].values:\\n            # Collect all face scores and occurrence dates as lists\\n            face_scores_ = df_safe[\\\"face_score\\\"].tolist()\\n            occur_dates = df_safe[\\\"gmt_occur\\\"].tolist()\\n            result_dict = {\\\"face_score\\\": face_scores_, \\\"gmt_occur\\\": occur_dates}\\n            df_safe = df_safe[df_safe[\\\"result_verification_method\\\"]=='ZOLOZ_FACE']                \\n        else:\\n            kibana_df = df_kibana[(df_kibana[\\\"destinationNumber\\\"]==str(inputs.mobile_number.iloc[-1]))]\\n            date_check = inputs[\\\"date_time_transaction\\\"].iloc[-1].split(\\\" \\\")[0]\\n            if \\\"MAC_SMS\\\" in kibana_df[kibana_df[\\\"Time\\\"]==date_check][\\\"sourceNumber\\\"].values:\\n                message = \\\"There is MAC-SMS\\\"\\n                     \\n            else:\\n                message = \\\"NO MAC-SMS\\\"\\n\\n        # User Story 5:\\n        if len(face_scores_) > 0:\\n            for i,val in enumerate(face_scores_):\\n                gmt = occur_dates[i]\\n                try:\\n                    if int(val) >= 63:\\n\\n                        claim_response = f\\\"Face Match and False Claim!\\\"\\n                    else:\\n                        claim_response = f\\\"Not a face Match and ATO case\\\"\\n\\n                except ValueError:\\n                    logging.info(f\\\"{gmt}: corresponding face score not detected properly\\\")\\n        #User story 6\\n        else:\\n            kibana_df = df_kibana[(df_kibana[\\\"destinationNumber\\\"]==str(inputs.mobile_number.iloc[-1]))]\\n            date_check = inputs[\\\"date_time_transaction\\\"].iloc[-1].split(\\\" \\\")[0]\\n            if \\\"MAC_SMS\\\" in kibana_df[kibana_df[\\\"Time\\\"]==date_check][\\\"sourceNumber\\\"].values:\\n                claim_response = \\\"It has MAC-SMS, hence its a False Claim !\\\"\\n            else:\\n                claim_response = \\\"NO MAC-SMS,hence ATO case !!\\\"\\n\\n        merchant_id = new_df[\\\"Merchant Trans ID\\\"].iloc[-1]\\n        A_txn_id = new_df[\\\"A+ Transaction ID\\\"].iloc[-1]  \\n        \\n        dispute_date = dispute_date.strftime('%Y-%m-%d')\\n       \\n        return pd.DataFrame({\\\"Ticket_ID\\\" : [ticket_id],\\n            \\\"Dispute Date\\\": [dispute_date],\\n            \\\"Disputed Amount\\\": [dispute_amount],\\n            \\\"Transaction Type\\\": [Transaction_type],\\n            \\\"Recipient Mobile/Bank Number\\\": [Recipient_Mobile_Bank_Number],           \\n            \\\"product_type\\\": [product_type],\\n            \\\"product_name\\\": [product_name],\\n            \\\"Amount to be Recovered\\\": [amt_be_recovered],\\n            \\\"Modus\\\": [Modus],\\n            \\\"Payment_Result\\\":[result_pay_result],\\n            \\\"fuzzy_device_id\\\":[fuzzy_device_id],\\n            \\\"Terminal_Type\\\":[terminal_type],\\n            \\\"UDID\\\":[],\\n            \\\"Status of UDID\\\":[],\\n            \\\"Doublesafe_Event_ID\\\" :[],\\n            \\\"Verification_Method \\\":[],\\n            \\\"GMT_Verification\\\":[],\\n            \\\"No_of_Successful_Payments\\\":[]\\n            \\\"OTP_Status\\\":[OTP_Status],\\n            \\\"Detected_Face_Score\\\":[face_scores_],\\n            \\\"Message\\\":[message],\\n            \\\"Response_Claimed\\\":[claim_response],\\n            \\\"Merchant_id\\\":[merchant_id],\\n            \\\"A+ Transaction ID\\\":[A_txn_id]})\\n    \\n\\n#     except ValueError as e:\\n#         ticket_id, dispute_date, dispute_amount, Transaction_type, Recipient_Mobile_Bank_Number, amt_be_recovered, Modus, claim, = None,None,None,None,None,None,None,None\\n#         logging.info(f\\\"Response: {e}\\\")\\n\"],\"outputs\":[{\"traceback\":[\"  Cell In[91], line 113\\n    \\\"No_of_Successful_Payments\\\":[]\\n                                ^\\nSyntaxError: invalid syntax. Perhaps you forgot a comma?\\n\"],\"ename\":\"SyntaxError\",\"evalue\":\"invalid syntax. Perhaps you forgot a comma? (1714017224.py, line 113)\",\"output_type\":\"error\"}]},{\"cell_type\":\"code\",\"metadata\":{\"id\":\"35695431341_0.2560940273351755\"},\"execution_count\":85,\"source\":[\"main_pipeline(inputs)\"],\"outputs\":[{\"name\":\"stdout\",\"text\":[\"\\n    The DoubleSafe Link Event ID: 731d5c0d72d8c3855284g61ab4987cf1\\n    Detected Face Score: \\\\N\\n    The Verification Method: OTP_SMS\\n    Time of Event Verification: 2023-12-23 09:00:17\\n     \\n\\nMinimum_transaction_date : 2023-03-14 12:56:07\\nReported_transaction_date: 2024-05-11 00:45:44\\nMaximum_transaction_date : 2024-05-18 09:25:39 \\n\\nUDID is:IOS4Vq7nGw6GZOR3Uft5Uc1sSwdg0lVN\\n\"],\"output_type\":\"stream\"},{\"data\":{\"text/plain\":[\"   Ticket_ID Dispute Date Disputed Amount           Transaction Type Recipient Mobile/Bank Number  Amount to be Recovered          Modus Response_Claimed product_type   product_name Terminal_Type   Payment_Result                                    fuzzy_device_id                              UDID                                     Status of UDID               Doublesafe_Event_ID Verification_Method     GMT_Verification Detected_Face_Score  No_of_Successful_Payments\\n0  135102968   2024-05-14         13095.0  Bills Payment via Balance        217020000000000000000                     0.0  Not Disclosed      False Claim    Acquiring  Bills Payment           APP  payment_success  eYOIkneQEouJo1GYmayzDIkPyQmTTAMpAfAsRERBd8FSIW...  IOS4Vq7nGw6GZOR3Uft5Uc1sSwdg0lVN  UDID is part of Device History, as the UDID ba...  731d5c0d72d8c3855284g61ab4987cf1              OTP_SMS 2023-12-23 09:00:17                  \\\\N                         15\"],\"text/html\":[\"<div>\\n<style scoped>\\n    .dataframe tbody tr th:only-of-type {\\n        vertical-align: middle;\\n    }\\n\\n    .dataframe tbody tr th {\\n        vertical-align: top;\\n    }\\n\\n    .dataframe thead th {\\n        text-align: right;\\n    }\\n<\/style>\\n<table border=\\\"1\\\" class=\\\"dataframe\\\">\\n  <thead>\\n    <tr style=\\\"text-align: right;\\\">\\n      <th><\/th>\\n      <th>Ticket_ID<\/th>\\n      <th>Dispute Date<\/th>\\n      <th>Disputed Amount<\/th>\\n      <th>Transaction Type<\/th>\\n      <th>Recipient Mobile/Bank Number<\/th>\\n      <th>Amount to be Recovered<\/th>\\n      <th>Modus<\/th>\\n      <th>Response_Claimed<\/th>\\n      <th>product_type<\/th>\\n      <th>product_name<\/th>\\n      <th>Terminal_Type<\/th>\\n      <th>Payment_Result<\/th>\\n      <th>fuzzy_device_id<\/th>\\n      <th>UDID<\/th>\\n      <th>Status of UDID<\/th>\\n      <th>Doublesafe_Event_ID<\/th>\\n      <th>Verification_Method<\/th>\\n      <th>GMT_Verification<\/th>\\n      <th>Detected_Face_Score<\/th>\\n      <th>No_of_Successful_Payments<\/th>\\n    <\/tr>\\n  <\/thead>\\n  <tbody>\\n    <tr>\\n      <th>0<\/th>\\n      <td>135102968<\/td>\\n      <td>2024-05-14<\/td>\\n      <td>13095.0<\/td>\\n      <td>Bills Payment via Balance<\/td>\\n      <td>217020000000000000000<\/td>\\n      <td>0.0<\/td>\\n      <td>Not Disclosed<\/td>\\n      <td>False Claim<\/td>\\n      <td>Acquiring<\/td>\\n      <td>Bills Payment<\/td>\\n      <td>APP<\/td>\\n      <td>payment_success<\/td>\\n      <td>eYOIkneQEouJo1GYmayzDIkPyQmTTAMpAfAsRERBd8FSIW...<\/td>\\n      <td>IOS4Vq7nGw6GZOR3Uft5Uc1sSwdg0lVN<\/td>\\n      <td>UDID is part of Device History, as the UDID ba...<\/td>\\n      <td>731d5c0d72d8c3855284g61ab4987cf1<\/td>\\n      <td>OTP_SMS<\/td>\\n      <td>2023-12-23 09:00:17<\/td>\\n      <td>\\\\N<\/td>\\n      <td>15<\/td>\\n    <\/tr>\\n  <\/tbody>\\n<\/table>\\n<\/div>\"]},\"metadata\":{},\"execution_count\":86,\"output_type\":\"execute_result\"}]},{\"cell_type\":\"code\",\"metadata\":{\"id\":\"35695431341_0.18985407952859368\"},\"execution_count\":86,\"source\":[\"test = pd.DataFrame([{\\\"mobile_number\\\":9285344745,\\\"reference_id\\\":\\\"20240513121212800100170850501568243\\\",\\\"amount\\\":5716,\\\"date_time_transaction\\\":\\\"2024-05-13 13:28:20\\\",\\\"correlationId\\\":\\\"corr_1730975065989_6798999c-cd2c-4740-9cf5-8fcae0115278\\\"},{\\\"mobile_number\\\":9265626883,\\\"reference_id\\\":\\\"20240511121212800100170573899641646\\\",\\\"amount\\\":13095,\\\"date_time_transaction\\\":\\\"2024-05-11 00:45:44\\\",\\\"correlationId\\\":\\\"corr_1730974768092_9c5003bb-3d96-4e0a-971b-de3b35276b1c\\\"}])\\ntest\"],\"outputs\":[{\"data\":{\"text/plain\":[\"   mobile_number                         reference_id  amount date_time_transaction                                      correlationId\\n0     9285344745  20240513121212800100170850501568243    5716   2024-05-13 13:28:20  corr_1730975065989_6798999c-cd2c-4740-9cf5-8fc...\\n1     9265626883  20240511121212800100170573899641646   13095   2024-05-11 00:45:44  corr_1730974768092_9c5003bb-3d96-4e0a-971b-de3...\"],\"text/html\":[\"<div>\\n<style scoped>\\n    .dataframe tbody tr th:only-of-type {\\n        vertical-align: middle;\\n    }\\n\\n    .dataframe tbody tr th {\\n        vertical-align: top;\\n    }\\n\\n    .dataframe thead th {\\n        text-align: right;\\n    }\\n<\/style>\\n<table border=\\\"1\\\" class=\\\"dataframe\\\">\\n  <thead>\\n    <tr style=\\\"text-align: right;\\\">\\n      <th><\/th>\\n      <th>mobile_number<\/th>\\n      <th>reference_id<\/th>\\n      <th>amount<\/th>\\n      <th>date_time_transaction<\/th>\\n      <th>correlationId<\/th>\\n    <\/tr>\\n  <\/thead>\\n  <tbody>\\n    <tr>\\n      <th>0<\/th>\\n      <td>9285344745<\/td>\\n      <td>20240513121212800100170850501568243<\/td>\\n      <td>5716<\/td>\\n      <td>2024-05-13 13:28:20<\/td>\\n      <td>corr_1730975065989_6798999c-cd2c-4740-9cf5-8fc...<\/td>\\n    <\/tr>\\n    <tr>\\n      <th>1<\/th>\\n      <td>9265626883<\/td>\\n      <td>20240511121212800100170573899641646<\/td>\\n      <td>13095<\/td>\\n      <td>2024-05-11 00:45:44<\/td>\\n      <td>corr_1730974768092_9c5003bb-3d96-4e0a-971b-de3...<\/td>\\n    <\/tr>\\n  <\/tbody>\\n<\/table>\\n<\/div>\"]},\"metadata\":{},\"execution_count\":87,\"output_type\":\"execute_result\"}]},{\"cell_type\":\"code\",\"metadata\":{\"id\":\"35695431341_0.47693127786882705\"},\"execution_count\":88,\"source\":[\"main_pipeline(test)\"],\"outputs\":[{\"name\":\"stdout\",\"text\":[\"\\n    The DoubleSafe Link Event ID: 731d5c0d72d8c3855284g61ab4987cf1\\n    Detected Face Score: \\\\N\\n    The Verification Method: OTP_SMS\\n    Time of Event Verification: 2023-12-23 09:00:17\\n     \\n\\nMinimum_transaction_date : 2023-03-14 12:56:07\\nReported_transaction_date: 2024-05-11 00:45:44\\nMaximum_transaction_date : 2024-05-18 09:25:39 \\n\\nUDID is:IOS4Vq7nGw6GZOR3Uft5Uc1sSwdg0lVN\\n\"],\"output_type\":\"stream\"},{\"data\":{\"text/plain\":[\"   Ticket_ID Dispute Date Disputed Amount           Transaction Type Recipient Mobile/Bank Number  Amount to be Recovered          Modus Response_Claimed product_type   product_name Terminal_Type   Payment_Result                                    fuzzy_device_id                              UDID                                     Status of UDID               Doublesafe_Event_ID Verification_Method     GMT_Verification Detected_Face_Score  No_of_Successful_Payments\\n0  135102968   2024-05-14         13095.0  Bills Payment via Balance        217020000000000000000                     0.0  Not Disclosed      False Claim    Acquiring  Bills Payment           APP  payment_success  eYOIkneQEouJo1GYmayzDIkPyQmTTAMpAfAsRERBd8FSIW...  IOS4Vq7nGw6GZOR3Uft5Uc1sSwdg0lVN  UDID is part of Device History, as the UDID ba...  731d5c0d72d8c3855284g61ab4987cf1              OTP_SMS 2023-12-23 09:00:17                  \\\\N                         15\"],\"text/html\":[\"<div>\\n<style scoped>\\n    .dataframe tbody tr th:only-of-type {\\n        vertical-align: middle;\\n    }\\n\\n    .dataframe tbody tr th {\\n        vertical-align: top;\\n    }\\n\\n    .dataframe thead th {\\n        text-align: right;\\n    }\\n<\/style>\\n<table border=\\\"1\\\" class=\\\"dataframe\\\">\\n  <thead>\\n    <tr style=\\\"text-align: right;\\\">\\n      <th><\/th>\\n      <th>Ticket_ID<\/th>\\n      <th>Dispute Date<\/th>\\n      <th>Disputed Amount<\/th>\\n      <th>Transaction Type<\/th>\\n      <th>Recipient Mobile/Bank Number<\/th>\\n      <th>Amount to be Recovered<\/th>\\n      <th>Modus<\/th>\\n      <th>Response_Claimed<\/th>\\n      <th>product_type<\/th>\\n      <th>product_name<\/th>\\n      <th>Terminal_Type<\/th>\\n      <th>Payment_Result<\/th>\\n      <th>fuzzy_device_id<\/th>\\n      <th>UDID<\/th>\\n      <th>Status of UDID<\/th>\\n      <th>Doublesafe_Event_ID<\/th>\\n      <th>Verification_Method<\/th>\\n      <th>GMT_Verification<\/th>\\n      <th>Detected_Face_Score<\/th>\\n      <th>No_of_Successful_Payments<\/th>\\n    <\/tr>\\n  <\/thead>\\n  <tbody>\\n    <tr>\\n      <th>0<\/th>\\n      <td>135102968<\/td>\\n      <td>2024-05-14<\/td>\\n      <td>13095.0<\/td>\\n      <td>Bills Payment via Balance<\/td>\\n      <td>217020000000000000000<\/td>\\n      <td>0.0<\/td>\\n      <td>Not Disclosed<\/td>\\n      <td>False Claim<\/td>\\n      <td>Acquiring<\/td>\\n      <td>Bills Payment<\/td>\\n      <td>APP<\/td>\\n      <td>payment_success<\/td>\\n      <td>eYOIkneQEouJo1GYmayzDIkPyQmTTAMpAfAsRERBd8FSIW...<\/td>\\n      <td>IOS4Vq7nGw6GZOR3Uft5Uc1sSwdg0lVN<\/td>\\n      <td>UDID is part of Device History, as the UDID ba...<\/td>\\n      <td>731d5c0d72d8c3855284g61ab4987cf1<\/td>\\n      <td>OTP_SMS<\/td>\\n      <td>2023-12-23 09:00:17<\/td>\\n      <td>\\\\N<\/td>\\n      <td>15<\/td>\\n    <\/tr>\\n  <\/tbody>\\n<\/table>\\n<\/div>\"]},\"metadata\":{},\"execution_count\":89,\"output_type\":\"execute_result\"}]},{\"cell_type\":\"markdown\",\"metadata\":{\"id\":\"35695431341_0.5234699228626007\"},\"execution_count\":1,\"source\":[\"# Real main_Pipeline used from the start\"],\"outputs\":[]},{\"cell_type\":\"code\",\"metadata\":{\"id\":\"35695431341_0.15140739361726174\"},\"execution_count\":null,\"source\":[\"# def main_pipeline(inputs):\\n#     input_date_time = pd.to_datetime(inputs[\\\"date_time_transaction\\\"].iloc[-1])\\n#     try:\\n#         ticket_id, dispute_date, dispute_amount, Transaction_type, Recipient_Mobile_Bank_Number, amt_be_recovered, Modus, claim,CXM_data = user_1_CXM(inputs, input_date_time, df_CXM)\\n#         product_type, product_name, new_df = user_1_A_records(inputs,input_date_time,df_A_Records)\\n#         terminal_type,result_pay_result,fuzzy_device_id,login_udid,txn = user_2_terminal_type(inputs,result_logs,dispute_amount) \\n#         if terminal_type == \\\"APP\\\":\\n#             logging.info(\\\"Terminal Type is APP:\\\")\\n#             event_id_doublesafe, face_score, verification_method, gmt_occur_face_verification, filter_safe = user_2_face_score(terminal_type,df_doublesafe,login_udid)\\n#             max_date, min_date,status = user_2_UDID_history_check(df_Logs_UDID,login_udid,input_date_time)   \\n#             number_successful_payment = user_2_successfull_txn(df_logs_inapp,login_udid)\\n       \\n#             return pd.DataFrame({\\\"Ticket_ID\\\" : [ticket_id],\\n#                 \\\"Dispute Date\\\": [dispute_date],\\n#                 \\\"Disputed Amount\\\": [dispute_amount],\\n#                 \\\"Transaction Type\\\": [Transaction_type],\\n#                 \\\"Recipient Mobile/Bank Number\\\": [Recipient_Mobile_Bank_Number],\\n#                 \\\"Amount to be Recovered\\\": [amt_be_recovered],\\n#                 \\\"Modus\\\": [Modus],\\n#                 \\\"Response_Claimed\\\": [claim],\\n#                 \\\"product_type\\\": [product_type],\\n#                 \\\"product_name\\\": [product_name],\\n#                 \\\"Terminal_Type\\\":[terminal_type],\\n#                 \\\"Payment_Result\\\":[result_pay_result],\\n#                 \\\"fuzzy_device_id\\\":[fuzzy_device_id],\\n#                 \\\"UDID\\\":[login_udid],\\n#                 \\\"Status of UDID\\\":[status],\\n#                 \\\"Doublesafe_Event_ID\\\" :[event_id_doublesafe],\\n#                 \\\"Verification_Method \\\":[verification_method],\\n#                 \\\"GMT_Verification\\\":[gmt_occur_face_verification],\\n#                 \\\"Detected_Face_Score\\\":[face_score]  ,\\n#                 \\\"No_of_Successful_Payments\\\":[number_successful_payment]\\n#                 })\\n#         else:\\n#             #user Story 3 starts\\n#             logging.info(\\\"User Story 3\\\")\\n#             OTP_Status = user_story_3_updated(inputs,df_kibana)\\n#             logging.info(\\\"User Story 4\\\")\\n#             # User Story 4 checks!\\n#             df_safe = user_story_4(result_logs,df_Logs_UDID,inputs,fuzzy_device_id) \\n#             face_scores_ = []\\n#             occur_dates = []\\n#             message = \\\" \\\"\\n#             # USer Story 4 checks if Face is detected Else Moves to Kibana logs and merge user story 6(Since Face not detected)\\n            \\n#             # Check if 'ZOLOZ_FACE' exists in the 'result_verification_method' column\\n#             if 'ZOLOZ_FACE' in df_safe[\\\"result_verification_method\\\"].values:\\n#                 # Collect all face scores and occurrence dates as lists\\n#                 face_scores_ = df_safe[\\\"face_score\\\"].tolist()\\n#                 occur_dates = df_safe[\\\"gmt_occur\\\"].tolist()\\n#                 result_dict = {\\\"face_score\\\": face_scores_, \\\"gmt_occur\\\": occur_dates}\\n#                 df_safe = df_safe[df_safe[\\\"result_verification_method\\\"]=='ZOLOZ_FACE']                \\n#             else:\\n#                 kibana_df = df_kibana[(df_kibana[\\\"destinationNumber\\\"]==str(inputs.mobile_number.iloc[-1]))]\\n#                 date_check = inputs[\\\"date_time_transaction\\\"].iloc[-1].split(\\\" \\\")[0]\\n#                 if \\\"MAC_SMS\\\" in kibana_df[kibana_df[\\\"Time\\\"]==date_check][\\\"sourceNumber\\\"].values:\\n#                     message = \\\"There is MAC-SMS\\\"\\n# #                     claim_response = \\\"It has MAC-SMS, hence its a False Claim !\\\"\\n#                 else:\\n#                     message = \\\"NO MAC-SMS\\\"\\n# #                     claim_response = \\\"NO MAC-SMS,hence ATO case !!\\\"\\n\\n                \\n#             # User Story 5:\\n#             if len(face_scores_) > 0:\\n#                 for i,val in enumerate(face_scores_):\\n#                     gmt = occur_dates[i]\\n#                     try:\\n#                         if int(val) >= 63:\\n\\n#                             claim_response = f\\\"Face Match and False Claim!\\\"\\n#                         else:\\n#                             claim_response = f\\\"Not a face Match and ATO case\\\"\\n                        \\n#                     except ValueError:\\n#                         logging.info(f\\\"{gmt}: corresponding face score not detected properly\\\")\\n#             #User story 6\\n#             else:\\n#                 kibana_df = df_kibana[(df_kibana[\\\"destinationNumber\\\"]==str(inputs.mobile_number.iloc[-1]))]\\n#                 date_check = inputs[\\\"date_time_transaction\\\"].iloc[-1].split(\\\" \\\")[0]\\n#                 if \\\"MAC_SMS\\\" in kibana_df[kibana_df[\\\"Time\\\"]==date_check][\\\"sourceNumber\\\"].values:\\n#                     claim_response = \\\"It has MAC-SMS, hence its a False Claim !\\\"\\n#                 else:\\n#                     claim_response = \\\"NO MAC-SMS,hence ATO case !!\\\"\\n\\n#             merchant_id = new_df[\\\"Merchant Trans ID\\\"].iloc[-1]\\n#             A_txn_id = new_df[\\\"A+ Transaction ID\\\"].iloc[-1]  \\n            \\n#             return pd.DataFrame({\\\"Ticket_ID\\\" : [ticket_id],\\n#                 \\\"Dispute Date\\\": [dispute_date],\\n#                 \\\"Disputed Amount\\\": [dispute_amount],\\n#                 \\\"Transaction Type\\\": [Transaction_type],\\n#                 \\\"product_type\\\": [product_type],\\n#                 \\\"product_name\\\": [product_name],\\n#                 \\\"fuzzy_device_id\\\":[fuzzy_device_id],\\n#                 \\\"Terminal_Type\\\":[terminal_type],\\n#                 \\\"OTP_Status\\\":[OTP_Status],\\n#                 \\\"Face_Scores\\\":[face_scores_],\\n#                 \\\"Message\\\":[message],\\n#                 \\\"Response_Claimed\\\":[claim_response],\\n#                 \\\"Merchant_id\\\":[merchant_id],\\n#                 \\\"A+ Transaction ID\\\":[A_txn_id]})\\n        \\n#     except ValueError as e:\\n#         ticket_id, dispute_date, dispute_amount, Transaction_type, Recipient_Mobile_Bank_Number, amt_be_recovered, Modus, claim, = None,None,None,None,None,None,None,None\\n#         logging.info(f\\\"Response: {e}\\\")\\n        \"],\"outputs\":[]},{\"cell_type\":\"code\",\"metadata\":{\"id\":\"35695431341_0.9687816784520948\"},\"execution_count\":33,\"source\":[\"# df_safe\"],\"outputs\":[]},{\"cell_type\":\"markdown\",\"metadata\":{\"id\":\"35695431341_0.3074782038372561\"},\"execution_count\":null,\"source\":[\"# PIPELINE TEST\"],\"outputs\":[]},{\"cell_type\":\"code\",\"metadata\":{\"id\":\"35695431341_0.7752591016159789\"},\"execution_count\":72,\"source\":[\"data = pd.DataFrame([{\\\"mobile_number\\\":9537876847,\\\"reference_id\\\":\\\"20240427121212800110170132367039550\\\",\\\"amount\\\":5898.0,\\\"date_time_transaction\\\":\\\"2024-04-27 01:19:24\\\",\\\"correlationId\\\":\\\"corr_1730888878527_e1f435ac-2fba-482e-9bfb-0f841f2b7632\\\"},{\\\"mobile_number\\\":9537876847,\\\"reference_id\\\":\\\"20240427121212800110170132367039550\\\",\\\"amount\\\":\\\"5898.0\\\",\\\"date_time_transaction\\\":\\\"2024-04-27 01:19:24\\\",\\\"correlationId\\\":\\\"corr_1730888830132_144419f2-5a5c-4861-b607-86f0c293fcd8\\\"},{\\\"mobile_number\\\":9537876847,\\\"reference_id\\\":\\\"20240427121212800110170132367039550\\\",\\\"amount\\\":5898,\\\"date_time_transaction\\\":\\\"2024-04-27 01:19:24\\\",\\\"correlationId\\\":\\\"corr_1730888443039_ef5ac2cd-ba59-4270-8f29-0d4d89b81284\\\"},{\\\"mobile_number\\\":9537876847,\\\"reference_id\\\":\\\"20240427121212800110170132367039550\\\",\\\"amount\\\":5898,\\\"date_time_transaction\\\":\\\"2024-04-27 01:19:24\\\",\\\"correlationId\\\":\\\"corr_1730888384649_ca1c32d2-913f-4f5c-996d-9990aea7fbee\\\"},{\\\"mobile_number\\\":9537876847,\\\"reference_id\\\":\\\"20240427121212800110170132367039550\\\",\\\"amount\\\":5898,\\\"date_time_transaction\\\":\\\"2024-04-27 01:19:24\\\",\\\"correlationId\\\":\\\"corr_1730888106468_ca39a960-f277-4cc8-8106-d3e0de5d25f4\\\"},{\\\"mobile_number\\\":9537876847,\\\"reference_id\\\":\\\"20240427121212800110170132367039550\\\",\\\"amount\\\":5898,\\\"date_time_transaction\\\":\\\"2024-04-27 01:19:24\\\",\\\"correlationId\\\":\\\"corr_1730887852321_5a6bd7a0-892f-465d-b950-d99790a48b33\\\"},{\\\"mobile_number\\\":9537876847,\\\"reference_id\\\":\\\"20240427121212800110170132367039550\\\",\\\"amount\\\":5898,\\\"date_time_transaction\\\":\\\"2024-04-27 01:19:24\\\",\\\"correlationId\\\":\\\"corr_1730887430785_c2f6da4f-1b89-4d75-afed-2a410010aa4d\\\"},{\\\"mobile_number\\\":9535728463,\\\"reference_id\\\":\\\"20240424121212800110170864274019098\\\",\\\"amount\\\":17936,\\\"date_time_transaction\\\":\\\"2024-04-24 09:21:16\\\",\\\"correlationId\\\":\\\"corr_1730887132854_d6ff451e-77aa-4bbb-bef3-ca4b9b3f3e92\\\"},{\\\"mobile_number\\\":9535728463,\\\"reference_id\\\":\\\"20240424121212800110170864274019098\\\",\\\"amount\\\":17936,\\\"date_time_transaction\\\":\\\"2024-04-24 09:21:16\\\",\\\"correlationId\\\":\\\"corr_1730886774224_1dd222ff-5243-459a-a2b3-3be5ef79936c\\\"},{\\\"mobile_number\\\":9535728463,\\\"reference_id\\\":\\\"20240424121212800110170864274019098\\\",\\\"amount\\\":17936,\\\"date_time_transaction\\\":\\\"2024-04-24 09:21:16\\\",\\\"correlationId\\\":\\\"corr_1730886471908_d6774ea0-b4cd-4806-ae6f-6fc21f99d1bf\\\"}])\"],\"outputs\":[]},{\"cell_type\":\"code\",\"metadata\":{\"id\":\"35695431341_0.004112343211343683\"},\"execution_count\":73,\"source\":[\"data\"],\"outputs\":[{\"data\":{\"text/plain\":[\"   mobile_number                         reference_id  amount date_time_transaction                                      correlationId\\n0     9537876847  20240427121212800110170132367039550  5898.0   2024-04-27 01:19:24  corr_1730888878527_e1f435ac-2fba-482e-9bfb-0f8...\\n1     9537876847  20240427121212800110170132367039550  5898.0   2024-04-27 01:19:24  corr_1730888830132_144419f2-5a5c-4861-b607-86f...\\n2     9537876847  20240427121212800110170132367039550    5898   2024-04-27 01:19:24  corr_1730888443039_ef5ac2cd-ba59-4270-8f29-0d4...\\n3     9537876847  20240427121212800110170132367039550    5898   2024-04-27 01:19:24  corr_1730888384649_ca1c32d2-913f-4f5c-996d-999...\\n4     9537876847  20240427121212800110170132367039550    5898   2024-04-27 01:19:24  corr_1730888106468_ca39a960-f277-4cc8-8106-d3e...\\n5     9537876847  20240427121212800110170132367039550    5898   2024-04-27 01:19:24  corr_1730887852321_5a6bd7a0-892f-465d-b950-d99...\\n6     9537876847  20240427121212800110170132367039550    5898   2024-04-27 01:19:24  corr_1730887430785_c2f6da4f-1b89-4d75-afed-2a4...\\n7     9535728463  20240424121212800110170864274019098   17936   2024-04-24 09:21:16  corr_1730887132854_d6ff451e-77aa-4bbb-bef3-ca4...\\n8     9535728463  20240424121212800110170864274019098   17936   2024-04-24 09:21:16  corr_1730886774224_1dd222ff-5243-459a-a2b3-3be...\\n9     9535728463  20240424121212800110170864274019098   17936   2024-04-24 09:21:16  corr_1730886471908_d6774ea0-b4cd-4806-ae6f-6fc...\"],\"text/html\":[\"<div>\\n<style scoped>\\n    .dataframe tbody tr th:only-of-type {\\n        vertical-align: middle;\\n    }\\n\\n    .dataframe tbody tr th {\\n        vertical-align: top;\\n    }\\n\\n    .dataframe thead th {\\n        text-align: right;\\n    }\\n<\/style>\\n<table border=\\\"1\\\" class=\\\"dataframe\\\">\\n  <thead>\\n    <tr style=\\\"text-align: right;\\\">\\n      <th><\/th>\\n      <th>mobile_number<\/th>\\n      <th>reference_id<\/th>\\n      <th>amount<\/th>\\n      <th>date_time_transaction<\/th>\\n      <th>correlationId<\/th>\\n    <\/tr>\\n  <\/thead>\\n  <tbody>\\n    <tr>\\n      <th>0<\/th>\\n      <td>9537876847<\/td>\\n      <td>20240427121212800110170132367039550<\/td>\\n      <td>5898.0<\/td>\\n      <td>2024-04-27 01:19:24<\/td>\\n      <td>corr_1730888878527_e1f435ac-2fba-482e-9bfb-0f8...<\/td>\\n    <\/tr>\\n    <tr>\\n      <th>1<\/th>\\n      <td>9537876847<\/td>\\n      <td>20240427121212800110170132367039550<\/td>\\n      <td>5898.0<\/td>\\n      <td>2024-04-27 01:19:24<\/td>\\n      <td>corr_1730888830132_144419f2-5a5c-4861-b607-86f...<\/td>\\n    <\/tr>\\n    <tr>\\n      <th>2<\/th>\\n      <td>9537876847<\/td>\\n      <td>20240427121212800110170132367039550<\/td>\\n      <td>5898<\/td>\\n      <td>2024-04-27 01:19:24<\/td>\\n      <td>corr_1730888443039_ef5ac2cd-ba59-4270-8f29-0d4...<\/td>\\n    <\/tr>\\n    <tr>\\n      <th>3<\/th>\\n      <td>9537876847<\/td>\\n      <td>20240427121212800110170132367039550<\/td>\\n      <td>5898<\/td>\\n      <td>2024-04-27 01:19:24<\/td>\\n      <td>corr_1730888384649_ca1c32d2-913f-4f5c-996d-999...<\/td>\\n    <\/tr>\\n    <tr>\\n      <th>4<\/th>\\n      <td>9537876847<\/td>\\n      <td>20240427121212800110170132367039550<\/td>\\n      <td>5898<\/td>\\n      <td>2024-04-27 01:19:24<\/td>\\n      <td>corr_1730888106468_ca39a960-f277-4cc8-8106-d3e...<\/td>\\n    <\/tr>\\n    <tr>\\n      <th>5<\/th>\\n      <td>9537876847<\/td>\\n      <td>20240427121212800110170132367039550<\/td>\\n      <td>5898<\/td>\\n      <td>2024-04-27 01:19:24<\/td>\\n      <td>corr_1730887852321_5a6bd7a0-892f-465d-b950-d99...<\/td>\\n    <\/tr>\\n    <tr>\\n      <th>6<\/th>\\n      <td>9537876847<\/td>\\n      <td>20240427121212800110170132367039550<\/td>\\n      <td>5898<\/td>\\n      <td>2024-04-27 01:19:24<\/td>\\n      <td>corr_1730887430785_c2f6da4f-1b89-4d75-afed-2a4...<\/td>\\n    <\/tr>\\n    <tr>\\n      <th>7<\/th>\\n      <td>9535728463<\/td>\\n      <td>20240424121212800110170864274019098<\/td>\\n      <td>17936<\/td>\\n      <td>2024-04-24 09:21:16<\/td>\\n      <td>corr_1730887132854_d6ff451e-77aa-4bbb-bef3-ca4...<\/td>\\n    <\/tr>\\n    <tr>\\n      <th>8<\/th>\\n      <td>9535728463<\/td>\\n      <td>20240424121212800110170864274019098<\/td>\\n      <td>17936<\/td>\\n      <td>2024-04-24 09:21:16<\/td>\\n      <td>corr_1730886774224_1dd222ff-5243-459a-a2b3-3be...<\/td>\\n    <\/tr>\\n    <tr>\\n      <th>9<\/th>\\n      <td>9535728463<\/td>\\n      <td>20240424121212800110170864274019098<\/td>\\n      <td>17936<\/td>\\n      <td>2024-04-24 09:21:16<\/td>\\n      <td>corr_1730886471908_d6774ea0-b4cd-4806-ae6f-6fc...<\/td>\\n    <\/tr>\\n  <\/tbody>\\n<\/table>\\n<\/div>\"]},\"metadata\":{},\"execution_count\":74,\"output_type\":\"execute_result\"}]},{\"cell_type\":\"code\",\"metadata\":{\"id\":\"35695431341_0.9535771284648469\"},\"execution_count\":74,\"source\":[\"data = pd.DataFrame([{\\\"mobile_number\\\":9537876847,\\\"reference_id\\\":\\\"20240427121212800110170132367039550\\\",\\\"amount\\\":5898,\\\"date_time_transaction\\\":\\\"2024-04-27 01:19:24\\\",\\\"correlationId\\\":\\\"corr_1730957564682_b72aee88-ba46-4106-a201-c28681888f35\\\"},{\\\"mobile_number\\\":9537876847,\\\"reference_id\\\":\\\"20240427121212800110170132367039550\\\",\\\"amount\\\":5898,\\\"date_time_transaction\\\":\\\"2024-04-27 01:19:24\\\",\\\"correlationId\\\":\\\"corr_1730957352513_18f3860e-09bd-44b5-ad3e-5017d1f386ee\\\"},{\\\"mobile_number\\\":9537876847,\\\"reference_id\\\":\\\"20240427121212800110170132367039550\\\",\\\"amount\\\":5898,\\\"date_time_transaction\\\":\\\"2024-04-27 01:19:24\\\",\\\"correlationId\\\":\\\"corr_1730902017089_ba7da5a6-ceb2-4ee0-b420-0aff4303bcda\\\"},{\\\"mobile_number\\\":9537876847,\\\"reference_id\\\":\\\"20240427121212800110170132367039550\\\",\\\"amount\\\":5898,\\\"date_time_transaction\\\":\\\"2024-04-27 01:19:24\\\",\\\"correlationId\\\":\\\"corr_1730902012186_6df00477-d681-418e-a4f1-c2d6de812261\\\"},{\\\"mobile_number\\\":9537876847,\\\"reference_id\\\":\\\"20240427121212800110170132367039550\\\",\\\"amount\\\":5898,\\\"date_time_transaction\\\":\\\"2024-04-27 01:19:24\\\",\\\"correlationId\\\":\\\"corr_1730902012186_6df00477-d681-418e-a4f1-c2d6de812261\\\"},{\\\"mobile_number\\\":9537876847,\\\"reference_id\\\":\\\"20240427121212800110170132367039550\\\",\\\"amount\\\":5898,\\\"date_time_transaction\\\":\\\"2024-04-27 01:19:24\\\",\\\"correlationId\\\":\\\"corr_1730901930241_f106dbef-7f0c-4b33-ae5a-8155fde9101a\\\"},{\\\"mobile_number\\\":9537876847,\\\"reference_id\\\":\\\"20240427121212800110170132367039550\\\",\\\"amount\\\":5898,\\\"date_time_transaction\\\":\\\"2024-04-27 01:19:24\\\",\\\"correlationId\\\":\\\"corr_1730901914799_50fe0568-c276-4bac-97ec-ae980a53d0eb\\\"},{\\\"mobile_number\\\":9537876847,\\\"reference_id\\\":\\\"20240427121212800110170132367039550\\\",\\\"amount\\\":5898,\\\"date_time_transaction\\\":\\\"2024-04-27 01:19:24\\\",\\\"correlationId\\\":\\\"corr_1730901249899_d9d7781a-856a-4fa3-b5fc-7766b6303743\\\"},{\\\"mobile_number\\\":9537876847,\\\"reference_id\\\":\\\"20240427121212800110170132367039550\\\",\\\"amount\\\":5898,\\\"date_time_transaction\\\":\\\"2024-04-27 01:19:24\\\",\\\"correlationId\\\":\\\"corr_1730900878175_aafec6de-c402-444b-bea2-6c9ba633e1df\\\"},{\\\"mobile_number\\\":9537876847,\\\"reference_id\\\":\\\"20240427121212800110170132367039550\\\",\\\"amount\\\":5898,\\\"date_time_transaction\\\":\\\"2024-04-27 01:19:24\\\",\\\"correlationId\\\":\\\"corr_1730900130003_b04e3572-b18e-4ca7-9928-4edab7199803\\\"}])\\ndata.info()\"],\"outputs\":[{\"name\":\"stdout\",\"text\":[\"<class 'pandas.core.frame.DataFrame'>\\nRangeIndex: 10 entries, 0 to 9\\nData columns (total 5 columns):\\n #   Column                 Non-Null Count  Dtype \\n---  ------                 --------------  ----- \\n 0   mobile_number          10 non-null     int64 \\n 1   reference_id           10 non-null     object\\n 2   amount                 10 non-null     int64 \\n 3   date_time_transaction  10 non-null     object\\n 4   correlationId          10 non-null     object\\ndtypes: int64(2), object(3)\\nmemory usage: 528.0+ bytes\\n\"],\"output_type\":\"stream\"}]},{\"cell_type\":\"code\",\"metadata\":{\"id\":\"35695431341_0.9282701150710784\"},\"execution_count\":75,\"source\":[\"main_pipeline(data)\"],\"outputs\":[{\"name\":\"stdout\",\"text\":[\"Cohort Value: AND0IzByle2g1oRb5l319Z1g02Id2sSF\\n\"],\"output_type\":\"stream\"},{\"data\":{\"text/plain\":[\"   Ticket_ID Dispute Date Disputed Amount           Transaction Type product_type              product_name                                    fuzzy_device_id Terminal_Type OTP_Status           Face_Scores Message             Response_Claimed                   Merchant_id                    A+ Transaction ID\\n0  132999295   2024-05-01          5898.0  Online Payment via Ggives    Acquiring  Online Payment - Web Pay  cYmIkhBgO92LGAE0B5b4XLBHv+Tx8y3OT0qpploff7JUi0...           WAP     No OTP  [71, 73, 73, 71, 72]          Face Match and False Claim!  AgYAAoszzym5A0Wdlvjpv4TEUCUK  20240427121212800110170132367039550\"],\"text/html\":[\"<div>\\n<style scoped>\\n    .dataframe tbody tr th:only-of-type {\\n        vertical-align: middle;\\n    }\\n\\n    .dataframe tbody tr th {\\n        vertical-align: top;\\n    }\\n\\n    .dataframe thead th {\\n        text-align: right;\\n    }\\n<\/style>\\n<table border=\\\"1\\\" class=\\\"dataframe\\\">\\n  <thead>\\n    <tr style=\\\"text-align: right;\\\">\\n      <th><\/th>\\n      <th>Ticket_ID<\/th>\\n      <th>Dispute Date<\/th>\\n      <th>Disputed Amount<\/th>\\n      <th>Transaction Type<\/th>\\n      <th>product_type<\/th>\\n      <th>product_name<\/th>\\n      <th>fuzzy_device_id<\/th>\\n      <th>Terminal_Type<\/th>\\n      <th>OTP_Status<\/th>\\n      <th>Face_Scores<\/th>\\n      <th>Message<\/th>\\n      <th>Response_Claimed<\/th>\\n      <th>Merchant_id<\/th>\\n      <th>A+ Transaction ID<\/th>\\n    <\/tr>\\n  <\/thead>\\n  <tbody>\\n    <tr>\\n      <th>0<\/th>\\n      <td>132999295<\/td>\\n      <td>2024-05-01<\/td>\\n      <td>5898.0<\/td>\\n      <td>Online Payment via Ggives<\/td>\\n      <td>Acquiring<\/td>\\n      <td>Online Payment - Web Pay<\/td>\\n      <td>cYmIkhBgO92LGAE0B5b4XLBHv+Tx8y3OT0qpploff7JUi0...<\/td>\\n      <td>WAP<\/td>\\n      <td>No OTP<\/td>\\n      <td>[71, 73, 73, 71, 72]<\/td>\\n      <td><\/td>\\n      <td>Face Match and False Claim!<\/td>\\n      <td>AgYAAoszzym5A0Wdlvjpv4TEUCUK<\/td>\\n      <td>20240427121212800110170132367039550<\/td>\\n    <\/tr>\\n  <\/tbody>\\n<\/table>\\n<\/div>\"]},\"metadata\":{},\"execution_count\":76,\"output_type\":\"execute_result\"}]},{\"cell_type\":\"code\",\"metadata\":{\"id\":\"35695431341_0.2178211900852105\"},\"execution_count\":108,\"source\":[\"# fil_num\\n# # filtered_number = result_df[result_df[\\\"user_mobile\\\"]==inputs[\\\"mobile_number\\\"].iloc[-1]]\\n# # filters = filtered_number[filtered_number[\\\"event_amt\\\"] == str(inputs[\\\"amount\\\"].iloc[-1])]\\n# fil\"],\"outputs\":[{\"data\":{\"text/plain\":[\"      user_mobile            gmt_occur terminal_type      event_name result_pay_result result_operation_result event_amt                                    fuzzy_device_id udid event_id pay_method p2p_type                              token_id buyload_recipient p2p_recipient bank_name bank_account_number hash_code os_type app_version brand model login_udid      decision bank_hashcode bank_account     biz_scene merchantname\\n883    9537876847  2024-04-27 01:18:20           WAP    VERIFICATION                \\\\N                    TRUE    5898.0  cYmIkhBgO92LGAE0B5b4XLBHv+Tx8y3OT0qpploff7JUi0...   \\\\N      NaN        NaN       \\\\N  2fe460e3-5d8b-44d0-b825-1a0629dc1c43                \\\\N            \\\\N        \\\\N                 NaN       NaN     NaN         NaN   NaN   NaN        NaN  VERIFICATION            \\\\N           \\\\N  VERIFICATION           \\\\N\\n1059   9537876847  2024-04-27 01:19:24           WAP         PAYMENT   payment_success                    TRUE    5898.0  cYmIkhBgO92LGAE0B5b4XLBHv+Tx8y3OT0qpploff7JUi0...  NaN      NaN        NaN       \\\\N  2fe460e3-5d8b-44d0-b825-1a0629dc1c43                \\\\N            \\\\N        \\\\N                 NaN       NaN     NaN         NaN   NaN   NaN        NaN        ACCEPT            \\\\N           \\\\N            \\\\N       Tiktok\\n1284   9537876847  2024-04-27 01:19:05           WAP  PAYMENT_OPTION                \\\\N                     NaN    5898.0  cYmIkhBgO92LGAE0B5b4XLBHv+Tx8y3OT0qpploff7JUi0...  NaN      NaN        NaN       \\\\N  2fe460e3-5d8b-44d0-b825-1a0629dc1c43                \\\\N            \\\\N        \\\\N                 NaN       NaN     NaN         NaN   NaN   NaN        NaN        ACCEPT            \\\\N           \\\\N            \\\\N       Tiktok\"],\"text/html\":[\"<div>\\n<style scoped>\\n    .dataframe tbody tr th:only-of-type {\\n        vertical-align: middle;\\n    }\\n\\n    .dataframe tbody tr th {\\n        vertical-align: top;\\n    }\\n\\n    .dataframe thead th {\\n        text-align: right;\\n    }\\n<\/style>\\n<table border=\\\"1\\\" class=\\\"dataframe\\\">\\n  <thead>\\n    <tr style=\\\"text-align: right;\\\">\\n      <th><\/th>\\n      <th>user_mobile<\/th>\\n      <th>gmt_occur<\/th>\\n      <th>terminal_type<\/th>\\n      <th>event_name<\/th>\\n      <th>result_pay_result<\/th>\\n      <th>result_operation_result<\/th>\\n      <th>event_amt<\/th>\\n      <th>fuzzy_device_id<\/th>\\n      <th>udid<\/th>\\n      <th>event_id<\/th>\\n      <th>pay_method<\/th>\\n      <th>p2p_type<\/th>\\n      <th>token_id<\/th>\\n      <th>buyload_recipient<\/th>\\n      <th>p2p_recipient<\/th>\\n      <th>bank_name<\/th>\\n      <th>bank_account_number<\/th>\\n      <th>hash_code<\/th>\\n      <th>os_type<\/th>\\n      <th>app_version<\/th>\\n      <th>brand<\/th>\\n      <th>model<\/th>\\n      <th>login_udid<\/th>\\n      <th>decision<\/th>\\n      <th>bank_hashcode<\/th>\\n      <th>bank_account<\/th>\\n      <th>biz_scene<\/th>\\n      <th>merchantname<\/th>\\n    <\/tr>\\n  <\/thead>\\n  <tbody>\\n    <tr>\\n      <th>883<\/th>\\n      <td>9537876847<\/td>\\n      <td>2024-04-27 01:18:20<\/td>\\n      <td>WAP<\/td>\\n      <td>VERIFICATION<\/td>\\n      <td>\\\\N<\/td>\\n      <td>TRUE<\/td>\\n      <td>5898.0<\/td>\\n      <td>cYmIkhBgO92LGAE0B5b4XLBHv+Tx8y3OT0qpploff7JUi0...<\/td>\\n      <td>\\\\N<\/td>\\n      <td>NaN<\/td>\\n      <td>NaN<\/td>\\n      <td>\\\\N<\/td>\\n      <td>2fe460e3-5d8b-44d0-b825-1a0629dc1c43<\/td>\\n      <td>\\\\N<\/td>\\n      <td>\\\\N<\/td>\\n      <td>\\\\N<\/td>\\n      <td>NaN<\/td>\\n      <td>NaN<\/td>\\n      <td>NaN<\/td>\\n      <td>NaN<\/td>\\n      <td>NaN<\/td>\\n      <td>NaN<\/td>\\n      <td>NaN<\/td>\\n      <td>VERIFICATION<\/td>\\n      <td>\\\\N<\/td>\\n      <td>\\\\N<\/td>\\n      <td>VERIFICATION<\/td>\\n      <td>\\\\N<\/td>\\n    <\/tr>\\n    <tr>\\n      <th>1059<\/th>\\n      <td>9537876847<\/td>\\n      <td>2024-04-27 01:19:24<\/td>\\n      <td>WAP<\/td>\\n      <td>PAYMENT<\/td>\\n      <td>payment_success<\/td>\\n      <td>TRUE<\/td>\\n      <td>5898.0<\/td>\\n      <td>cYmIkhBgO92LGAE0B5b4XLBHv+Tx8y3OT0qpploff7JUi0...<\/td>\\n      <td>NaN<\/td>\\n      <td>NaN<\/td>\\n      <td>NaN<\/td>\\n      <td>\\\\N<\/td>\\n      <td>2fe460e3-5d8b-44d0-b825-1a0629dc1c43<\/td>\\n      <td>\\\\N<\/td>\\n      <td>\\\\N<\/td>\\n      <td>\\\\N<\/td>\\n      <td>NaN<\/td>\\n      <td>NaN<\/td>\\n      <td>NaN<\/td>\\n      <td>NaN<\/td>\\n      <td>NaN<\/td>\\n      <td>NaN<\/td>\\n      <td>NaN<\/td>\\n      <td>ACCEPT<\/td>\\n      <td>\\\\N<\/td>\\n      <td>\\\\N<\/td>\\n      <td>\\\\N<\/td>\\n      <td>Tiktok<\/td>\\n    <\/tr>\\n    <tr>\\n      <th>1284<\/th>\\n      <td>9537876847<\/td>\\n      <td>2024-04-27 01:19:05<\/td>\\n      <td>WAP<\/td>\\n      <td>PAYMENT_OPTION<\/td>\\n      <td>\\\\N<\/td>\\n      <td>NaN<\/td>\\n      <td>5898.0<\/td>\\n      <td>cYmIkhBgO92LGAE0B5b4XLBHv+Tx8y3OT0qpploff7JUi0...<\/td>\\n      <td>NaN<\/td>\\n      <td>NaN<\/td>\\n      <td>NaN<\/td>\\n      <td>\\\\N<\/td>\\n      <td>2fe460e3-5d8b-44d0-b825-1a0629dc1c43<\/td>\\n      <td>\\\\N<\/td>\\n      <td>\\\\N<\/td>\\n      <td>\\\\N<\/td>\\n      <td>NaN<\/td>\\n      <td>NaN<\/td>\\n      <td>NaN<\/td>\\n      <td>NaN<\/td>\\n      <td>NaN<\/td>\\n      <td>NaN<\/td>\\n      <td>NaN<\/td>\\n      <td>ACCEPT<\/td>\\n      <td>\\\\N<\/td>\\n      <td>\\\\N<\/td>\\n      <td>\\\\N<\/td>\\n      <td>Tiktok<\/td>\\n    <\/tr>\\n  <\/tbody>\\n<\/table>\\n<\/div>\"]},\"metadata\":{},\"execution_count\":109,\"output_type\":\"execute_result\"}]},{\"cell_type\":\"code\",\"metadata\":{\"id\":\"35695431341_0.6163067289250383\"},\"execution_count\":99,\"source\":[\"str(float(data[\\\"amount\\\"].iloc[-1]))\"],\"outputs\":[{\"data\":{\"text/plain\":\"'5898.0'\"},\"metadata\":{},\"execution_count\":100,\"output_type\":\"execute_result\"}]},{\"cell_type\":\"code\",\"metadata\":{\"id\":\"35695431341_0.5308996555054082\"},\"execution_count\":69,\"source\":[\"# dt = pd.DataFrame([[{\\\"mobile_number\\\":9285344745,\\\"reference_id\\\":\\\"20240513121212800100170850501568243\\\",\\\"amount\\\":5716.0,\\\"date_time_transaction\\\":\\\"2024-05-13 13:28:20\\\",\\\"correlationId\\\":\\\"corr_1730975065989_6798999c-cd2c-4740-9cf5-8fcae0115278\\\"},{\\\"mobile_number\\\":9265626883,\\\"reference_id\\\":\\\"20240511121212800100170573899641646\\\",\\\"amount\\\":13095,\\\"date_time_transaction\\\":\\\"2024-05-11 00:45:44\\\",\\\"correlationId\\\":\\\"corr_1730974768092_9c5003bb-3d96-4e0a-971b-de3b35276b1c\\\"}]])\\n# # user_1_A_records(dt,input_date_time,df_A_Records)\\n# # matching_records,filtered_df\\n# main_pipeline(dt)\"],\"outputs\":[{\"traceback\":[\"---------------------------------------------------------------------------\",\"KeyError                                  Traceback (most recent call last)\",\"Cell In[70], line 4\\n      1 dt = pd.DataFrame([[{\\\"mobile_number\\\":9285344745,\\\"reference_id\\\":\\\"20240513121212800100170850501568243\\\",\\\"amount\\\":5716.0,\\\"date_time_transaction\\\":\\\"2024-05-13 13:28:20\\\",\\\"correlationId\\\":\\\"corr_1730975065989_6798999c-cd2c-4740-9cf5-8fcae0115278\\\"},{\\\"mobile_number\\\":9265626883,\\\"reference_id\\\":\\\"20240511121212800100170573899641646\\\",\\\"amount\\\":13095,\\\"date_time_transaction\\\":\\\"2024-05-11 00:45:44\\\",\\\"correlationId\\\":\\\"corr_1730974768092_9c5003bb-3d96-4e0a-971b-de3b35276b1c\\\"}]])\\n      2 # user_1_A_records(dt,input_date_time,df_A_Records)\\n      3 # matching_records,filtered_df\\n----> 4 main_pipeline(dt)\\n\",\"Cell In[45], line 2, in main_pipeline(inputs)\\n      1 def main_pipeline(inputs):\\n----> 2     input_date_time = pd.to_datetime(inputs[\\\"date_time_transaction\\\"].iloc[-1])\\n      4     ticket_id, dispute_date, dispute_amount, Transaction_type, Recipient_Mobile_Bank_Number, amt_be_recovered, Modus, claim,CXM_data = user_1_CXM(inputs, input_date_time, df_CXM)\\n      5     product_type, product_name, new_df = user_1_A_records(inputs,input_date_time,df_A_Records)\\n\",\"File /opt/conda/lib/python3.10/site-packages/pandas/core/frame.py:3761, in DataFrame.__getitem__(self, key)\\n   3759 if self.columns.nlevels > 1:\\n   3760     return self._getitem_multilevel(key)\\n-> 3761 indexer = self.columns.get_loc(key)\\n   3762 if is_integer(indexer):\\n   3763     indexer = [indexer]\\n\",\"File /opt/conda/lib/python3.10/site-packages/pandas/core/indexes/range.py:349, in RangeIndex.get_loc(self, key)\\n    347         raise KeyError(key) from err\\n    348 if isinstance(key, Hashable):\\n--> 349     raise KeyError(key)\\n    350 self._check_indexing_error(key)\\n    351 raise KeyError(key)\\n\",\"KeyError: 'date_time_transaction'\"],\"ename\":\"KeyError\",\"evalue\":\"'date_time_transaction'\",\"output_type\":\"error\"}]}],\"metadata\":{},\"nbformat\":4,\"nbformat_minor\":2}}","autoMLs":null,"scripts":null,"notebook":{"mongoQL":null,"updatedBy":15002175981,"data":"{\"datasets\":[{\"queryservicename\":\"CXM Endorsement_Data\",\"id\":26462314087,\"type\":\"Data Sandbox\",\"uuid\":\"11111727249579788\",\"extenstion\":\"xlsx\",\"fileType\":\"\",\"dataSourceType\":\"xlsx\",\"isSelected\":true},{\"queryservicename\":\"Logs_Fuzzy\",\"id\":26463438867,\"type\":\"Data Sandbox\",\"uuid\":\"11111727249902767\",\"extenstion\":\"xlsx\",\"fileType\":\"\",\"dataSourceType\":\"xlsx\",\"isSelected\":true},{\"queryservicename\":\"Logs_UDID\",\"id\":26463613539,\"type\":\"Data Sandbox\",\"uuid\":\"11111727249921283\",\"extenstion\":\"xlsx\",\"fileType\":\"\",\"dataSourceType\":\"xlsx\",\"isSelected\":true},{\"queryservicename\":\"logs_device_link_doublesafe\",\"id\":26463863922,\"type\":\"Data Sandbox\",\"uuid\":\"11111727249973467\",\"extenstion\":\"xlsx\",\"fileType\":\"\",\"dataSourceType\":\"xlsx\",\"isSelected\":true},{\"queryservicename\":\"logs_kibana\",\"id\":26463680392,\"type\":\"Data Sandbox\",\"uuid\":\"11111727250122271\",\"extenstion\":\"xlsx\",\"fileType\":\"\",\"dataSourceType\":\"xlsx\",\"isSelected\":true},{\"queryservicename\":\"logs_sms\",\"id\":26463798752,\"type\":\"Data Sandbox\",\"uuid\":\"11111727250139530\",\"extenstion\":\"xlsx\",\"fileType\":\"\",\"dataSourceType\":\"xlsx\",\"isSelected\":true},{\"queryservicename\":\"logs_inapp\",\"id\":26463965443,\"type\":\"Data Sandbox\",\"uuid\":\"11111727250179094\",\"extenstion\":\"xlsx\",\"fileType\":\"\",\"dataSourceType\":\"xlsx\",\"isSelected\":true},{\"queryservicename\":\"logs_web\",\"id\":26464049678,\"type\":\"Data Sandbox\",\"uuid\":\"11111727250196261\",\"extenstion\":\"xlsx\",\"fileType\":\"\",\"dataSourceType\":\"xlsx\",\"isSelected\":true},{\"queryservicename\":\"A+Records_Test Data\",\"id\":26459327246,\"type\":\"Data Sandbox\",\"uuid\":\"11111727249094446\",\"extenstion\":\"xlsx\",\"fileType\":\"\",\"dataSourceType\":\"xlsx\",\"isSelected\":true}],\"uncheckeddatasets\":[],\"code\":[{\"id\":\"0_0.5344366003691956\",\"conflict\":\"false\",\"code\":\"import pandas as pd\\nimport numpy as np\\nimport matplotlib.pyplot as plt\\nimport logging \\nimport re\\nfrom datetime import datetime\\nimport json\\nfrom Notebook.DSNotebook.NotebookExecutor import NotebookExecutor\\nnb = NotebookExecutor()\",\"count\":1,\"mode\":\"preview\",\"type\":\"code\",\"hover\":true,\"interrupt\":false,\"warning\":false,\"outputArray\":[],\"lineNumber\":false,\"laodmodel\":false,\"pre_cell_id\":0,\"is_pre_cell\":false,\"succORerr\":true,\"expand\":false,\"outputexpand\":false,\"readonly\":false,\"markDowns\":false,\"loader\":false,\"image\":\"\",\"error\":\"\",\"result\":\"\",\"algorithms\":\"\",\"semicolon\":\"\",\"cputimes\":\"\",\"showcputime\":false,\"secret\":[]},{\"id\":\"0_0.6959620921153264\",\"conflict\":\"false\",\"code\":\"df_CXM = nb.get_data('11111727249579788', '@SYS.USERID', 'True', {}, [])\\ndf_A_Records = nb.get_data('11111727249094446', '@SYS.USERID', 'True', {}, [])\\ndf_logs_inapp = nb.get_data('11111727250179094', '@SYS.USERID', 'True', {}, [])\\ndf_Logs_Fuzzy = nb.get_data('11111727249902767', '@SYS.USERID', 'True', {}, [])\\ndf_Logs_UDID = nb.get_data('11111727249921283', '@SYS.USERID', 'True', {}, [])\\ndf_logs_sms = nb.get_data('11111727250139530', '@SYS.USERID', 'True', {}, [])\\ndf_kibana = nb.get_data('11111727250122271', '@SYS.USERID', 'True', {}, [])\\ndf_doublesafe = nb.get_data('11111727249973467', '@SYS.USERID', 'True', {}, [])\\ndf_logs_web = nb.get_data('11111727250196261', '@SYS.USERID', 'True', {}, [])\\n\",\"count\":2,\"mode\":\"preview\",\"type\":\"code\",\"hover\":true,\"interrupt\":false,\"warning\":false,\"outputArray\":[],\"lineNumber\":false,\"laodmodel\":false,\"pre_cell_id\":0,\"is_pre_cell\":false,\"succORerr\":true,\"expand\":false,\"outputexpand\":false,\"readonly\":false,\"markDowns\":false,\"loader\":false,\"image\":\"\",\"error\":\"\",\"result\":\"\",\"algorithms\":\"\",\"semicolon\":\"\",\"cputimes\":\"\",\"showcputime\":false,\"secret\":[]},{\"id\":\"0_0.7615903578949648\",\"conflict\":\"false\",\"code\":\"**Some data pre-processing**\",\"count\":3,\"mode\":\"preview\",\"type\":\"markdown\",\"hover\":true,\"interrupt\":false,\"warning\":false,\"outputArray\":[],\"lineNumber\":false,\"laodmodel\":false,\"pre_cell_id\":0,\"is_pre_cell\":false,\"succORerr\":true,\"expand\":false,\"outputexpand\":false,\"readonly\":false,\"markDowns\":false,\"loader\":false,\"image\":\"\",\"error\":\"\",\"algorithms\":\"\",\"semicolon\":\"\",\"cputimes\":\"\",\"showcputime\":false,\"secret\":[],\"result\":\"\"},{\"id\":\"0_0.4079390879261222\",\"conflict\":\"false\",\"code\":\"df_CXM[\\\"Date_Transaction\\\"] = pd.to_datetime(pd.to_datetime(df_CXM[\\\"Date and Time of Transaction\\\"]).dt.date)\\ndf_CXM['Date and Time of Transaction'] = pd.to_datetime(df_CXM['Date and Time of Transaction'])\\ndf_CXM.rename({\\\"Complainant's\\\\nMobile# (Test Numbers)\\\":\\\"mobile_number\\\"},axis=1,inplace=True)\\ndf_kibana = df_kibana[~(df_kibana[\\\"Time\\\"]==\\\"Time\\\")]\",\"count\":4,\"mode\":\"preview\",\"type\":\"code\",\"hover\":true,\"interrupt\":false,\"warning\":false,\"outputArray\":[],\"lineNumber\":false,\"laodmodel\":false,\"pre_cell_id\":0,\"is_pre_cell\":false,\"succORerr\":true,\"expand\":false,\"outputexpand\":false,\"readonly\":false,\"markDowns\":false,\"loader\":false,\"image\":\"\",\"error\":\"\",\"result\":\"\",\"algorithms\":\"\",\"semicolon\":\"\",\"cputimes\":\"\",\"showcputime\":false,\"secret\":[]},{\"id\":\"0_0.5115127751704645\",\"conflict\":\"false\",\"code\":\"# change the Transaction Date format of A_Records:\\ndef change_dt_format(date):\\n    date_obj = datetime.strptime(date, '%b %d %Y %H:%M:%S')\\n    formatted_date = date_obj.strftime('%Y-%m-%d %H:%M:%S')\\n    return formatted_date\\ndef currency_coversion(currency_string):\\n    match = re.search(r'[\\\\d,]+\\\\.?\\\\d*', currency_string)\\n    if match:\\n        numeric_value = float(match.group().replace(',', ''))\\n    return numeric_value\\ndef change_date_format(date):\\n    date_obj = datetime.strptime(date, \\\"%b %d, %Y @ %H:%M:%S.%f\\\")\\n    formatted_date = date_obj.strftime(\\\"%Y-%m-%d\\\")\\n    return formatted_date\\n\\ndf_A_Records[\\\"Transaction Date\\\"] = df_A_Records[\\\"Transaction Date\\\"].apply(change_dt_format)\\ndf_A_Records[\\\"Transaction Date\\\"] = pd.to_datetime(df_A_Records[\\\"Transaction Date\\\"])\\ndf_kibana[\\\"Time\\\"] = df_kibana[\\\"Time\\\"].apply(change_date_format)\\ndf_A_Records[\\\"Amount\\\"] = df_A_Records[\\\"Amount\\\"].apply(currency_coversion) \\ndf_A_Records[\\\"Service Fee\\\"] = df_A_Records[\\\"Service Fee\\\"].apply(currency_coversion) \",\"count\":5,\"mode\":\"preview\",\"type\":\"code\",\"hover\":true,\"interrupt\":false,\"warning\":false,\"outputArray\":[],\"lineNumber\":false,\"laodmodel\":false,\"pre_cell_id\":0,\"is_pre_cell\":false,\"succORerr\":true,\"expand\":false,\"outputexpand\":false,\"readonly\":false,\"markDowns\":false,\"loader\":false,\"image\":\"\",\"error\":\"\",\"result\":\"\",\"algorithms\":\"\",\"semicolon\":\"\",\"cputimes\":\"\",\"showcputime\":false,\"secret\":[]},{\"id\":\"0_0.053290117168534934\",\"conflict\":\"false\",\"code\":\"df_logs_web.rename({\\\"result_event_result\\\":\\\"result_pay_result\\\"},axis=1,inplace=True)\\nresult_logs = pd.concat([df_logs_inapp,df_logs_web],axis=0,ignore_index=True)\\nresult_logs[\\\"event_amt\\\"] = result_logs[\\\"event_amt\\\"].astype(str)\",\"count\":6,\"mode\":\"preview\",\"type\":\"code\",\"hover\":true,\"interrupt\":false,\"warning\":false,\"outputArray\":[],\"lineNumber\":false,\"laodmodel\":false,\"pre_cell_id\":0,\"is_pre_cell\":false,\"succORerr\":true,\"expand\":false,\"outputexpand\":false,\"readonly\":false,\"markDowns\":false,\"loader\":false,\"image\":\"\",\"error\":\"\",\"result\":\"\",\"algorithms\":\"\",\"semicolon\":\"\",\"cputimes\":\"\",\"showcputime\":false,\"secret\":[]},{\"id\":\"0_0.9717017969085109\",\"conflict\":\"false\",\"code\":\"** * Test Cases: (Several user inputs with and without APP terminal type)**\",\"count\":7,\"mode\":\"preview\",\"type\":\"markdown\",\"hover\":true,\"interrupt\":false,\"warning\":false,\"outputArray\":[],\"lineNumber\":false,\"laodmodel\":false,\"pre_cell_id\":0,\"is_pre_cell\":false,\"succORerr\":true,\"expand\":false,\"outputexpand\":false,\"readonly\":false,\"markDowns\":false,\"loader\":false,\"image\":\"\",\"error\":\"\",\"algorithms\":\"\",\"semicolon\":\"\",\"cputimes\":\"\",\"showcputime\":false,\"secret\":[],\"result\":\"\"},{\"id\":\"0_0.560689664229562\",\"conflict\":\"false\",\"code\":\"# (with NOT APP)!\\n\\n# inputs = pd.DataFrame({\\\"mobile_number\\\": [9535728463], \\\"reference_id\\\": [20240424121212800110170864274019098], \\\"amount\\\":[17936.0], \\\"date_time_transaction\\\": [\\\"2024-04-24 09:21:16\\\"]})\\n\\n# inputs = pd.DataFrame({\\\"mobile_number\\\": [9537876847], \\\"reference_id\\\": [20240427121212800110170132367039550], \\\"amount\\\":[5898.0], \\\"date_time_transaction\\\": [\\\"2024-04-27 01:19:24\\\"]})\\n\\n# (with APP Inputs)!!\\n\\n# inputs = pd.DataFrame({\\\"mobile_number\\\": [9285344745], \\\"reference_id\\\": [20240513121212800100170850501568243], \\\"amount\\\":[5716.00], \\\"date_time_transaction\\\": [\\\"2024-05-13 13:28:20\\\"]})\\n\\ninputs = pd.DataFrame({\\\"mobile_number\\\": [9265626883], \\\"reference_id\\\": [20240511121212800100170573899641646], \\\"amount\\\":[13095.0], \\\"date_time_transaction\\\": [\\\"2024-05-11 00:45:44\\\"]})\\n\\ninput_date_time = pd.to_datetime(inputs[\\\"date_time_transaction\\\"].iloc[-1])\\n\",\"count\":8,\"mode\":\"preview\",\"type\":\"code\",\"hover\":true,\"interrupt\":false,\"warning\":false,\"outputArray\":[],\"lineNumber\":false,\"laodmodel\":false,\"pre_cell_id\":0,\"is_pre_cell\":false,\"succORerr\":true,\"expand\":false,\"outputexpand\":false,\"readonly\":false,\"markDowns\":false,\"loader\":false,\"image\":\"\",\"error\":\"\",\"result\":\"\",\"algorithms\":\"\",\"semicolon\":\"\",\"cputimes\":\"\",\"showcputime\":false,\"secret\":[]},{\"id\":\"0_0.7685617141107768\",\"conflict\":\"false\",\"code\":\"user_inputs\",\"count\":9,\"mode\":\"preview\",\"type\":\"markdown\",\"hover\":true,\"interrupt\":false,\"warning\":false,\"outputArray\":[],\"lineNumber\":false,\"laodmodel\":false,\"pre_cell_id\":0,\"is_pre_cell\":false,\"succORerr\":true,\"expand\":false,\"outputexpand\":false,\"readonly\":false,\"markDowns\":false,\"loader\":false,\"image\":\"\",\"error\":\"\",\"algorithms\":\"\",\"semicolon\":\"\",\"cputimes\":\"\",\"showcputime\":false,\"secret\":[],\"result\":\"\"},{\"id\":\"0_0.03081909411919126\",\"conflict\":\"false\",\"code\":\"**#user_story_1 starts**\",\"count\":10,\"mode\":\"preview\",\"type\":\"markdown\",\"hover\":true,\"interrupt\":false,\"warning\":false,\"outputArray\":[],\"lineNumber\":false,\"laodmodel\":false,\"pre_cell_id\":0,\"is_pre_cell\":false,\"succORerr\":true,\"expand\":false,\"outputexpand\":false,\"readonly\":false,\"markDowns\":false,\"loader\":false,\"image\":\"\",\"error\":\"\",\"algorithms\":\"\",\"semicolon\":\"\",\"cputimes\":\"\",\"showcputime\":false,\"secret\":[],\"result\":\"\"},{\"id\":\"0_0.37267286901746255\",\"conflict\":\"false\",\"code\":\"- After user inputs\\n- Search for Transaction\\n- Identify if Transaction Exist!\\n- Get Details if Transaction Exist!\\n- Else inform user Transaction Doesn't Exist accordingly!\",\"count\":11,\"mode\":\"preview\",\"type\":\"markdown\",\"hover\":true,\"interrupt\":false,\"warning\":false,\"outputArray\":[],\"lineNumber\":false,\"laodmodel\":false,\"pre_cell_id\":0,\"is_pre_cell\":false,\"succORerr\":true,\"expand\":false,\"outputexpand\":false,\"readonly\":false,\"markDowns\":false,\"loader\":false,\"image\":\"\",\"error\":\"\",\"algorithms\":\"\",\"semicolon\":\"\",\"cputimes\":\"\",\"showcputime\":false,\"secret\":[],\"result\":\"\"},{\"id\":\"0_0.6705458104487438\",\"conflict\":\"false\",\"code\":\"def user_1_CXM(inputs, input_date_time, df_CXM):\\n    \\n    if inputs[\\\"mobile_number\\\"].iloc[-1] not in df_CXM[\\\"mobile_number\\\"].values:\\n        raise ValueError(\\\"Mobile Number not identified for the transaction\\\")\\n\\n    # Filter DataFrame by mobile number\\n    filtered_df = df_CXM[df_CXM[\\\"mobile_number\\\"] == inputs[\\\"mobile_number\\\"].iloc[-1]]\\n\\n    # Ensure the input_date_time exists for that mobile number\\n    if input_date_time not in filtered_df[\\\"Date and Time of Transaction\\\"].values:\\n        raise ValueError(\\\"Transaction doesn't exist for the given date and time on this mobile number\\\")\\n\\n    # Extract the relevant row based on the date and time of transaction\\n    filtered_df_update = filtered_df[filtered_df[\\\"Date and Time of Transaction\\\"] == input_date_time]\\n    \\n    # Ensure disputed amount is present and then filter accordingly    \\n    if inputs[\\\"amount\\\"].iloc[-1] not in filtered_df_update[\\\"Disputed Amount\\\"].values:\\n        raise ValueError(\\\"Transaction Amount not Present\\\")\\n\\n    \\n    CXM_data = filtered_df_update[filtered_df_update[\\\"Disputed Amount\\\"] == inputs[\\\"amount\\\"].iloc[-1]]\\n\\n\\n    ticket_id = CXM_data[\\\"Ticket ID\\\"].iloc[-1]\\n    dispute_date = CXM_data[\\\"Date_Coverage\\\"].iloc[-1]\\n    dispute_amount = CXM_data[\\\"Disputed Amount\\\"].iloc[-1]\\n    Transaction_type = CXM_data[\\\"Type of Transaction\\\"].iloc[-1]\\n    Recipient_Mobile_Bank_Number = CXM_data[\\\"Recipient Mobile#/Bank Account# (Test Numbers)\\\"].iloc[-1]\\n    amt_be_recovered = CXM_data[\\\"Amount that can be recovered\\\"].iloc[-1]\\n    Modus = CXM_data[\\\"Modus\\\"].iloc[-1]\\n    \\n    dispute_amount = str(dispute_amount)\\n    claim = \\\"False Claim\\\" if input_date_time < dispute_date else \\\"ATO\\\"\\n#     dispute_amount = str(dispute_amount)\\n    return ticket_id, dispute_date, dispute_amount, Transaction_type, Recipient_Mobile_Bank_Number, amt_be_recovered, Modus, claim,CXM_data\\n\",\"count\":12,\"mode\":\"preview\",\"type\":\"code\",\"hover\":true,\"interrupt\":false,\"warning\":false,\"outputArray\":[],\"lineNumber\":false,\"laodmodel\":false,\"pre_cell_id\":0,\"is_pre_cell\":false,\"succORerr\":true,\"expand\":false,\"outputexpand\":false,\"readonly\":false,\"markDowns\":false,\"loader\":false,\"image\":\"\",\"error\":\"\",\"result\":\"\",\"algorithms\":\"\",\"semicolon\":\"\",\"cputimes\":\"\",\"showcputime\":false,\"secret\":[]},{\"id\":\"0_0.10186432993966776\",\"conflict\":\"false\",\"code\":\"def user_1_A_records(inputs,input_date_time,df_A_Records):\\n    try:\\n        # Check if the mobile number exists in 'Source (Test Data)'\\n        if inputs[\\\"mobile_number\\\"].iloc[-1] in df_A_Records[\\\"Source (Test Data)\\\"].values:\\n            logging.info(\\\"mobile ok\\\")\\n            # Check if input_date_time exists for the corresponding mobile number\\n            global matching_records\\n            global filtered_df\\n            \\n            matching_records = df_A_Records[df_A_Records[\\\"Source (Test Data)\\\"] == inputs[\\\"mobile_number\\\"].iloc[-1]]\\n            if input_date_time in matching_records[\\\"Transaction Date\\\"].values:\\n                logging.info(\\\"transaction ok\\\")\\n                # Filter records by both mobile number and date\\n                filtered_df = matching_records[matching_records[\\\"Transaction Date\\\"] == input_date_time]\\n                filtered_df[\\\"A+ Transaction ID\\\"] = filtered_df[\\\"A+ Transaction ID\\\"].astype('str')\\n                logging.info(\\\"filtered df\\\")\\n                # Check if reference ID is there or not and filter accordingly\\n                if str(inputs[\\\"reference_id\\\"].iloc[-1]) in filtered_df[\\\"A+ Transaction ID\\\"].values:\\n                    logging.info(\\\"A+ ok\\\")\\n                    global new_df\\n                    new_df = filtered_df[filtered_df[\\\"A+ Transaction ID\\\"] == str(inputs[\\\"reference_id\\\"].iloc[-1])]\\n\\n                    # Verify the amount and status as well\\n                    if inputs[\\\"amount\\\"].iloc[-1] == new_df[\\\"Amount\\\"].iloc[-1]:\\n                        logging.info(\\\"AMOUNT OK!\\\")\\n                        if new_df[\\\"Transaction Status\\\"].iloc[-1] == 'SUCCESS':\\n                            logging.info(\\\"Transaction Exists!\\\")\\n                            # Extract relevant information\\n                            product_type = new_df[\\\"Product Type\\\"].iloc[-1]\\n                            product_name = new_df[\\\"Product Name\\\"].iloc[-1]\\n                        else:\\n                            raise ValueError(\\\"Transaction was not a SUCCESS\\\")\\n                    else:\\n                        raise ValueError(\\\"Amount mismatch\\\")\\n                else:\\n                    raise KeyError(\\\"Reference ID not found\\\")\\n            else:\\n                raise KeyError(\\\"Transaction doesn't Exist for Specific Date and Time on this Mobile Number\\\")\\n        else:\\n            raise KeyError(f\\\"Transaction corresponding to {inputs['mobile_number'].iloc[-1]} not present in A+ Records\\\")\\n\\n    except KeyError as e:\\n        print(f\\\"Response: {e}\\\")\\n        return None, None, None  # Returning None values if key checks fail\\n    except ValueError as e:\\n        print(f\\\"Response: {e}\\\")\\n        return None, None, None  # Returning None values if amount/status checks fail\\n    except Exception as e:\\n        print(f\\\"Response: {e}\\\")\\n        return None, None, None  # Catch-all for any other unexpected errors\\n\\n    return product_type, product_name, new_df\",\"count\":13,\"mode\":\"preview\",\"type\":\"code\",\"hover\":true,\"interrupt\":false,\"warning\":false,\"outputArray\":[],\"lineNumber\":false,\"laodmodel\":false,\"pre_cell_id\":0,\"is_pre_cell\":false,\"succORerr\":true,\"expand\":false,\"outputexpand\":false,\"readonly\":false,\"markDowns\":false,\"loader\":false,\"image\":\"\",\"error\":\"\",\"result\":\"\",\"algorithms\":\"\",\"semicolon\":\"\",\"cputimes\":\"\",\"showcputime\":false,\"secret\":[]},{\"id\":\"0_0.28216807326688564\",\"conflict\":\"false\",\"code\":\"**#user_story_2**\",\"count\":14,\"mode\":\"preview\",\"type\":\"markdown\",\"hover\":true,\"interrupt\":false,\"warning\":false,\"outputArray\":[],\"lineNumber\":false,\"laodmodel\":false,\"pre_cell_id\":0,\"is_pre_cell\":false,\"succORerr\":true,\"expand\":false,\"outputexpand\":false,\"readonly\":false,\"markDowns\":false,\"loader\":false,\"image\":\"\",\"error\":\"\",\"algorithms\":\"\",\"semicolon\":\"\",\"cputimes\":\"\",\"showcputime\":false,\"secret\":[],\"result\":\"\"},{\"id\":\"35695431341_0.3167900858342261\",\"conflict\":\"false\",\"code\":\"matching_records\",\"count\":15,\"mode\":\"preview\",\"type\":\"code\",\"hover\":true,\"interrupt\":false,\"warning\":false,\"outputArray\":[],\"lineNumber\":false,\"laodmodel\":false,\"pre_cell_id\":0,\"is_pre_cell\":false,\"succORerr\":true,\"expand\":false,\"outputexpand\":false,\"readonly\":false,\"markDowns\":false,\"loader\":false,\"image\":\"\",\"error\":\"\",\"result\":\"\",\"algorithms\":\"\",\"semicolon\":\"\",\"cputimes\":\"\",\"showcputime\":false,\"secret\":[]},{\"id\":\"0_0.5823539292082447\",\"conflict\":\"false\",\"code\":\"If transaction exists(Transaction Type is not None) in A+ Records then fetch Terminal Type from the next user_story_2:\",\"count\":16,\"mode\":\"preview\",\"type\":\"markdown\",\"hover\":true,\"interrupt\":false,\"warning\":false,\"outputArray\":[],\"lineNumber\":false,\"laodmodel\":false,\"pre_cell_id\":0,\"is_pre_cell\":false,\"succORerr\":true,\"expand\":false,\"outputexpand\":false,\"readonly\":false,\"markDowns\":false,\"loader\":false,\"image\":\"\",\"error\":\"\",\"algorithms\":\"\",\"semicolon\":\"\",\"cputimes\":\"\",\"showcputime\":false,\"secret\":[],\"result\":\"\"},{\"id\":\"0_0.08607706945670812\",\"conflict\":\"false\",\"code\":\"def user_2_terminal_type(inputs,df_logs_inapp,dispute_amount):\\n    inapp = df_logs_inapp[df_logs_inapp[\\\"user_mobile\\\"]==inputs[\\\"mobile_number\\\"].iloc[-1]]\\n    if dispute_amount in inapp[\\\"event_amt\\\"].values:\\n            txn = inapp[inapp[\\\"event_amt\\\"] == dispute_amount]\\n            txn = txn[txn[\\\"result_pay_result\\\"]=='payment_success']\\n            terminal_type = txn[\\\"terminal_type\\\"].iloc[-1]\\n            result_pay_result = txn[\\\"result_pay_result\\\"].iloc[-1]\\n            fuzzy_device_id = txn[\\\"fuzzy_device_id\\\"].iloc[-1]\\n            login_udid = txn[\\\"login_udid\\\"].iloc[-1]\\n    return terminal_type,result_pay_result,fuzzy_device_id,login_udid,txn\\n\\n\",\"count\":17,\"mode\":\"preview\",\"type\":\"code\",\"hover\":true,\"interrupt\":false,\"warning\":false,\"outputArray\":[],\"lineNumber\":false,\"laodmodel\":false,\"pre_cell_id\":0,\"is_pre_cell\":false,\"succORerr\":true,\"expand\":false,\"outputexpand\":false,\"readonly\":false,\"markDowns\":false,\"loader\":false,\"image\":\"\",\"error\":\"\",\"result\":\"\",\"algorithms\":\"\",\"semicolon\":\"\",\"cputimes\":\"\",\"showcputime\":false,\"secret\":[]},{\"id\":\"0_0.8585822995815775\",\"conflict\":\"false\",\"code\":\"- If_App: \\ncheck whether UDID is part of device history or Not\\nCount the number of successful Transactions\\n- Else if not App:\\nproceed to user stories 3 and beyond\",\"count\":18,\"mode\":\"preview\",\"type\":\"markdown\",\"hover\":true,\"interrupt\":false,\"warning\":false,\"outputArray\":[],\"lineNumber\":false,\"laodmodel\":false,\"pre_cell_id\":0,\"is_pre_cell\":false,\"succORerr\":true,\"expand\":false,\"outputexpand\":false,\"readonly\":false,\"markDowns\":false,\"loader\":false,\"image\":\"\",\"error\":\"\",\"algorithms\":\"\",\"semicolon\":\"\",\"cputimes\":\"\",\"showcputime\":false,\"secret\":[],\"result\":\"\"},{\"id\":\"0_0.09069798651526817\",\"conflict\":\"false\",\"code\":\"**user_criteria_2 and 3:**\",\"count\":19,\"mode\":\"preview\",\"type\":\"markdown\",\"hover\":true,\"interrupt\":false,\"warning\":false,\"outputArray\":[],\"lineNumber\":false,\"laodmodel\":false,\"pre_cell_id\":0,\"is_pre_cell\":false,\"succORerr\":true,\"expand\":false,\"outputexpand\":false,\"readonly\":false,\"markDowns\":false,\"loader\":false,\"image\":\"\",\"error\":\"\",\"algorithms\":\"\",\"semicolon\":\"\",\"cputimes\":\"\",\"showcputime\":false,\"secret\":[],\"result\":\"\"},{\"id\":\"0_0.8780598846262331\",\"conflict\":\"false\",\"code\":\"def user_2_face_score(terminal_type,df_doublesafe,login_udid):\\n    filter_safe = df_doublesafe[df_doublesafe[\\\"device_id\\\"]==login_udid]\\n    event_id_doublesafe = filter_safe[\\\"event_id\\\"].iloc[-1]\\n    face_score = filter_safe[\\\"face_score\\\"].iloc[-1]\\n    verification_method = filter_safe[\\\"result_verification_method\\\"].iloc[-1]\\n    gmt_occur_face_verification = filter_safe[\\\"gmt_occur\\\"].iloc[-1]\\n    print(f\\\"\\\"\\\"\\n    The DoubleSafe Link Event ID: {event_id_doublesafe}\\n    Detected Face Score: {face_score}\\n    The Verification Method: {verification_method}\\n    Time of Event Verification: {gmt_occur_face_verification}\\n    \\\"\\\"\\\",\\\"\\\\n\\\")\\n    return event_id_doublesafe, face_score, verification_method, gmt_occur_face_verification, filter_safe\\n\\n\\ndef user_2_UDID_history_check(df_Logs_UDID,login_udid,input_date_time):\\n    if login_udid in df_Logs_UDID[\\\"cohort\\\"].values:\\n        max_date = pd.to_datetime(df_Logs_UDID[df_Logs_UDID[\\\"cohort\\\"]==login_udid][\\\"max_trans_date\\\"].iloc[-1],errors=\\\"coerce\\\")\\n        min_date = pd.to_datetime(df_Logs_UDID[df_Logs_UDID[\\\"cohort\\\"]==login_udid][\\\"min_trans_date\\\"].iloc[-1],errors=\\\"coerce\\\")\\n        current_transaction_date = input_date_time\\n        print(f'Minimum_transaction_date : {min_date}')\\n        print(f'Reported_transaction_date: {current_transaction_date}')\\n        print(f'Maximum_transaction_date : {max_date}',\\\"\\\\n\\\")\\n        print(f'UDID is:{login_udid}')\\n        # if transaction time is between min_trans_date and max_trans_date of the the cohort then UDID is part of history\\n        if (current_transaction_date > min_date) & (current_transaction_date < max_date):\\n\\n            status = \\\"UDID is part of Device History, as the UDID based transaction is inside the Cohort Timeline\\\"\\n        else:\\n            status = \\\"UDID is not part of the Device History.\\\"\\n    else:\\n        logging.info(\\\"UDID not found\\\")\\n    return max_date, min_date,status\\n\\n\\ndef user_2_successfull_txn(df_logs_inapp,login_udid):\\n    if login_udid in df_logs_inapp[\\\"login_udid\\\"].values:\\n        df_udid = df_logs_inapp[df_logs_inapp[\\\"login_udid\\\"]==login_udid]\\n        number_successful_payment = len(df_udid[df_udid[\\\"result_pay_result\\\"]==\\\"payment_success\\\"])\\n    return number_successful_payment\",\"count\":20,\"mode\":\"preview\",\"type\":\"code\",\"hover\":true,\"interrupt\":false,\"warning\":false,\"outputArray\":[],\"lineNumber\":false,\"laodmodel\":false,\"pre_cell_id\":0,\"is_pre_cell\":false,\"succORerr\":true,\"expand\":false,\"outputexpand\":false,\"readonly\":false,\"markDowns\":false,\"loader\":false,\"image\":\"\",\"error\":\"\",\"result\":\"\",\"algorithms\":\"\",\"semicolon\":\"\",\"cputimes\":\"\",\"showcputime\":false,\"secret\":[]},{\"id\":\"35695431341_0.3964182166342116\",\"conflict\":\"false\",\"code\":\"def user_story_3_updated(inputs,df_kibana):\\n    kibana_df = df_kibana[(df_kibana[\\\"destinationNumber\\\"]==str(inputs.mobile_number.iloc[-1]))]\\n    date_check = inputs[\\\"date_time_transaction\\\"].iloc[-1].split(\\\" \\\")[0]\\n    if \\\"OTP-DEFAULT\\\" in kibana_df[kibana_df[\\\"Time\\\"]==date_check][\\\"sourceNumber\\\"].values:\\n        OTP_Status= \\\"There is an OTP\\\"\\n\\n    else:\\n        OTP_Status = \\\"No OTP\\\"\\n    \\n    return OTP_Status\",\"count\":21,\"mode\":\"preview\",\"type\":\"code\",\"hover\":true,\"interrupt\":false,\"warning\":false,\"outputArray\":[],\"lineNumber\":false,\"laodmodel\":false,\"pre_cell_id\":0,\"is_pre_cell\":false,\"succORerr\":true,\"expand\":false,\"outputexpand\":false,\"readonly\":false,\"markDowns\":false,\"loader\":false,\"image\":\"\",\"error\":\"\",\"result\":\"\",\"algorithms\":\"\",\"semicolon\":\"\",\"cputimes\":\"\",\"showcputime\":false,\"secret\":[]},{\"id\":\"0_0.5662535908831421\",\"conflict\":\"false\",\"code\":\"**Else if terminal type is not App then other user stories gets implemented below:**\",\"count\":22,\"mode\":\"preview\",\"type\":\"markdown\",\"hover\":true,\"interrupt\":false,\"warning\":false,\"outputArray\":[],\"lineNumber\":false,\"laodmodel\":false,\"pre_cell_id\":0,\"is_pre_cell\":false,\"succORerr\":true,\"expand\":false,\"outputexpand\":false,\"readonly\":false,\"markDowns\":false,\"loader\":false,\"image\":\"\",\"error\":\"\",\"algorithms\":\"\",\"semicolon\":\"\",\"cputimes\":\"\",\"showcputime\":false,\"secret\":[],\"result\":\"\"},{\"id\":\"0_0.7171205019849021\",\"conflict\":\"false\",\"code\":\"OTP_Status = user_story_3_updated(inputs,df_kibana)\",\"count\":23,\"mode\":\"preview\",\"type\":\"code\",\"hover\":true,\"interrupt\":false,\"warning\":false,\"outputArray\":[],\"lineNumber\":false,\"laodmodel\":false,\"pre_cell_id\":0,\"is_pre_cell\":false,\"succORerr\":true,\"expand\":false,\"outputexpand\":false,\"readonly\":false,\"markDowns\":false,\"loader\":false,\"image\":\"\",\"error\":\"\",\"result\":\"\",\"algorithms\":\"\",\"semicolon\":\"\",\"cputimes\":\"\",\"showcputime\":false,\"secret\":[]},{\"id\":\"0_0.4207766413908036\",\"conflict\":\"false\",\"code\":\"user_story_4\",\"count\":24,\"mode\":\"preview\",\"type\":\"markdown\",\"hover\":true,\"interrupt\":false,\"warning\":false,\"outputArray\":[],\"lineNumber\":false,\"laodmodel\":false,\"pre_cell_id\":0,\"is_pre_cell\":false,\"succORerr\":true,\"expand\":false,\"outputexpand\":false,\"readonly\":false,\"markDowns\":false,\"loader\":false,\"image\":\"\",\"error\":\"\",\"algorithms\":\"\",\"semicolon\":\"\",\"cputimes\":\"\",\"showcputime\":false,\"secret\":[],\"result\":\"\"},{\"id\":\"0_0.9984778332025239\",\"conflict\":\"false\",\"code\":\"- DS Type detected is Face or Not\\n- If Face retrieve the Face Match Details\\n- Else not Face ? connect to kibana and check if it has a MAC SMS?!\",\"count\":25,\"mode\":\"preview\",\"type\":\"markdown\",\"hover\":true,\"interrupt\":false,\"warning\":false,\"outputArray\":[],\"lineNumber\":false,\"laodmodel\":false,\"pre_cell_id\":0,\"is_pre_cell\":false,\"succORerr\":true,\"expand\":false,\"outputexpand\":false,\"readonly\":false,\"markDowns\":false,\"loader\":false,\"image\":\"\",\"error\":\"\",\"algorithms\":\"\",\"semicolon\":\"\",\"cputimes\":\"\",\"showcputime\":false,\"secret\":[],\"result\":\"\"},{\"id\":\"0_0.8907808587796784\",\"conflict\":\"false\",\"code\":\"def user_story_4(result_logs,df_Logs_UDID,inputs,fuzzy_device_id):\\n    global result_df\\n    global filtered_number\\n    global filtered_df\\n    global cohort_val\\n    global df_safe\\n    result_df = result_logs[result_logs[\\\"terminal_type\\\"]!=\\\"APP\\\"]\\n    filtered_number = result_df[result_df[\\\"user_mobile\\\"]==inputs[\\\"mobile_number\\\"].iloc[-1]]\\n    filtered_df = filtered_number[filtered_number[\\\"event_amt\\\"]==str(float(inputs[\\\"amount\\\"].iloc[-1]))]\\n    logging.info(\\\"filtered\\\")\\n    if 'payment_success' in filtered_df[\\\"result_pay_result\\\"].values:\\n        logging.info(\\\"Success\\\")\\n        df = filtered_df[filtered_df['result_pay_result']==\\\"payment_success\\\"]\\n        logging.info(\\\"df\\\")\\n        time = df[\\\"gmt_occur\\\"].iloc[-1]\\n        event_name = df[\\\"event_name\\\"].iloc[-1]\\n        fuzzy_id_df = df_Logs_Fuzzy[df_Logs_Fuzzy[\\\"user_mobile\\\"]==inputs.mobile_number.iloc[-1]][df_Logs_Fuzzy[df_Logs_Fuzzy[\\\"user_mobile\\\"]==inputs.mobile_number.iloc[-1]][\\\"cohort\\\"]==fuzzy_device_id]\\n        logging.info(\\\"fuzzy_id\\\")\\n        if event_name in fuzzy_id_df[\\\"event_name\\\"].values:\\n            date_time = fuzzy_id_df[\\\"first_date\\\"].iloc[-1]\\n            df_Logs_UDID[\\\"min_trans_date\\\"] = pd.to_datetime(df_Logs_UDID[\\\"min_trans_date\\\"])\\n            df_Logs_UDID[\\\"max_trans_date\\\"] =pd.to_datetime(df_Logs_UDID[\\\"max_trans_date\\\"])\\n            logging.info(\\\"udid_id\\\")\\n            filter_udid = (df_Logs_UDID[df_Logs_UDID[\\\"msisdn\\\"]==inputs.mobile_number.iloc[-1]])\\n            filter_udid = filter_udid.sort_values(by=\\\"max_trans_date\\\",ascending=False)\\n            logging.info(\\\"filter_udid\\\")\\n            cohort_val = filter_udid[(date_time >= filter_udid[\\\"min_trans_date\\\"]) & (date_time <= filter_udid[\\\"max_trans_date\\\"])].cohort.iloc[-1]\\n            print(f\\\"Cohort Value: {cohort_val}\\\")\\n            doublesafe_df = df_doublesafe[df_doublesafe[\\\"user_mobile\\\"]==inputs.mobile_number.iloc[-1]]\\n            logging.info(\\\"doublesafe\\\")\\n            df_safe = doublesafe_df[doublesafe_df[\\\"device_id\\\"]==cohort_val]\\n            # The GMT occurence is within the date_time of transaction:\\n            df_safe = df_safe[df_safe[\\\"gmt_occur\\\"]<=str(date_time)]\\n            logging.info(\\\"df_safe\\\")\\n            return df_safe\",\"count\":26,\"mode\":\"preview\",\"type\":\"code\",\"hover\":true,\"interrupt\":false,\"warning\":false,\"outputArray\":[],\"lineNumber\":false,\"laodmodel\":false,\"pre_cell_id\":0,\"is_pre_cell\":false,\"succORerr\":true,\"expand\":false,\"outputexpand\":false,\"readonly\":false,\"markDowns\":false,\"loader\":false,\"image\":\"\",\"error\":\"\",\"result\":\"\",\"algorithms\":\"\",\"semicolon\":\"\",\"cputimes\":\"\",\"showcputime\":false,\"secret\":[]},{\"id\":\"0_0.32040245588436056\",\"conflict\":\"false\",\"code\":\"**#User story 5 cases:**\",\"count\":27,\"mode\":\"preview\",\"type\":\"markdown\",\"hover\":true,\"interrupt\":false,\"warning\":false,\"outputArray\":[],\"lineNumber\":false,\"laodmodel\":false,\"pre_cell_id\":0,\"is_pre_cell\":false,\"succORerr\":true,\"expand\":false,\"outputexpand\":false,\"readonly\":false,\"markDowns\":false,\"loader\":false,\"image\":\"\",\"error\":\"\",\"algorithms\":\"\",\"semicolon\":\"\",\"cputimes\":\"\",\"showcputime\":false,\"secret\":[],\"result\":\"\"},{\"id\":\"0_0.6176675012694\",\"conflict\":\"false\",\"code\":\"- Identify if Face Matched or Not\\n- If matched, then return False Claim! with all summary and Details available!\\n- Else respond it's an ATO case with all summary and Details available!\",\"count\":28,\"mode\":\"preview\",\"type\":\"markdown\",\"hover\":true,\"interrupt\":false,\"warning\":false,\"outputArray\":[],\"lineNumber\":false,\"laodmodel\":false,\"pre_cell_id\":0,\"is_pre_cell\":false,\"succORerr\":true,\"expand\":false,\"outputexpand\":false,\"readonly\":false,\"markDowns\":false,\"loader\":false,\"image\":\"\",\"error\":\"\",\"algorithms\":\"\",\"semicolon\":\"\",\"cputimes\":\"\",\"showcputime\":false,\"secret\":[],\"result\":\"\"},{\"id\":\"0_0.28689521803426743\",\"conflict\":\"false\",\"code\":\"# if terminal_type != \\\"APP\\\":\\n#     for i,val in enumerate(face_scores_):\\n#         gmt = occur_dates[i]\\n#         try:\\n#             if int(val) >= 63:\\n\\n#                 print(f\\\"\\\"\\\"\\n#                       Time: {gmt} has face score of {val}, hence its a face Match and False Claim!\\n#                       \\\"\\\"\\\")\\n#             else:\\n#                  print(f\\\"\\\"\\\"\\n#                       Time: {gmt} has face score of {val}, hence not a face Match and ATO case\\n#                       \\\"\\\"\\\")\\n#         except ValueError:\\n#             print(f\\\"{gmt}: corresponding face score not detected properly\\\")\\n#     product_type, product_name, test_df = user_1_A_records(inputs,input_date_time,df_A_Records)\\n\\n#     disputed_amt = test_df[\\\"Amount\\\"].iloc[-1]\\n#     merchant_id = test_df[\\\"Merchant Trans ID\\\"].iloc[-1]\\n#     A_txn_id = test_df[\\\"A+ Transaction ID\\\"].iloc[-1]\\n\\n#     terminal_type,result_pay_result,fuzzy_device_id,login_udid,txn = user_2_terminal_type(inputs,result_logs)\\n\\n#     print(f\\\"disputed_amt: {disputed_amt}\\\")\\n#     print(f\\\"Merchant_id: {merchant_id}\\\")\\n#     print(f\\\"A+ Transaction ID: {A_txn_id}\\\")\\n#     print(f\\\"Product Type: {product_type}\\\")\\n#     print(f\\\"Product Name: {product_name}\\\")\\n#     print(f\\\"Terminal Type: {terminal_type}\\\")\\n#     print(f\\\"Fuzzy_ID: {fuzzy_device_id}\\\")\\n    \",\"count\":29,\"mode\":\"preview\",\"type\":\"code\",\"hover\":true,\"interrupt\":false,\"warning\":false,\"outputArray\":[],\"lineNumber\":false,\"laodmodel\":false,\"pre_cell_id\":0,\"is_pre_cell\":false,\"succORerr\":true,\"expand\":false,\"outputexpand\":false,\"readonly\":false,\"markDowns\":false,\"loader\":false,\"image\":\"\",\"error\":\"\",\"result\":\"\",\"algorithms\":\"\",\"semicolon\":\"\",\"cputimes\":\"\",\"showcputime\":false,\"secret\":[]},{\"id\":\"35695431341_0.23530764777627944\",\"conflict\":\"false\",\"code\":\"#pipeline modified_User Story_5\",\"count\":30,\"mode\":\"preview\",\"type\":\"markdown\",\"hover\":true,\"interrupt\":false,\"warning\":false,\"outputArray\":[],\"lineNumber\":false,\"laodmodel\":false,\"pre_cell_id\":0,\"is_pre_cell\":false,\"succORerr\":true,\"expand\":false,\"outputexpand\":false,\"readonly\":false,\"markDowns\":false,\"loader\":false,\"image\":\"\",\"error\":\"\",\"algorithms\":\"\",\"semicolon\":\"\",\"cputimes\":\"\",\"showcputime\":false,\"secret\":[],\"result\":\"\"},{\"id\":\"0_0.8756064434007258\",\"conflict\":\"false\",\"code\":\"**#user_story_6**\",\"count\":31,\"mode\":\"preview\",\"type\":\"markdown\",\"hover\":true,\"interrupt\":false,\"warning\":false,\"outputArray\":[],\"lineNumber\":false,\"laodmodel\":false,\"pre_cell_id\":0,\"is_pre_cell\":false,\"succORerr\":true,\"expand\":false,\"outputexpand\":false,\"readonly\":false,\"markDowns\":false,\"loader\":false,\"image\":\"\",\"error\":\"\",\"algorithms\":\"\",\"semicolon\":\"\",\"cputimes\":\"\",\"showcputime\":false,\"secret\":[],\"result\":\"\"},{\"id\":\"0_0.2109490182899434\",\"conflict\":\"false\",\"code\":\"- If not Face,connect to Kibana and check for MAC-SMS\\n- If MAC-SMS present return False Claim!\\n- Else if no MAC-SMS details found, return ATO\\n- In both cases fetch the details!\",\"count\":32,\"mode\":\"preview\",\"type\":\"markdown\",\"hover\":true,\"interrupt\":false,\"warning\":false,\"outputArray\":[],\"lineNumber\":false,\"laodmodel\":false,\"pre_cell_id\":0,\"is_pre_cell\":false,\"succORerr\":true,\"expand\":false,\"outputexpand\":false,\"readonly\":false,\"markDowns\":false,\"loader\":false,\"image\":\"\",\"error\":\"\",\"algorithms\":\"\",\"semicolon\":\"\",\"cputimes\":\"\",\"showcputime\":false,\"secret\":[],\"result\":\"\"},{\"id\":\"0_0.6673405752258126\",\"conflict\":\"false\",\"code\":\"# filtered_df = result_df[result_df[\\\"user_mobile\\\"]==inputs.mobile_number.iloc[-1]][result_df[result_df[\\\"user_mobile\\\"]==inputs.mobile_number.iloc[-1]][\\\"event_amt\\\"]==str(inputs[\\\"amount\\\"].iloc[-1])]\\n\\n# if 'payment_success' in filtered_df[\\\"result_pay_result\\\"].values:\\n#     df = filtered_df[filtered_df['result_pay_result']==\\\"payment_success\\\"]\\n#     time = df[\\\"gmt_occur\\\"].iloc[-1]\\n#     event_name = df[\\\"event_name\\\"].iloc[-1]\\n#     fuzzy_id_df = df_Logs_Fuzzy[df_Logs_Fuzzy[\\\"user_mobile\\\"]==inputs.mobile_number.iloc[-1]][df_Logs_Fuzzy[df_Logs_Fuzzy[\\\"user_mobile\\\"]==inputs.mobile_number.iloc[-1]][\\\"cohort\\\"]==fuzzy_device_id]\\n#     if event_name in fuzzy_id_df[\\\"event_name\\\"].values:\\n#         date_time = fuzzy_id_df[\\\"first_date\\\"].iloc[-1]\\n#         df_Logs_UDID[\\\"min_trans_date\\\"] = pd.to_datetime(df_Logs_UDID[\\\"min_trans_date\\\"])\\n#         df_Logs_UDID[\\\"max_trans_date\\\"] =pd.to_datetime(df_Logs_UDID[\\\"max_trans_date\\\"])\\n#         filter_udid = (df_Logs_UDID[df_Logs_UDID[\\\"msisdn\\\"]==inputs.mobile_number.iloc[-1]])\\n#         filter_udid = filter_udid.sort_values(by=\\\"max_trans_date\\\",ascending=False)\\n#         cohort_val = filter_udid[(date_time >= filter_udid[\\\"min_trans_date\\\"]) & (date_time <= filter_udid[\\\"max_trans_date\\\"])].cohort.iloc[-1]\\n        \\n#         doublesafe_df = df_doublesafe[df_doublesafe[\\\"user_mobile\\\"]==inputs.mobile_number.iloc[-1]]\\n#         df_safe = doublesafe_df[doublesafe_df[\\\"device_id\\\"]==cohort_val]\\n#         df_safe = df_safe[df_safe[\\\"gmt_occur\\\"]<=str(date_time)]\\n# #########################\\n# # use df_safe\\n#         face_scores_ = []\\n#         occur_dates = []\\n\\n#         # Check if its a face verification method or not: \\n#         if 'ZOLOZ_FACE' not in df_safe[\\\"result_verification_method\\\"].values:\\n#             kibana_df = df_kibana[(df_kibana[\\\"destinationNumber\\\"]==str(inputs.mobile_number.iloc[-1]))]\\n#             date_check = inputs[\\\"date_time_transaction\\\"].iloc[-1].split(\\\" \\\")[0]\\n#             if \\\"MAC_SMS\\\" in kibana_df[kibana_df[\\\"Time\\\"]==date_check][\\\"sourceNumber\\\"].values:\\n#                 print(\\\"It has MAC-SMS, hence its a False Claim !\\\")\\n#             else:\\n#                 print(\\\"NO MAC-SMS,hence ATO case !!\\\")\\n                \\n#             product_type, product_name, test_df = user_1_A_records(inputs,input_date_time,df_A_Records)\\n#             disputed_amt = test_df[\\\"Amount\\\"].iloc[-1]\\n#             merchant_id = test_df[\\\"Merchant Trans ID\\\"].iloc[-1]\\n#             A_txn_id = test_df[\\\"A+ Transaction ID\\\"].iloc[-1]\\n\\n#             terminal_type,result_pay_result,fuzzy_device_id,login_udid,txn = user_2_terminal_type(inputs,result_logs)\\n\\n#             print(f\\\"disputed_amt: {disputed_amt}\\\")\\n#             print(f\\\"Merchant_id: {merchant_id}\\\")\\n#             print(f\\\"A+ Transaction ID: {A_txn_id}\\\")\\n#             print(f\\\"Product Type: {product_type}\\\")\\n#             print(f\\\"Product Name: {product_name}\\\")\\n#             print(f\\\"Terminal Type: {terminal_type}\\\")\\n#             print(f\\\"Fuzzy_ID: {fuzzy_device_id}\\\")\\n#         else:\\n#             print(\\\"DS Type is FACE\\\")\\n\\n# else:\\n#     print(\\\"payment_failure\\\")\",\"count\":33,\"mode\":\"preview\",\"type\":\"code\",\"hover\":true,\"interrupt\":false,\"warning\":false,\"outputArray\":[],\"lineNumber\":false,\"laodmodel\":false,\"pre_cell_id\":0,\"is_pre_cell\":false,\"succORerr\":true,\"expand\":false,\"outputexpand\":false,\"readonly\":false,\"markDowns\":false,\"loader\":false,\"image\":\"\",\"error\":\"\",\"result\":\"\",\"algorithms\":\"\",\"semicolon\":\"\",\"cputimes\":\"\",\"showcputime\":false,\"secret\":[]},{\"id\":\"0_0.96079998143369\",\"conflict\":\"false\",\"code\":\"#Current Deployed Pipeline Function:\",\"count\":34,\"mode\":\"preview\",\"type\":\"markdown\",\"hover\":true,\"interrupt\":false,\"warning\":false,\"outputArray\":[],\"lineNumber\":false,\"laodmodel\":false,\"pre_cell_id\":0,\"is_pre_cell\":false,\"succORerr\":true,\"expand\":false,\"outputexpand\":false,\"readonly\":false,\"markDowns\":false,\"loader\":false,\"image\":\"\",\"error\":\"\",\"algorithms\":\"\",\"semicolon\":\"\",\"cputimes\":\"\",\"showcputime\":false,\"secret\":[],\"result\":\"\"},{\"id\":\"35695431341_0.8273097794326589\",\"conflict\":\"false\",\"code\":\"def main_pipeline(inputs):\\n    input_date_time = pd.to_datetime(inputs[\\\"date_time_transaction\\\"].iloc[-1])\\n    \\n    ticket_id, dispute_date, dispute_amount, Transaction_type, Recipient_Mobile_Bank_Number, amt_be_recovered, Modus, claim,CXM_data = user_1_CXM(inputs, input_date_time, df_CXM)\\n    product_type, product_name, new_df = user_1_A_records(inputs,input_date_time,df_A_Records)\\n    terminal_type,result_pay_result,fuzzy_device_id,login_udid,txn = user_2_terminal_type(inputs,result_logs,dispute_amount) \\n    if terminal_type == \\\"APP\\\":\\n        logging.info(\\\"Terminal Type is APP:\\\")\\n        event_id_doublesafe, face_score, verification_method, gmt_occur_face_verification, filter_safe = user_2_face_score(terminal_type,df_doublesafe,login_udid)\\n        max_date, min_date,status = user_2_UDID_history_check(df_Logs_UDID,login_udid,input_date_time)   \\n        number_successful_payment = user_2_successfull_txn(df_logs_inapp,login_udid)\\n        \\n        A_txn_id = new_df[\\\"A+ Transaction ID\\\"].iloc[-1] \\n        dispute_date = dispute_date.strftime('%Y-%m-%d')\\n        \\n        return pd.DataFrame({\\\"Ticket_ID\\\" : [ticket_id],\\n            \\\"Dispute Date\\\": [dispute_date],\\n            \\\"Disputed Amount\\\": [dispute_amount],\\n            \\\"Transaction Type\\\": [Transaction_type],\\n            \\\"Recipient Mobile/Bank Number\\\": [Recipient_Mobile_Bank_Number],\\n            \\\"Amount to be Recovered\\\": [amt_be_recovered],\\n            \\\"Modus\\\": [Modus],\\n            \\\"Response_Claimed\\\": [claim],\\n            \\\"product_type\\\": [product_type],\\n            \\\"product_name\\\": [product_name],\\n            \\\"Terminal_Type\\\":[terminal_type],\\n            \\\"Payment_Result\\\":[result_pay_result],\\n            \\\"fuzzy_device_id\\\":[fuzzy_device_id],\\n            \\\"UDID\\\":[login_udid],\\n            \\\"Status of UDID\\\":[status],\\n            \\\"Doublesafe_Event_ID\\\" :[event_id_doublesafe],\\n            \\\"Verification_Method \\\":[verification_method],\\n            \\\"GMT_Verification\\\":[gmt_occur_face_verification],\\n            \\\"Detected_Face_Score\\\":[face_score]  ,\\n            \\\"No_of_Successful_Payments\\\":[number_successful_payment],\\n            \\\"OTP_Status\\\":[],\\n            \\\"Message\\\":[],\\n            \\\"Merchant_id\\\":[],\\n            \\\"A+ Transaction ID\\\":[A_txn_id]\\n            })\\n    else:\\n        #user Story 3 starts\\n        logging.info(\\\"User Story 3\\\")\\n        OTP_Status = user_story_3_updated(inputs,df_kibana)\\n        logging.info(\\\"User Story 4\\\")\\n        # User Story 4 checks!\\n        df_safe = user_story_4(result_logs,df_Logs_UDID,inputs,fuzzy_device_id)\\n        face_scores_ = []\\n        occur_dates = []\\n        message = \\\" \\\"\\n        # USer Story 4 checks if Face is detected Else Moves to Kibana logs and merge user story 6(Since Face not detected)\\n\\n        # Check if 'ZOLOZ_FACE' exists in the 'result_verification_method' column\\n        if 'ZOLOZ_FACE' in df_safe[\\\"result_verification_method\\\"].values:\\n            # Collect all face scores and occurrence dates as lists\\n            face_scores_ = df_safe[\\\"face_score\\\"].tolist()\\n            occur_dates = df_safe[\\\"gmt_occur\\\"].tolist()\\n            result_dict = {\\\"face_score\\\": face_scores_, \\\"gmt_occur\\\": occur_dates}\\n            df_safe = df_safe[df_safe[\\\"result_verification_method\\\"]=='ZOLOZ_FACE']                \\n        else:\\n            kibana_df = df_kibana[(df_kibana[\\\"destinationNumber\\\"]==str(inputs.mobile_number.iloc[-1]))]\\n            date_check = inputs[\\\"date_time_transaction\\\"].iloc[-1].split(\\\" \\\")[0]\\n            if \\\"MAC_SMS\\\" in kibana_df[kibana_df[\\\"Time\\\"]==date_check][\\\"sourceNumber\\\"].values:\\n                message = \\\"There is MAC-SMS\\\"\\n                     \\n            else:\\n                message = \\\"NO MAC-SMS\\\"\\n\\n        # User Story 5:\\n        if len(face_scores_) > 0:\\n            for i,val in enumerate(face_scores_):\\n                gmt = occur_dates[i]\\n                try:\\n                    if int(val) >= 63:\\n\\n                        claim_response = f\\\"Face Match and False Claim!\\\"\\n                    else:\\n                        claim_response = f\\\"Not a face Match and ATO case\\\"\\n\\n                except ValueError:\\n                    logging.info(f\\\"{gmt}: corresponding face score not detected properly\\\")\\n        #User story 6\\n        else:\\n            kibana_df = df_kibana[(df_kibana[\\\"destinationNumber\\\"]==str(inputs.mobile_number.iloc[-1]))]\\n            date_check = inputs[\\\"date_time_transaction\\\"].iloc[-1].split(\\\" \\\")[0]\\n            if \\\"MAC_SMS\\\" in kibana_df[kibana_df[\\\"Time\\\"]==date_check][\\\"sourceNumber\\\"].values:\\n                claim_response = \\\"It has MAC-SMS, hence its a False Claim !\\\"\\n            else:\\n                claim_response = \\\"NO MAC-SMS,hence ATO case !!\\\"\\n\\n        merchant_id = new_df[\\\"Merchant Trans ID\\\"].iloc[-1]\\n        A_txn_id = new_df[\\\"A+ Transaction ID\\\"].iloc[-1]  \\n        \\n        dispute_date = dispute_date.strftime('%Y-%m-%d')\\n       \\n        return pd.DataFrame({\\\"Ticket_ID\\\" : [ticket_id],\\n            \\\"Dispute Date\\\": [dispute_date],\\n            \\\"Disputed Amount\\\": [dispute_amount],\\n            \\\"Transaction Type\\\": [Transaction_type],\\n            \\\"Recipient Mobile/Bank Number\\\": [Recipient_Mobile_Bank_Number],           \\n            \\\"product_type\\\": [product_type],\\n            \\\"product_name\\\": [product_name],\\n            \\\"Amount to be Recovered\\\": [amt_be_recovered],\\n            \\\"Modus\\\": [Modus],\\n            \\\"Payment_Result\\\":[result_pay_result],\\n            \\\"fuzzy_device_id\\\":[fuzzy_device_id],\\n            \\\"Terminal_Type\\\":[terminal_type],\\n            \\\"UDID\\\":[],\\n            \\\"Status of UDID\\\":[],\\n            \\\"Doublesafe_Event_ID\\\" :[],\\n            \\\"Verification_Method \\\":[],\\n            \\\"GMT_Verification\\\":[],\\n            \\\"No_of_Successful_Payments\\\":[]\\n            \\\"OTP_Status\\\":[OTP_Status],\\n            \\\"Detected_Face_Score\\\":[face_scores_],\\n            \\\"Message\\\":[message],\\n            \\\"Response_Claimed\\\":[claim_response],\\n            \\\"Merchant_id\\\":[merchant_id],\\n            \\\"A+ Transaction ID\\\":[A_txn_id]})\\n    \\n\\n#     except ValueError as e:\\n#         ticket_id, dispute_date, dispute_amount, Transaction_type, Recipient_Mobile_Bank_Number, amt_be_recovered, Modus, claim, = None,None,None,None,None,None,None,None\\n#         logging.info(f\\\"Response: {e}\\\")\\n\",\"count\":35,\"mode\":\"preview\",\"type\":\"code\",\"hover\":true,\"interrupt\":false,\"warning\":false,\"outputArray\":[],\"lineNumber\":false,\"laodmodel\":false,\"pre_cell_id\":0,\"is_pre_cell\":false,\"succORerr\":false,\"expand\":false,\"outputexpand\":false,\"readonly\":false,\"markDowns\":false,\"loader\":false,\"image\":\"\",\"result\":\"\",\"error\":\"\",\"algorithms\":\"\",\"semicolon\":\"\",\"cputimes\":\"\",\"showcputime\":false,\"secret\":[]},{\"id\":\"35695431341_0.2560940273351755\",\"conflict\":\"false\",\"code\":\"main_pipeline(inputs)\",\"count\":36,\"mode\":\"preview\",\"type\":\"code\",\"hover\":true,\"interrupt\":false,\"warning\":false,\"outputArray\":[\"\\n    The DoubleSafe Link Event ID: 731d5c0d72d8c3855284g61ab4987cf1\\n    Detected Face Score: \\\\N\\n    The Verification Method: OTP_SMS\\n    Time of Event Verification: 2023-12-23 09:00:17\\n     \\n\\nMinimum_transaction_date : 2023-03-14 12:56:07\\nReported_transaction_date: 2024-05-11 00:45:44\\nMaximum_transaction_date : 2024-05-18 09:25:39 \\n\\nUDID is:IOS4Vq7nGw6GZOR3Uft5Uc1sSwdg0lVN\\n\",{\"metadata\":{},\"data\":{\"text/html\":[\"<div>\\n<style scoped>\\n    .dataframe tbody tr th:only-of-type {\\n        vertical-align: middle;\\n    }\\n\\n    .dataframe tbody tr th {\\n        vertical-align: top;\\n    }\\n\\n    .dataframe thead th {\\n        text-align: right;\\n    }\\n<\/style>\\n<table border=\\\"1\\\" class=\\\"dataframe\\\">\\n  <thead>\\n    <tr style=\\\"text-align: right;\\\">\\n      <th><\/th>\\n      <th>Ticket_ID<\/th>\\n      <th>Dispute Date<\/th>\\n      <th>Disputed Amount<\/th>\\n      <th>Transaction Type<\/th>\\n      <th>Recipient Mobile/Bank Number<\/th>\\n      <th>Amount to be Recovered<\/th>\\n      <th>Modus<\/th>\\n      <th>Response_Claimed<\/th>\\n      <th>product_type<\/th>\\n      <th>product_name<\/th>\\n      <th>Terminal_Type<\/th>\\n      <th>Payment_Result<\/th>\\n      <th>fuzzy_device_id<\/th>\\n      <th>UDID<\/th>\\n      <th>Status of UDID<\/th>\\n      <th>Doublesafe_Event_ID<\/th>\\n      <th>Verification_Method<\/th>\\n      <th>GMT_Verification<\/th>\\n      <th>Detected_Face_Score<\/th>\\n      <th>No_of_Successful_Payments<\/th>\\n    <\/tr>\\n  <\/thead>\\n  <tbody>\\n    <tr>\\n      <th>0<\/th>\\n      <td>135102968<\/td>\\n      <td>2024-05-14<\/td>\\n      <td>13095.0<\/td>\\n      <td>Bills Payment via Balance<\/td>\\n      <td>217020000000000000000<\/td>\\n      <td>0.0<\/td>\\n      <td>Not Disclosed<\/td>\\n      <td>False Claim<\/td>\\n      <td>Acquiring<\/td>\\n      <td>Bills Payment<\/td>\\n      <td>APP<\/td>\\n      <td>payment_success<\/td>\\n      <td>eYOIkneQEouJo1GYmayzDIkPyQmTTAMpAfAsRERBd8FSIW...<\/td>\\n      <td>IOS4Vq7nGw6GZOR3Uft5Uc1sSwdg0lVN<\/td>\\n      <td>UDID is part of Device History, as the UDID ba...<\/td>\\n      <td>731d5c0d72d8c3855284g61ab4987cf1<\/td>\\n      <td>OTP_SMS<\/td>\\n      <td>2023-12-23 09:00:17<\/td>\\n      <td>\\\\N<\/td>\\n      <td>15<\/td>\\n    <\/tr>\\n  <\/tbody>\\n<\/table>\\n<\/div>\"],\"text/plain\":[\"   Ticket_ID Dispute Date Disputed Amount           Transaction Type Recipient Mobile/Bank Number  Amount to be Recovered          Modus Response_Claimed product_type   product_name Terminal_Type   Payment_Result                                    fuzzy_device_id                              UDID                                     Status of UDID               Doublesafe_Event_ID Verification_Method     GMT_Verification Detected_Face_Score  No_of_Successful_Payments\\n0  135102968   2024-05-14         13095.0  Bills Payment via Balance        217020000000000000000                     0.0  Not Disclosed      False Claim    Acquiring  Bills Payment           APP  payment_success  eYOIkneQEouJo1GYmayzDIkPyQmTTAMpAfAsRERBd8FSIW...  IOS4Vq7nGw6GZOR3Uft5Uc1sSwdg0lVN  UDID is part of Device History, as the UDID ba...  731d5c0d72d8c3855284g61ab4987cf1              OTP_SMS 2023-12-23 09:00:17                  \\\\N                         15\"]},\"output_type\":\"execute_result\",\"execution_count\":86,\"final_output\":[\"<div>\\n<style scoped>\\n    .dataframe tbody tr th:only-of-type {\\n        vertical-align: middle;\\n    }\\n\\n    .dataframe tbody tr th {\\n        vertical-align: top;\\n    }\\n\\n    .dataframe thead th {\\n        text-align: right;\\n    }\\n<\/style>\\n<table border=\\\"1\\\" class=\\\"dataframe\\\">\\n  <thead>\\n    <tr style=\\\"text-align: right;\\\">\\n      <th><\/th>\\n      <th>Ticket_ID<\/th>\\n      <th>Dispute Date<\/th>\\n      <th>Disputed Amount<\/th>\\n      <th>Transaction Type<\/th>\\n      <th>Recipient Mobile/Bank Number<\/th>\\n      <th>Amount to be Recovered<\/th>\\n      <th>Modus<\/th>\\n      <th>Response_Claimed<\/th>\\n      <th>product_type<\/th>\\n      <th>product_name<\/th>\\n      <th>Terminal_Type<\/th>\\n      <th>Payment_Result<\/th>\\n      <th>fuzzy_device_id<\/th>\\n      <th>UDID<\/th>\\n      <th>Status of UDID<\/th>\\n      <th>Doublesafe_Event_ID<\/th>\\n      <th>Verification_Method<\/th>\\n      <th>GMT_Verification<\/th>\\n      <th>Detected_Face_Score<\/th>\\n      <th>No_of_Successful_Payments<\/th>\\n    <\/tr>\\n  <\/thead>\\n  <tbody>\\n    <tr>\\n      <th>0<\/th>\\n      <td>135102968<\/td>\\n      <td>2024-05-14<\/td>\\n      <td>13095.0<\/td>\\n      <td>Bills Payment via Balance<\/td>\\n      <td>217020000000000000000<\/td>\\n      <td>0.0<\/td>\\n      <td>Not Disclosed<\/td>\\n      <td>False Claim<\/td>\\n      <td>Acquiring<\/td>\\n      <td>Bills Payment<\/td>\\n      <td>APP<\/td>\\n      <td>payment_success<\/td>\\n      <td>eYOIkneQEouJo1GYmayzDIkPyQmTTAMpAfAsRERBd8FSIW...<\/td>\\n      <td>IOS4Vq7nGw6GZOR3Uft5Uc1sSwdg0lVN<\/td>\\n      <td>UDID is part of Device History, as the UDID ba...<\/td>\\n      <td>731d5c0d72d8c3855284g61ab4987cf1<\/td>\\n      <td>OTP_SMS<\/td>\\n      <td>2023-12-23 09:00:17<\/td>\\n      <td>\\\\N<\/td>\\n      <td>15<\/td>\\n    <\/tr>\\n  <\/tbody>\\n<\/table>\\n<\/div>\"]}],\"lineNumber\":false,\"laodmodel\":false,\"pre_cell_id\":0,\"is_pre_cell\":false,\"succORerr\":true,\"expand\":false,\"outputexpand\":false,\"readonly\":false,\"markDowns\":false,\"loader\":false,\"image\":\"\",\"error\":\"\",\"result\":\"\",\"algorithms\":\"\",\"semicolon\":\"\",\"cputimes\":\"\",\"showcputime\":false,\"secret\":[]},{\"id\":\"35695431341_0.18985407952859368\",\"conflict\":\"false\",\"code\":\"test = pd.DataFrame([{\\\"mobile_number\\\":9285344745,\\\"reference_id\\\":\\\"20240513121212800100170850501568243\\\",\\\"amount\\\":5716,\\\"date_time_transaction\\\":\\\"2024-05-13 13:28:20\\\",\\\"correlationId\\\":\\\"corr_1730975065989_6798999c-cd2c-4740-9cf5-8fcae0115278\\\"},{\\\"mobile_number\\\":9265626883,\\\"reference_id\\\":\\\"20240511121212800100170573899641646\\\",\\\"amount\\\":13095,\\\"date_time_transaction\\\":\\\"2024-05-11 00:45:44\\\",\\\"correlationId\\\":\\\"corr_1730974768092_9c5003bb-3d96-4e0a-971b-de3b35276b1c\\\"}])\\ntest\",\"count\":37,\"mode\":\"preview\",\"type\":\"code\",\"hover\":true,\"interrupt\":false,\"warning\":false,\"outputArray\":[],\"lineNumber\":false,\"laodmodel\":false,\"pre_cell_id\":0,\"is_pre_cell\":false,\"succORerr\":true,\"expand\":false,\"outputexpand\":false,\"readonly\":false,\"markDowns\":false,\"loader\":false,\"image\":\"\",\"error\":\"\",\"result\":\"\",\"algorithms\":\"\",\"semicolon\":\"\",\"cputimes\":\"\",\"showcputime\":false,\"secret\":[]},{\"id\":\"35695431341_0.47693127786882705\",\"conflict\":\"false\",\"code\":\"main_pipeline(test)\",\"count\":38,\"mode\":\"preview\",\"type\":\"code\",\"hover\":true,\"interrupt\":false,\"warning\":false,\"outputArray\":[\"\\n    The DoubleSafe Link Event ID: 731d5c0d72d8c3855284g61ab4987cf1\\n    Detected Face Score: \\\\N\\n    The Verification Method: OTP_SMS\\n    Time of Event Verification: 2023-12-23 09:00:17\\n     \\n\\nMinimum_transaction_date : 2023-03-14 12:56:07\\nReported_transaction_date: 2024-05-11 00:45:44\\nMaximum_transaction_date : 2024-05-18 09:25:39 \\n\\nUDID is:IOS4Vq7nGw6GZOR3Uft5Uc1sSwdg0lVN\\n\",{\"metadata\":{},\"data\":{\"text/html\":[\"<div>\\n<style scoped>\\n    .dataframe tbody tr th:only-of-type {\\n        vertical-align: middle;\\n    }\\n\\n    .dataframe tbody tr th {\\n        vertical-align: top;\\n    }\\n\\n    .dataframe thead th {\\n        text-align: right;\\n    }\\n<\/style>\\n<table border=\\\"1\\\" class=\\\"dataframe\\\">\\n  <thead>\\n    <tr style=\\\"text-align: right;\\\">\\n      <th><\/th>\\n      <th>Ticket_ID<\/th>\\n      <th>Dispute Date<\/th>\\n      <th>Disputed Amount<\/th>\\n      <th>Transaction Type<\/th>\\n      <th>Recipient Mobile/Bank Number<\/th>\\n      <th>Amount to be Recovered<\/th>\\n      <th>Modus<\/th>\\n      <th>Response_Claimed<\/th>\\n      <th>product_type<\/th>\\n      <th>product_name<\/th>\\n      <th>Terminal_Type<\/th>\\n      <th>Payment_Result<\/th>\\n      <th>fuzzy_device_id<\/th>\\n      <th>UDID<\/th>\\n      <th>Status of UDID<\/th>\\n      <th>Doublesafe_Event_ID<\/th>\\n      <th>Verification_Method<\/th>\\n      <th>GMT_Verification<\/th>\\n      <th>Detected_Face_Score<\/th>\\n      <th>No_of_Successful_Payments<\/th>\\n    <\/tr>\\n  <\/thead>\\n  <tbody>\\n    <tr>\\n      <th>0<\/th>\\n      <td>135102968<\/td>\\n      <td>2024-05-14<\/td>\\n      <td>13095.0<\/td>\\n      <td>Bills Payment via Balance<\/td>\\n      <td>217020000000000000000<\/td>\\n      <td>0.0<\/td>\\n      <td>Not Disclosed<\/td>\\n      <td>False Claim<\/td>\\n      <td>Acquiring<\/td>\\n      <td>Bills Payment<\/td>\\n      <td>APP<\/td>\\n      <td>payment_success<\/td>\\n      <td>eYOIkneQEouJo1GYmayzDIkPyQmTTAMpAfAsRERBd8FSIW...<\/td>\\n      <td>IOS4Vq7nGw6GZOR3Uft5Uc1sSwdg0lVN<\/td>\\n      <td>UDID is part of Device History, as the UDID ba...<\/td>\\n      <td>731d5c0d72d8c3855284g61ab4987cf1<\/td>\\n      <td>OTP_SMS<\/td>\\n      <td>2023-12-23 09:00:17<\/td>\\n      <td>\\\\N<\/td>\\n      <td>15<\/td>\\n    <\/tr>\\n  <\/tbody>\\n<\/table>\\n<\/div>\"],\"text/plain\":[\"   Ticket_ID Dispute Date Disputed Amount           Transaction Type Recipient Mobile/Bank Number  Amount to be Recovered          Modus Response_Claimed product_type   product_name Terminal_Type   Payment_Result                                    fuzzy_device_id                              UDID                                     Status of UDID               Doublesafe_Event_ID Verification_Method     GMT_Verification Detected_Face_Score  No_of_Successful_Payments\\n0  135102968   2024-05-14         13095.0  Bills Payment via Balance        217020000000000000000                     0.0  Not Disclosed      False Claim    Acquiring  Bills Payment           APP  payment_success  eYOIkneQEouJo1GYmayzDIkPyQmTTAMpAfAsRERBd8FSIW...  IOS4Vq7nGw6GZOR3Uft5Uc1sSwdg0lVN  UDID is part of Device History, as the UDID ba...  731d5c0d72d8c3855284g61ab4987cf1              OTP_SMS 2023-12-23 09:00:17                  \\\\N                         15\"]},\"output_type\":\"execute_result\",\"execution_count\":89,\"final_output\":[\"<div>\\n<style scoped>\\n    .dataframe tbody tr th:only-of-type {\\n        vertical-align: middle;\\n    }\\n\\n    .dataframe tbody tr th {\\n        vertical-align: top;\\n    }\\n\\n    .dataframe thead th {\\n        text-align: right;\\n    }\\n<\/style>\\n<table border=\\\"1\\\" class=\\\"dataframe\\\">\\n  <thead>\\n    <tr style=\\\"text-align: right;\\\">\\n      <th><\/th>\\n      <th>Ticket_ID<\/th>\\n      <th>Dispute Date<\/th>\\n      <th>Disputed Amount<\/th>\\n      <th>Transaction Type<\/th>\\n      <th>Recipient Mobile/Bank Number<\/th>\\n      <th>Amount to be Recovered<\/th>\\n      <th>Modus<\/th>\\n      <th>Response_Claimed<\/th>\\n      <th>product_type<\/th>\\n      <th>product_name<\/th>\\n      <th>Terminal_Type<\/th>\\n      <th>Payment_Result<\/th>\\n      <th>fuzzy_device_id<\/th>\\n      <th>UDID<\/th>\\n      <th>Status of UDID<\/th>\\n      <th>Doublesafe_Event_ID<\/th>\\n      <th>Verification_Method<\/th>\\n      <th>GMT_Verification<\/th>\\n      <th>Detected_Face_Score<\/th>\\n      <th>No_of_Successful_Payments<\/th>\\n    <\/tr>\\n  <\/thead>\\n  <tbody>\\n    <tr>\\n      <th>0<\/th>\\n      <td>135102968<\/td>\\n      <td>2024-05-14<\/td>\\n      <td>13095.0<\/td>\\n      <td>Bills Payment via Balance<\/td>\\n      <td>217020000000000000000<\/td>\\n      <td>0.0<\/td>\\n      <td>Not Disclosed<\/td>\\n      <td>False Claim<\/td>\\n      <td>Acquiring<\/td>\\n      <td>Bills Payment<\/td>\\n      <td>APP<\/td>\\n      <td>payment_success<\/td>\\n      <td>eYOIkneQEouJo1GYmayzDIkPyQmTTAMpAfAsRERBd8FSIW...<\/td>\\n      <td>IOS4Vq7nGw6GZOR3Uft5Uc1sSwdg0lVN<\/td>\\n      <td>UDID is part of Device History, as the UDID ba...<\/td>\\n      <td>731d5c0d72d8c3855284g61ab4987cf1<\/td>\\n      <td>OTP_SMS<\/td>\\n      <td>2023-12-23 09:00:17<\/td>\\n      <td>\\\\N<\/td>\\n      <td>15<\/td>\\n    <\/tr>\\n  <\/tbody>\\n<\/table>\\n<\/div>\"]}],\"lineNumber\":false,\"laodmodel\":false,\"pre_cell_id\":0,\"is_pre_cell\":false,\"succORerr\":true,\"expand\":false,\"outputexpand\":false,\"readonly\":false,\"markDowns\":false,\"loader\":false,\"image\":\"\",\"error\":\"\",\"result\":\"\",\"algorithms\":\"\",\"semicolon\":\"\",\"cputimes\":\"\",\"showcputime\":false,\"secret\":[]},{\"id\":\"35695431341_0.5234699228626007\",\"conflict\":\"false\",\"code\":\"# Real main_Pipeline used from the start\",\"count\":39,\"mode\":\"preview\",\"type\":\"markdown\",\"hover\":true,\"interrupt\":false,\"warning\":false,\"outputArray\":[],\"lineNumber\":false,\"laodmodel\":false,\"pre_cell_id\":0,\"is_pre_cell\":false,\"succORerr\":true,\"expand\":false,\"outputexpand\":false,\"readonly\":false,\"markDowns\":false,\"loader\":false,\"image\":\"\",\"error\":\"\",\"algorithms\":\"\",\"semicolon\":\"\",\"cputimes\":\"\",\"showcputime\":false,\"secret\":[],\"result\":\"\"},{\"id\":\"35695431341_0.15140739361726174\",\"conflict\":\"false\",\"code\":\"# def main_pipeline(inputs):\\n#     input_date_time = pd.to_datetime(inputs[\\\"date_time_transaction\\\"].iloc[-1])\\n#     try:\\n#         ticket_id, dispute_date, dispute_amount, Transaction_type, Recipient_Mobile_Bank_Number, amt_be_recovered, Modus, claim,CXM_data = user_1_CXM(inputs, input_date_time, df_CXM)\\n#         product_type, product_name, new_df = user_1_A_records(inputs,input_date_time,df_A_Records)\\n#         terminal_type,result_pay_result,fuzzy_device_id,login_udid,txn = user_2_terminal_type(inputs,result_logs,dispute_amount) \\n#         if terminal_type == \\\"APP\\\":\\n#             logging.info(\\\"Terminal Type is APP:\\\")\\n#             event_id_doublesafe, face_score, verification_method, gmt_occur_face_verification, filter_safe = user_2_face_score(terminal_type,df_doublesafe,login_udid)\\n#             max_date, min_date,status = user_2_UDID_history_check(df_Logs_UDID,login_udid,input_date_time)   \\n#             number_successful_payment = user_2_successfull_txn(df_logs_inapp,login_udid)\\n       \\n#             return pd.DataFrame({\\\"Ticket_ID\\\" : [ticket_id],\\n#                 \\\"Dispute Date\\\": [dispute_date],\\n#                 \\\"Disputed Amount\\\": [dispute_amount],\\n#                 \\\"Transaction Type\\\": [Transaction_type],\\n#                 \\\"Recipient Mobile/Bank Number\\\": [Recipient_Mobile_Bank_Number],\\n#                 \\\"Amount to be Recovered\\\": [amt_be_recovered],\\n#                 \\\"Modus\\\": [Modus],\\n#                 \\\"Response_Claimed\\\": [claim],\\n#                 \\\"product_type\\\": [product_type],\\n#                 \\\"product_name\\\": [product_name],\\n#                 \\\"Terminal_Type\\\":[terminal_type],\\n#                 \\\"Payment_Result\\\":[result_pay_result],\\n#                 \\\"fuzzy_device_id\\\":[fuzzy_device_id],\\n#                 \\\"UDID\\\":[login_udid],\\n#                 \\\"Status of UDID\\\":[status],\\n#                 \\\"Doublesafe_Event_ID\\\" :[event_id_doublesafe],\\n#                 \\\"Verification_Method \\\":[verification_method],\\n#                 \\\"GMT_Verification\\\":[gmt_occur_face_verification],\\n#                 \\\"Detected_Face_Score\\\":[face_score]  ,\\n#                 \\\"No_of_Successful_Payments\\\":[number_successful_payment]\\n#                 })\\n#         else:\\n#             #user Story 3 starts\\n#             logging.info(\\\"User Story 3\\\")\\n#             OTP_Status = user_story_3_updated(inputs,df_kibana)\\n#             logging.info(\\\"User Story 4\\\")\\n#             # User Story 4 checks!\\n#             df_safe = user_story_4(result_logs,df_Logs_UDID,inputs,fuzzy_device_id) \\n#             face_scores_ = []\\n#             occur_dates = []\\n#             message = \\\" \\\"\\n#             # USer Story 4 checks if Face is detected Else Moves to Kibana logs and merge user story 6(Since Face not detected)\\n            \\n#             # Check if 'ZOLOZ_FACE' exists in the 'result_verification_method' column\\n#             if 'ZOLOZ_FACE' in df_safe[\\\"result_verification_method\\\"].values:\\n#                 # Collect all face scores and occurrence dates as lists\\n#                 face_scores_ = df_safe[\\\"face_score\\\"].tolist()\\n#                 occur_dates = df_safe[\\\"gmt_occur\\\"].tolist()\\n#                 result_dict = {\\\"face_score\\\": face_scores_, \\\"gmt_occur\\\": occur_dates}\\n#                 df_safe = df_safe[df_safe[\\\"result_verification_method\\\"]=='ZOLOZ_FACE']                \\n#             else:\\n#                 kibana_df = df_kibana[(df_kibana[\\\"destinationNumber\\\"]==str(inputs.mobile_number.iloc[-1]))]\\n#                 date_check = inputs[\\\"date_time_transaction\\\"].iloc[-1].split(\\\" \\\")[0]\\n#                 if \\\"MAC_SMS\\\" in kibana_df[kibana_df[\\\"Time\\\"]==date_check][\\\"sourceNumber\\\"].values:\\n#                     message = \\\"There is MAC-SMS\\\"\\n# #                     claim_response = \\\"It has MAC-SMS, hence its a False Claim !\\\"\\n#                 else:\\n#                     message = \\\"NO MAC-SMS\\\"\\n# #                     claim_response = \\\"NO MAC-SMS,hence ATO case !!\\\"\\n\\n                \\n#             # User Story 5:\\n#             if len(face_scores_) > 0:\\n#                 for i,val in enumerate(face_scores_):\\n#                     gmt = occur_dates[i]\\n#                     try:\\n#                         if int(val) >= 63:\\n\\n#                             claim_response = f\\\"Face Match and False Claim!\\\"\\n#                         else:\\n#                             claim_response = f\\\"Not a face Match and ATO case\\\"\\n                        \\n#                     except ValueError:\\n#                         logging.info(f\\\"{gmt}: corresponding face score not detected properly\\\")\\n#             #User story 6\\n#             else:\\n#                 kibana_df = df_kibana[(df_kibana[\\\"destinationNumber\\\"]==str(inputs.mobile_number.iloc[-1]))]\\n#                 date_check = inputs[\\\"date_time_transaction\\\"].iloc[-1].split(\\\" \\\")[0]\\n#                 if \\\"MAC_SMS\\\" in kibana_df[kibana_df[\\\"Time\\\"]==date_check][\\\"sourceNumber\\\"].values:\\n#                     claim_response = \\\"It has MAC-SMS, hence its a False Claim !\\\"\\n#                 else:\\n#                     claim_response = \\\"NO MAC-SMS,hence ATO case !!\\\"\\n\\n#             merchant_id = new_df[\\\"Merchant Trans ID\\\"].iloc[-1]\\n#             A_txn_id = new_df[\\\"A+ Transaction ID\\\"].iloc[-1]  \\n            \\n#             return pd.DataFrame({\\\"Ticket_ID\\\" : [ticket_id],\\n#                 \\\"Dispute Date\\\": [dispute_date],\\n#                 \\\"Disputed Amount\\\": [dispute_amount],\\n#                 \\\"Transaction Type\\\": [Transaction_type],\\n#                 \\\"product_type\\\": [product_type],\\n#                 \\\"product_name\\\": [product_name],\\n#                 \\\"fuzzy_device_id\\\":[fuzzy_device_id],\\n#                 \\\"Terminal_Type\\\":[terminal_type],\\n#                 \\\"OTP_Status\\\":[OTP_Status],\\n#                 \\\"Face_Scores\\\":[face_scores_],\\n#                 \\\"Message\\\":[message],\\n#                 \\\"Response_Claimed\\\":[claim_response],\\n#                 \\\"Merchant_id\\\":[merchant_id],\\n#                 \\\"A+ Transaction ID\\\":[A_txn_id]})\\n        \\n#     except ValueError as e:\\n#         ticket_id, dispute_date, dispute_amount, Transaction_type, Recipient_Mobile_Bank_Number, amt_be_recovered, Modus, claim, = None,None,None,None,None,None,None,None\\n#         logging.info(f\\\"Response: {e}\\\")\\n        \",\"count\":40,\"mode\":\"preview\",\"type\":\"code\",\"hover\":true,\"interrupt\":false,\"warning\":false,\"outputArray\":[],\"lineNumber\":false,\"laodmodel\":false,\"pre_cell_id\":0,\"is_pre_cell\":false,\"succORerr\":true,\"expand\":false,\"outputexpand\":false,\"readonly\":false,\"markDowns\":false,\"loader\":false,\"image\":\"\",\"error\":\"\",\"result\":\"\",\"algorithms\":\"\",\"semicolon\":\"\",\"cputimes\":\"\",\"showcputime\":false,\"secret\":[]},{\"id\":\"35695431341_0.9687816784520948\",\"conflict\":\"false\",\"code\":\"# df_safe\",\"count\":41,\"mode\":\"preview\",\"type\":\"code\",\"hover\":true,\"interrupt\":false,\"warning\":false,\"outputArray\":[],\"lineNumber\":false,\"laodmodel\":false,\"pre_cell_id\":0,\"is_pre_cell\":false,\"succORerr\":true,\"expand\":false,\"outputexpand\":false,\"readonly\":false,\"markDowns\":false,\"loader\":false,\"image\":\"\",\"error\":\"\",\"result\":\"\",\"algorithms\":\"\",\"semicolon\":\"\",\"cputimes\":\"\",\"showcputime\":false,\"secret\":[]},{\"id\":\"35695431341_0.3074782038372561\",\"conflict\":\"false\",\"code\":\"# PIPELINE TEST\",\"count\":42,\"mode\":\"preview\",\"type\":\"markdown\",\"hover\":true,\"interrupt\":false,\"warning\":false,\"outputArray\":[],\"lineNumber\":false,\"laodmodel\":false,\"pre_cell_id\":0,\"is_pre_cell\":false,\"succORerr\":true,\"expand\":false,\"outputexpand\":false,\"readonly\":false,\"markDowns\":false,\"loader\":false,\"image\":\"\",\"error\":\"\",\"algorithms\":\"\",\"semicolon\":\"\",\"cputimes\":\"\",\"showcputime\":false,\"secret\":[],\"result\":\"\"},{\"id\":\"35695431341_0.7752591016159789\",\"conflict\":\"false\",\"code\":\"data = pd.DataFrame([{\\\"mobile_number\\\":9537876847,\\\"reference_id\\\":\\\"20240427121212800110170132367039550\\\",\\\"amount\\\":5898.0,\\\"date_time_transaction\\\":\\\"2024-04-27 01:19:24\\\",\\\"correlationId\\\":\\\"corr_1730888878527_e1f435ac-2fba-482e-9bfb-0f841f2b7632\\\"},{\\\"mobile_number\\\":9537876847,\\\"reference_id\\\":\\\"20240427121212800110170132367039550\\\",\\\"amount\\\":\\\"5898.0\\\",\\\"date_time_transaction\\\":\\\"2024-04-27 01:19:24\\\",\\\"correlationId\\\":\\\"corr_1730888830132_144419f2-5a5c-4861-b607-86f0c293fcd8\\\"},{\\\"mobile_number\\\":9537876847,\\\"reference_id\\\":\\\"20240427121212800110170132367039550\\\",\\\"amount\\\":5898,\\\"date_time_transaction\\\":\\\"2024-04-27 01:19:24\\\",\\\"correlationId\\\":\\\"corr_1730888443039_ef5ac2cd-ba59-4270-8f29-0d4d89b81284\\\"},{\\\"mobile_number\\\":9537876847,\\\"reference_id\\\":\\\"20240427121212800110170132367039550\\\",\\\"amount\\\":5898,\\\"date_time_transaction\\\":\\\"2024-04-27 01:19:24\\\",\\\"correlationId\\\":\\\"corr_1730888384649_ca1c32d2-913f-4f5c-996d-9990aea7fbee\\\"},{\\\"mobile_number\\\":9537876847,\\\"reference_id\\\":\\\"20240427121212800110170132367039550\\\",\\\"amount\\\":5898,\\\"date_time_transaction\\\":\\\"2024-04-27 01:19:24\\\",\\\"correlationId\\\":\\\"corr_1730888106468_ca39a960-f277-4cc8-8106-d3e0de5d25f4\\\"},{\\\"mobile_number\\\":9537876847,\\\"reference_id\\\":\\\"20240427121212800110170132367039550\\\",\\\"amount\\\":5898,\\\"date_time_transaction\\\":\\\"2024-04-27 01:19:24\\\",\\\"correlationId\\\":\\\"corr_1730887852321_5a6bd7a0-892f-465d-b950-d99790a48b33\\\"},{\\\"mobile_number\\\":9537876847,\\\"reference_id\\\":\\\"20240427121212800110170132367039550\\\",\\\"amount\\\":5898,\\\"date_time_transaction\\\":\\\"2024-04-27 01:19:24\\\",\\\"correlationId\\\":\\\"corr_1730887430785_c2f6da4f-1b89-4d75-afed-2a410010aa4d\\\"},{\\\"mobile_number\\\":9535728463,\\\"reference_id\\\":\\\"20240424121212800110170864274019098\\\",\\\"amount\\\":17936,\\\"date_time_transaction\\\":\\\"2024-04-24 09:21:16\\\",\\\"correlationId\\\":\\\"corr_1730887132854_d6ff451e-77aa-4bbb-bef3-ca4b9b3f3e92\\\"},{\\\"mobile_number\\\":9535728463,\\\"reference_id\\\":\\\"20240424121212800110170864274019098\\\",\\\"amount\\\":17936,\\\"date_time_transaction\\\":\\\"2024-04-24 09:21:16\\\",\\\"correlationId\\\":\\\"corr_1730886774224_1dd222ff-5243-459a-a2b3-3be5ef79936c\\\"},{\\\"mobile_number\\\":9535728463,\\\"reference_id\\\":\\\"20240424121212800110170864274019098\\\",\\\"amount\\\":17936,\\\"date_time_transaction\\\":\\\"2024-04-24 09:21:16\\\",\\\"correlationId\\\":\\\"corr_1730886471908_d6774ea0-b4cd-4806-ae6f-6fc21f99d1bf\\\"}])\",\"count\":43,\"mode\":\"preview\",\"type\":\"code\",\"hover\":true,\"interrupt\":false,\"warning\":false,\"outputArray\":[],\"lineNumber\":false,\"laodmodel\":false,\"pre_cell_id\":0,\"is_pre_cell\":false,\"succORerr\":true,\"expand\":false,\"outputexpand\":false,\"readonly\":false,\"markDowns\":false,\"loader\":false,\"image\":\"\",\"error\":\"\",\"result\":\"\",\"algorithms\":\"\",\"semicolon\":\"\",\"cputimes\":\"\",\"showcputime\":false,\"secret\":[]},{\"id\":\"35695431341_0.004112343211343683\",\"conflict\":\"false\",\"code\":\"data\",\"count\":44,\"mode\":\"preview\",\"type\":\"code\",\"hover\":true,\"interrupt\":false,\"warning\":false,\"outputArray\":[],\"lineNumber\":false,\"laodmodel\":false,\"pre_cell_id\":0,\"is_pre_cell\":false,\"succORerr\":true,\"expand\":false,\"outputexpand\":false,\"readonly\":false,\"markDowns\":false,\"loader\":false,\"image\":\"\",\"error\":\"\",\"result\":\"\",\"algorithms\":\"\",\"semicolon\":\"\",\"cputimes\":\"\",\"showcputime\":false,\"secret\":[]},{\"id\":\"35695431341_0.9535771284648469\",\"conflict\":\"false\",\"code\":\"data = pd.DataFrame([{\\\"mobile_number\\\":9537876847,\\\"reference_id\\\":\\\"20240427121212800110170132367039550\\\",\\\"amount\\\":5898,\\\"date_time_transaction\\\":\\\"2024-04-27 01:19:24\\\",\\\"correlationId\\\":\\\"corr_1730957564682_b72aee88-ba46-4106-a201-c28681888f35\\\"},{\\\"mobile_number\\\":9537876847,\\\"reference_id\\\":\\\"20240427121212800110170132367039550\\\",\\\"amount\\\":5898,\\\"date_time_transaction\\\":\\\"2024-04-27 01:19:24\\\",\\\"correlationId\\\":\\\"corr_1730957352513_18f3860e-09bd-44b5-ad3e-5017d1f386ee\\\"},{\\\"mobile_number\\\":9537876847,\\\"reference_id\\\":\\\"20240427121212800110170132367039550\\\",\\\"amount\\\":5898,\\\"date_time_transaction\\\":\\\"2024-04-27 01:19:24\\\",\\\"correlationId\\\":\\\"corr_1730902017089_ba7da5a6-ceb2-4ee0-b420-0aff4303bcda\\\"},{\\\"mobile_number\\\":9537876847,\\\"reference_id\\\":\\\"20240427121212800110170132367039550\\\",\\\"amount\\\":5898,\\\"date_time_transaction\\\":\\\"2024-04-27 01:19:24\\\",\\\"correlationId\\\":\\\"corr_1730902012186_6df00477-d681-418e-a4f1-c2d6de812261\\\"},{\\\"mobile_number\\\":9537876847,\\\"reference_id\\\":\\\"20240427121212800110170132367039550\\\",\\\"amount\\\":5898,\\\"date_time_transaction\\\":\\\"2024-04-27 01:19:24\\\",\\\"correlationId\\\":\\\"corr_1730902012186_6df00477-d681-418e-a4f1-c2d6de812261\\\"},{\\\"mobile_number\\\":9537876847,\\\"reference_id\\\":\\\"20240427121212800110170132367039550\\\",\\\"amount\\\":5898,\\\"date_time_transaction\\\":\\\"2024-04-27 01:19:24\\\",\\\"correlationId\\\":\\\"corr_1730901930241_f106dbef-7f0c-4b33-ae5a-8155fde9101a\\\"},{\\\"mobile_number\\\":9537876847,\\\"reference_id\\\":\\\"20240427121212800110170132367039550\\\",\\\"amount\\\":5898,\\\"date_time_transaction\\\":\\\"2024-04-27 01:19:24\\\",\\\"correlationId\\\":\\\"corr_1730901914799_50fe0568-c276-4bac-97ec-ae980a53d0eb\\\"},{\\\"mobile_number\\\":9537876847,\\\"reference_id\\\":\\\"20240427121212800110170132367039550\\\",\\\"amount\\\":5898,\\\"date_time_transaction\\\":\\\"2024-04-27 01:19:24\\\",\\\"correlationId\\\":\\\"corr_1730901249899_d9d7781a-856a-4fa3-b5fc-7766b6303743\\\"},{\\\"mobile_number\\\":9537876847,\\\"reference_id\\\":\\\"20240427121212800110170132367039550\\\",\\\"amount\\\":5898,\\\"date_time_transaction\\\":\\\"2024-04-27 01:19:24\\\",\\\"correlationId\\\":\\\"corr_1730900878175_aafec6de-c402-444b-bea2-6c9ba633e1df\\\"},{\\\"mobile_number\\\":9537876847,\\\"reference_id\\\":\\\"20240427121212800110170132367039550\\\",\\\"amount\\\":5898,\\\"date_time_transaction\\\":\\\"2024-04-27 01:19:24\\\",\\\"correlationId\\\":\\\"corr_1730900130003_b04e3572-b18e-4ca7-9928-4edab7199803\\\"}])\\ndata.info()\",\"count\":45,\"mode\":\"preview\",\"type\":\"code\",\"hover\":true,\"interrupt\":false,\"warning\":false,\"outputArray\":[],\"lineNumber\":false,\"laodmodel\":false,\"pre_cell_id\":0,\"is_pre_cell\":false,\"succORerr\":true,\"expand\":false,\"outputexpand\":false,\"readonly\":false,\"markDowns\":false,\"loader\":false,\"image\":\"\",\"error\":\"\",\"result\":\"\",\"algorithms\":\"\",\"semicolon\":\"\",\"cputimes\":\"\",\"showcputime\":false,\"secret\":[]},{\"id\":\"35695431341_0.9282701150710784\",\"conflict\":\"false\",\"code\":\"main_pipeline(data)\",\"count\":46,\"mode\":\"preview\",\"type\":\"code\",\"hover\":true,\"interrupt\":false,\"warning\":false,\"outputArray\":[\"Cohort Value: AND0IzByle2g1oRb5l319Z1g02Id2sSF\\n\",{\"metadata\":{},\"data\":{\"text/html\":[\"<div>\\n<style scoped>\\n    .dataframe tbody tr th:only-of-type {\\n        vertical-align: middle;\\n    }\\n\\n    .dataframe tbody tr th {\\n        vertical-align: top;\\n    }\\n\\n    .dataframe thead th {\\n        text-align: right;\\n    }\\n<\/style>\\n<table border=\\\"1\\\" class=\\\"dataframe\\\">\\n  <thead>\\n    <tr style=\\\"text-align: right;\\\">\\n      <th><\/th>\\n      <th>Ticket_ID<\/th>\\n      <th>Dispute Date<\/th>\\n      <th>Disputed Amount<\/th>\\n      <th>Transaction Type<\/th>\\n      <th>product_type<\/th>\\n      <th>product_name<\/th>\\n      <th>fuzzy_device_id<\/th>\\n      <th>Terminal_Type<\/th>\\n      <th>OTP_Status<\/th>\\n      <th>Face_Scores<\/th>\\n      <th>Message<\/th>\\n      <th>Response_Claimed<\/th>\\n      <th>Merchant_id<\/th>\\n      <th>A+ Transaction ID<\/th>\\n    <\/tr>\\n  <\/thead>\\n  <tbody>\\n    <tr>\\n      <th>0<\/th>\\n      <td>132999295<\/td>\\n      <td>2024-05-01<\/td>\\n      <td>5898.0<\/td>\\n      <td>Online Payment via Ggives<\/td>\\n      <td>Acquiring<\/td>\\n      <td>Online Payment - Web Pay<\/td>\\n      <td>cYmIkhBgO92LGAE0B5b4XLBHv+Tx8y3OT0qpploff7JUi0...<\/td>\\n      <td>WAP<\/td>\\n      <td>No OTP<\/td>\\n      <td>[71, 73, 73, 71, 72]<\/td>\\n      <td><\/td>\\n      <td>Face Match and False Claim!<\/td>\\n      <td>AgYAAoszzym5A0Wdlvjpv4TEUCUK<\/td>\\n      <td>20240427121212800110170132367039550<\/td>\\n    <\/tr>\\n  <\/tbody>\\n<\/table>\\n<\/div>\"],\"text/plain\":[\"   Ticket_ID Dispute Date Disputed Amount           Transaction Type product_type              product_name                                    fuzzy_device_id Terminal_Type OTP_Status           Face_Scores Message             Response_Claimed                   Merchant_id                    A+ Transaction ID\\n0  132999295   2024-05-01          5898.0  Online Payment via Ggives    Acquiring  Online Payment - Web Pay  cYmIkhBgO92LGAE0B5b4XLBHv+Tx8y3OT0qpploff7JUi0...           WAP     No OTP  [71, 73, 73, 71, 72]          Face Match and False Claim!  AgYAAoszzym5A0Wdlvjpv4TEUCUK  20240427121212800110170132367039550\"]},\"output_type\":\"execute_result\",\"execution_count\":76,\"final_output\":[\"<div>\\n<style scoped>\\n    .dataframe tbody tr th:only-of-type {\\n        vertical-align: middle;\\n    }\\n\\n    .dataframe tbody tr th {\\n        vertical-align: top;\\n    }\\n\\n    .dataframe thead th {\\n        text-align: right;\\n    }\\n<\/style>\\n<table border=\\\"1\\\" class=\\\"dataframe\\\">\\n  <thead>\\n    <tr style=\\\"text-align: right;\\\">\\n      <th><\/th>\\n      <th>Ticket_ID<\/th>\\n      <th>Dispute Date<\/th>\\n      <th>Disputed Amount<\/th>\\n      <th>Transaction Type<\/th>\\n      <th>product_type<\/th>\\n      <th>product_name<\/th>\\n      <th>fuzzy_device_id<\/th>\\n      <th>Terminal_Type<\/th>\\n      <th>OTP_Status<\/th>\\n      <th>Face_Scores<\/th>\\n      <th>Message<\/th>\\n      <th>Response_Claimed<\/th>\\n      <th>Merchant_id<\/th>\\n      <th>A+ Transaction ID<\/th>\\n    <\/tr>\\n  <\/thead>\\n  <tbody>\\n    <tr>\\n      <th>0<\/th>\\n      <td>132999295<\/td>\\n      <td>2024-05-01<\/td>\\n      <td>5898.0<\/td>\\n      <td>Online Payment via Ggives<\/td>\\n      <td>Acquiring<\/td>\\n      <td>Online Payment - Web Pay<\/td>\\n      <td>cYmIkhBgO92LGAE0B5b4XLBHv+Tx8y3OT0qpploff7JUi0...<\/td>\\n      <td>WAP<\/td>\\n      <td>No OTP<\/td>\\n      <td>[71, 73, 73, 71, 72]<\/td>\\n      <td><\/td>\\n      <td>Face Match and False Claim!<\/td>\\n      <td>AgYAAoszzym5A0Wdlvjpv4TEUCUK<\/td>\\n      <td>20240427121212800110170132367039550<\/td>\\n    <\/tr>\\n  <\/tbody>\\n<\/table>\\n<\/div>\"]}],\"lineNumber\":false,\"laodmodel\":false,\"pre_cell_id\":0,\"is_pre_cell\":false,\"succORerr\":true,\"expand\":false,\"outputexpand\":false,\"readonly\":false,\"markDowns\":false,\"loader\":false,\"image\":\"\",\"error\":\"\",\"result\":\"\",\"algorithms\":\"\",\"semicolon\":\"\",\"cputimes\":\"\",\"showcputime\":false,\"secret\":[]},{\"id\":\"35695431341_0.2178211900852105\",\"conflict\":\"false\",\"code\":\"# fil_num\\n# # filtered_number = result_df[result_df[\\\"user_mobile\\\"]==inputs[\\\"mobile_number\\\"].iloc[-1]]\\n# # filters = filtered_number[filtered_number[\\\"event_amt\\\"] == str(inputs[\\\"amount\\\"].iloc[-1])]\\n# fil\",\"count\":47,\"mode\":\"preview\",\"type\":\"code\",\"hover\":true,\"interrupt\":false,\"warning\":false,\"outputArray\":[],\"lineNumber\":false,\"laodmodel\":false,\"pre_cell_id\":0,\"is_pre_cell\":false,\"succORerr\":true,\"expand\":false,\"outputexpand\":false,\"readonly\":false,\"markDowns\":false,\"loader\":false,\"image\":\"\",\"error\":\"\",\"result\":\"\",\"algorithms\":\"\",\"semicolon\":\"\",\"cputimes\":\"\",\"showcputime\":false,\"secret\":[]},{\"id\":\"35695431341_0.6163067289250383\",\"conflict\":\"false\",\"code\":\"str(float(data[\\\"amount\\\"].iloc[-1]))\",\"count\":48,\"mode\":\"preview\",\"type\":\"code\",\"hover\":true,\"interrupt\":false,\"warning\":false,\"outputArray\":[],\"lineNumber\":false,\"laodmodel\":false,\"pre_cell_id\":0,\"is_pre_cell\":false,\"succORerr\":true,\"expand\":false,\"outputexpand\":false,\"readonly\":false,\"markDowns\":false,\"loader\":false,\"image\":\"\",\"error\":\"\",\"result\":\"\",\"algorithms\":\"\",\"semicolon\":\"\",\"cputimes\":\"\",\"showcputime\":false,\"secret\":[]},{\"id\":\"35695431341_0.5308996555054082\",\"conflict\":\"false\",\"code\":\"# dt = pd.DataFrame([[{\\\"mobile_number\\\":9285344745,\\\"reference_id\\\":\\\"20240513121212800100170850501568243\\\",\\\"amount\\\":5716.0,\\\"date_time_transaction\\\":\\\"2024-05-13 13:28:20\\\",\\\"correlationId\\\":\\\"corr_1730975065989_6798999c-cd2c-4740-9cf5-8fcae0115278\\\"},{\\\"mobile_number\\\":9265626883,\\\"reference_id\\\":\\\"20240511121212800100170573899641646\\\",\\\"amount\\\":13095,\\\"date_time_transaction\\\":\\\"2024-05-11 00:45:44\\\",\\\"correlationId\\\":\\\"corr_1730974768092_9c5003bb-3d96-4e0a-971b-de3b35276b1c\\\"}]])\\n# # user_1_A_records(dt,input_date_time,df_A_Records)\\n# # matching_records,filtered_df\\n# main_pipeline(dt)\",\"count\":49,\"mode\":\"preview\",\"type\":\"code\",\"hover\":true,\"interrupt\":false,\"warning\":false,\"outputArray\":[],\"lineNumber\":false,\"laodmodel\":false,\"pre_cell_id\":0,\"is_pre_cell\":false,\"succORerr\":false,\"expand\":false,\"outputexpand\":false,\"readonly\":false,\"markDowns\":false,\"loader\":false,\"image\":\"\",\"result\":\"\",\"error\":\"\",\"algorithms\":\"\",\"semicolon\":\"\",\"cputimes\":\"\",\"showcputime\":false,\"secret\":[]}],\"kernalID\":\"a3033965-b90b-4b8c-8a51-94d673ccf2bd\",\"Algorithms\":[],\"isScheduled\":0,\"last_modified_date\":\"\"}","isImported":0,"customComponentscript":"{\"DSLAB_content\":\"[{\\\"id\\\":\\\"0_0.5344366003691956\\\",\\\"code\\\":\\\"import pandas as pd\\\\nimport numpy as np\\\\nimport matplotlib.pyplot as plt\\\\nimport logging\\\\nimport re\\\\nfrom datetime import datetime\\\\nimport json\\\\nfrom Notebook.DSNotebook.NotebookExecutor import NotebookExecutor\\\\nnb = NotebookExecutor()\\\",\\\"count\\\":0,\\\"error\\\":\\\"\\\",\\\"type\\\":\\\"code\\\",\\\"ischecked\\\":true},{\\\"id\\\":\\\"0_0.6959620921153264\\\",\\\"code\\\":\\\"df_CXM = nb.get_data('11111727249579788', '@SYS.USERID', 'True', {}, [])\\\\ndf_A_Records = nb.get_data('11111727249094446', '@SYS.USERID', 'True', {}, [])\\\\ndf_logs_inapp = nb.get_data('11111727250179094', '@SYS.USERID', 'True', {}, [])\\\\ndf_Logs_Fuzzy = nb.get_data('11111727249902767', '@SYS.USERID', 'True', {}, [])\\\\ndf_Logs_UDID = nb.get_data('11111727249921283', '@SYS.USERID', 'True', {}, [])\\\\ndf_logs_sms = nb.get_data('11111727250139530', '@SYS.USERID', 'True', {}, [])\\\\ndf_kibana = nb.get_data('11111727250122271', '@SYS.USERID', 'True', {}, [])\\\\ndf_doublesafe = nb.get_data('11111727249973467', '@SYS.USERID', 'True', {}, [])\\\\ndf_logs_web = nb.get_data('11111727250196261', '@SYS.USERID', 'True', {}, [])\\\\n\\\",\\\"count\\\":0,\\\"error\\\":\\\"\\\",\\\"type\\\":\\\"code\\\",\\\"ischecked\\\":true},{\\\"id\\\":\\\"0_0.4079390879261222\\\",\\\"code\\\":\\\"df_CXM[\\\\\\\"Date_Transaction\\\\\\\"] = pd.to_datetime(pd.to_datetime(df_CXM[\\\\\\\"Date and Time of Transaction\\\\\\\"]).dt.date)\\\\ndf_CXM['Date and Time of Transaction'] = pd.to_datetime(df_CXM['Date and Time of Transaction'])\\\\ndf_CXM.rename({\\\\\\\"Complainant's\\\\\\\\nMobile# (Test Numbers)\\\\\\\":\\\\\\\"mobile_number\\\\\\\"},axis=1,inplace=True)\\\\ndf_kibana = df_kibana[~(df_kibana[\\\\\\\"Time\\\\\\\"]==\\\\\\\"Time\\\\\\\")]\\\",\\\"count\\\":0,\\\"error\\\":\\\"\\\",\\\"type\\\":\\\"code\\\",\\\"ischecked\\\":true},{\\\"id\\\":\\\"0_0.5115127751704645\\\",\\\"code\\\":\\\"# change the Transaction Date format of A_Records:\\\\ndef change_dt_format(date):\\\\n    date_obj = datetime.strptime(date, '%b %d %Y %H:%M:%S')\\\\n    formatted_date = date_obj.strftime('%Y-%m-%d %H:%M:%S')\\\\n    return formatted_date\\\\ndef currency_coversion(currency_string):\\\\n    match = re.search(r'[\\\\\\\\d,]+\\\\\\\\.?\\\\\\\\d*', currency_string)\\\\n    if match:\\\\n        numeric_value = float(match.group().replace(',', ''))\\\\n    return numeric_value\\\\ndef change_date_format(date):\\\\n    date_obj = datetime.strptime(date, \\\\\\\"%b %d, %Y @ %H:%M:%S.%f\\\\\\\")\\\\n    formatted_date = date_obj.strftime(\\\\\\\"%Y-%m-%d\\\\\\\")\\\\n    return formatted_date\\\\n\\\\ndf_A_Records[\\\\\\\"Transaction Date\\\\\\\"] = df_A_Records[\\\\\\\"Transaction Date\\\\\\\"].apply(change_dt_format)\\\\ndf_A_Records[\\\\\\\"Transaction Date\\\\\\\"] = pd.to_datetime(df_A_Records[\\\\\\\"Transaction Date\\\\\\\"])\\\\ndf_kibana[\\\\\\\"Time\\\\\\\"] = df_kibana[\\\\\\\"Time\\\\\\\"].apply(change_date_format)\\\\ndf_A_Records[\\\\\\\"Amount\\\\\\\"] = df_A_Records[\\\\\\\"Amount\\\\\\\"].apply(currency_coversion) \\\\ndf_A_Records[\\\\\\\"Service Fee\\\\\\\"] = df_A_Records[\\\\\\\"Service Fee\\\\\\\"].apply(currency_coversion) \\\",\\\"count\\\":0,\\\"error\\\":\\\"\\\",\\\"type\\\":\\\"code\\\",\\\"ischecked\\\":true},{\\\"id\\\":\\\"0_0.053290117168534934\\\",\\\"code\\\":\\\"df_logs_web.rename({\\\\\\\"result_event_result\\\\\\\":\\\\\\\"result_pay_result\\\\\\\"},axis=1,inplace=True)\\\\nresult_logs = pd.concat([df_logs_inapp,df_logs_web],axis=0,ignore_index=True)\\\\nresult_logs[\\\\\\\"event_amt\\\\\\\"] = result_logs[\\\\\\\"event_amt\\\\\\\"].astype(str)\\\",\\\"count\\\":0,\\\"error\\\":\\\"\\\",\\\"type\\\":\\\"code\\\",\\\"ischecked\\\":true},{\\\"id\\\":\\\"0_0.6705458104487438\\\",\\\"code\\\":\\\"def user_1_CXM(inputs, input_date_time, df_CXM):\\\\n    \\\\n    if inputs[\\\\\\\"mobile_number\\\\\\\"].iloc[-1] not in df_CXM[\\\\\\\"mobile_number\\\\\\\"].values:\\\\n        raise ValueError(\\\\\\\"Mobile Number not identified for the transaction\\\\\\\")\\\\n\\\\n    # Filter DataFrame by mobile number\\\\n    filtered_df = df_CXM[df_CXM[\\\\\\\"mobile_number\\\\\\\"] == inputs[\\\\\\\"mobile_number\\\\\\\"].iloc[-1]]\\\\n\\\\n    # Ensure the input_date_time exists for that mobile number\\\\n    if input_date_time not in filtered_df[\\\\\\\"Date and Time of Transaction\\\\\\\"].values:\\\\n        raise ValueError(\\\\\\\"Transaction doesn't exist for the given date and time on this mobile number\\\\\\\")\\\\n\\\\n    # Extract the relevant row based on the date and time of transaction\\\\n    filtered_df_update = filtered_df[filtered_df[\\\\\\\"Date and Time of Transaction\\\\\\\"] == input_date_time]\\\\n    \\\\n    # Ensure disputed amount is present and then filter accordingly    \\\\n    if inputs[\\\\\\\"amount\\\\\\\"].iloc[-1] not in filtered_df_update[\\\\\\\"Disputed Amount\\\\\\\"].values:\\\\n        raise ValueError(\\\\\\\"Transaction Amount not Present\\\\\\\")\\\\n\\\\n    \\\\n    CXM_data = filtered_df_update[filtered_df_update[\\\\\\\"Disputed Amount\\\\\\\"] == inputs[\\\\\\\"amount\\\\\\\"].iloc[-1]]\\\\n\\\\n\\\\n    ticket_id = CXM_data[\\\\\\\"Ticket ID\\\\\\\"].iloc[-1]\\\\n    dispute_date = CXM_data[\\\\\\\"Date_Coverage\\\\\\\"].iloc[-1]\\\\n    dispute_amount = CXM_data[\\\\\\\"Disputed Amount\\\\\\\"].iloc[-1]\\\\n    Transaction_type = CXM_data[\\\\\\\"Type of Transaction\\\\\\\"].iloc[-1]\\\\n    Recipient_Mobile_Bank_Number = CXM_data[\\\\\\\"Recipient Mobile#/Bank Account# (Test Numbers)\\\\\\\"].iloc[-1]\\\\n    amt_be_recovered = CXM_data[\\\\\\\"Amount that can be recovered\\\\\\\"].iloc[-1]\\\\n    Modus = CXM_data[\\\\\\\"Modus\\\\\\\"].iloc[-1]\\\\n    \\\\n    dispute_amount = str(dispute_amount)\\\\n    claim = \\\\\\\"False Claim\\\\\\\" if input_date_time < dispute_date else \\\\\\\"ATO\\\\\\\"\\\\n#     dispute_amount = str(dispute_amount)\\\\n    return ticket_id, dispute_date, dispute_amount, Transaction_type, Recipient_Mobile_Bank_Number, amt_be_recovered, Modus, claim,CXM_data\\\\n\\\",\\\"count\\\":0,\\\"error\\\":\\\"\\\",\\\"type\\\":\\\"code\\\",\\\"ischecked\\\":true},{\\\"id\\\":\\\"0_0.10186432993966776\\\",\\\"code\\\":\\\"def user_1_A_records(inputs,input_date_time,df_A_Records):\\\\n    try:\\\\n        # Check if the mobile number exists in 'Source (Test Data)'\\\\n        if inputs[\\\\\\\"mobile_number\\\\\\\"].iloc[-1] in df_A_Records[\\\\\\\"Source (Test Data)\\\\\\\"].values:\\\\n            logging.info(\\\\\\\"mobile ok\\\\\\\")\\\\n            # Check if input_date_time exists for the corresponding mobile number\\\\n            global matching_records\\\\n            global filtered_df\\\\n            \\\\n            matching_records = df_A_Records[df_A_Records[\\\\\\\"Source (Test Data)\\\\\\\"] == inputs[\\\\\\\"mobile_number\\\\\\\"].iloc[-1]]\\\\n            if input_date_time in matching_records[\\\\\\\"Transaction Date\\\\\\\"].values:\\\\n                logging.info(\\\\\\\"transaction ok\\\\\\\")\\\\n                # Filter records by both mobile number and date\\\\n                filtered_df = matching_records[matching_records[\\\\\\\"Transaction Date\\\\\\\"] == input_date_time]\\\\n                filtered_df[\\\\\\\"A+ Transaction ID\\\\\\\"] = filtered_df[\\\\\\\"A+ Transaction ID\\\\\\\"].astype('str')\\\\n                logging.info(\\\\\\\"filtered df\\\\\\\")\\\\n                # Check if reference ID is there or not and filter accordingly\\\\n                if str(inputs[\\\\\\\"reference_id\\\\\\\"].iloc[-1]) in filtered_df[\\\\\\\"A+ Transaction ID\\\\\\\"].values:\\\\n                    logging.info(\\\\\\\"A+ ok\\\\\\\")\\\\n                    global new_df\\\\n                    new_df = filtered_df[filtered_df[\\\\\\\"A+ Transaction ID\\\\\\\"] == str(inputs[\\\\\\\"reference_id\\\\\\\"].iloc[-1])]\\\\n\\\\n                    # Verify the amount and status as well\\\\n                    if inputs[\\\\\\\"amount\\\\\\\"].iloc[-1] == new_df[\\\\\\\"Amount\\\\\\\"].iloc[-1]:\\\\n                        logging.info(\\\\\\\"AMOUNT OK!\\\\\\\")\\\\n                        if new_df[\\\\\\\"Transaction Status\\\\\\\"].iloc[-1] == 'SUCCESS':\\\\n                            logging.info(\\\\\\\"Transaction Exists!\\\\\\\")\\\\n                            # Extract relevant information\\\\n                            product_type = new_df[\\\\\\\"Product Type\\\\\\\"].iloc[-1]\\\\n                            product_name = new_df[\\\\\\\"Product Name\\\\\\\"].iloc[-1]\\\\n                        else:\\\\n                            raise ValueError(\\\\\\\"Transaction was not a SUCCESS\\\\\\\")\\\\n                    else:\\\\n                        raise ValueError(\\\\\\\"Amount mismatch\\\\\\\")\\\\n                else:\\\\n                    raise KeyError(\\\\\\\"Reference ID not found\\\\\\\")\\\\n            else:\\\\n                raise KeyError(\\\\\\\"Transaction doesn't Exist for Specific Date and Time on this Mobile Number\\\\\\\")\\\\n        else:\\\\n            raise KeyError(f\\\\\\\"Transaction corresponding to {inputs['mobile_number'].iloc[-1]} not present in A+ Records\\\\\\\")\\\\n\\\\n    except KeyError as e:\\\\n        print(f\\\\\\\"Response: {e}\\\\\\\")\\\\n        return None, None, None  # Returning None values if key checks fail\\\\n    except ValueError as e:\\\\n        print(f\\\\\\\"Response: {e}\\\\\\\")\\\\n        return None, None, None  # Returning None values if amount/status checks fail\\\\n    except Exception as e:\\\\n        print(f\\\\\\\"Response: {e}\\\\\\\")\\\\n        return None, None, None  # Catch-all for any other unexpected errors\\\\n\\\\n    return product_type, product_name, new_df\\\",\\\"count\\\":0,\\\"error\\\":\\\"\\\",\\\"type\\\":\\\"code\\\",\\\"ischecked\\\":true},{\\\"id\\\":\\\"0_0.08607706945670812\\\",\\\"code\\\":\\\"def user_2_terminal_type(inputs,df_logs_inapp,dispute_amount):\\\\n    inapp = df_logs_inapp[df_logs_inapp[\\\\\\\"user_mobile\\\\\\\"]==inputs[\\\\\\\"mobile_number\\\\\\\"].iloc[-1]]\\\\n    if dispute_amount in inapp[\\\\\\\"event_amt\\\\\\\"].values:\\\\n            txn = inapp[inapp[\\\\\\\"event_amt\\\\\\\"] == dispute_amount]\\\\n            txn = txn[txn[\\\\\\\"result_pay_result\\\\\\\"]=='payment_success']\\\\n            terminal_type = txn[\\\\\\\"terminal_type\\\\\\\"].iloc[-1]\\\\n            result_pay_result = txn[\\\\\\\"result_pay_result\\\\\\\"].iloc[-1]\\\\n            fuzzy_device_id = txn[\\\\\\\"fuzzy_device_id\\\\\\\"].iloc[-1]\\\\n            login_udid = txn[\\\\\\\"login_udid\\\\\\\"].iloc[-1]\\\\n    return terminal_type,result_pay_result,fuzzy_device_id,login_udid,txn\\\\n\\\\n\\\",\\\"count\\\":0,\\\"error\\\":\\\"\\\",\\\"type\\\":\\\"code\\\",\\\"ischecked\\\":true},{\\\"id\\\":\\\"0_0.8780598846262331\\\",\\\"code\\\":\\\"def user_2_face_score(terminal_type,df_doublesafe,login_udid):\\\\n    filter_safe = df_doublesafe[df_doublesafe[\\\\\\\"device_id\\\\\\\"]==login_udid]\\\\n    event_id_doublesafe = filter_safe[\\\\\\\"event_id\\\\\\\"].iloc[-1]\\\\n    face_score = filter_safe[\\\\\\\"face_score\\\\\\\"].iloc[-1]\\\\n    verification_method = filter_safe[\\\\\\\"result_verification_method\\\\\\\"].iloc[-1]\\\\n    gmt_occur_face_verification = filter_safe[\\\\\\\"gmt_occur\\\\\\\"].iloc[-1]\\\\n    print(f\\\\\\\"\\\\\\\"\\\\\\\"\\\\n    The DoubleSafe Link Event ID: {event_id_doublesafe}\\\\n    Detected Face Score: {face_score}\\\\n    The Verification Method: {verification_method}\\\\n    Time of Event Verification: {gmt_occur_face_verification}\\\\n    \\\\\\\"\\\\\\\"\\\\\\\",\\\\\\\"\\\\\\\\n\\\\\\\")\\\\n    return event_id_doublesafe, face_score, verification_method, gmt_occur_face_verification, filter_safe\\\\n\\\\n\\\\ndef user_2_UDID_history_check(df_Logs_UDID,login_udid,input_date_time):\\\\n    if login_udid in df_Logs_UDID[\\\\\\\"cohort\\\\\\\"].values:\\\\n        max_date = pd.to_datetime(df_Logs_UDID[df_Logs_UDID[\\\\\\\"cohort\\\\\\\"]==login_udid][\\\\\\\"max_trans_date\\\\\\\"].iloc[-1],errors=\\\\\\\"coerce\\\\\\\")\\\\n        min_date = pd.to_datetime(df_Logs_UDID[df_Logs_UDID[\\\\\\\"cohort\\\\\\\"]==login_udid][\\\\\\\"min_trans_date\\\\\\\"].iloc[-1],errors=\\\\\\\"coerce\\\\\\\")\\\\n        current_transaction_date = input_date_time\\\\n        print(f'Minimum_transaction_date : {min_date}')\\\\n        print(f'Reported_transaction_date: {current_transaction_date}')\\\\n        print(f'Maximum_transaction_date : {max_date}',\\\\\\\"\\\\\\\\n\\\\\\\")\\\\n        print(f'UDID is:{login_udid}')\\\\n        # if transaction time is between min_trans_date and max_trans_date of the the cohort then UDID is part of history\\\\n        if (current_transaction_date > min_date) & (current_transaction_date < max_date):\\\\n\\\\n            status = \\\\\\\"UDID is part of Device History, as the UDID based transaction is inside the Cohort Timeline\\\\\\\"\\\\n        else:\\\\n            status = \\\\\\\"UDID is not part of the Device History.\\\\\\\"\\\\n    else:\\\\n        logging.info(\\\\\\\"UDID not found\\\\\\\")\\\\n    return max_date, min_date,status\\\\n\\\\n\\\\ndef user_2_successfull_txn(df_logs_inapp,login_udid):\\\\n    if login_udid in df_logs_inapp[\\\\\\\"login_udid\\\\\\\"].values:\\\\n        df_udid = df_logs_inapp[df_logs_inapp[\\\\\\\"login_udid\\\\\\\"]==login_udid]\\\\n        number_successful_payment = len(df_udid[df_udid[\\\\\\\"result_pay_result\\\\\\\"]==\\\\\\\"payment_success\\\\\\\"])\\\\n    return number_successful_payment\\\",\\\"count\\\":0,\\\"error\\\":\\\"\\\",\\\"type\\\":\\\"code\\\",\\\"ischecked\\\":true},{\\\"id\\\":\\\"35695431341_0.3964182166342116\\\",\\\"code\\\":\\\"def user_story_3_updated(inputs,df_kibana):\\\\n    kibana_df = df_kibana[(df_kibana[\\\\\\\"destinationNumber\\\\\\\"]==str(inputs.mobile_number.iloc[-1]))]\\\\n    date_check = inputs[\\\\\\\"date_time_transaction\\\\\\\"].iloc[-1].split(\\\\\\\" \\\\\\\")[0]\\\\n    if \\\\\\\"OTP-DEFAULT\\\\\\\" in kibana_df[kibana_df[\\\\\\\"Time\\\\\\\"]==date_check][\\\\\\\"sourceNumber\\\\\\\"].values:\\\\n        OTP_Status= \\\\\\\"There is an OTP\\\\\\\"\\\\n\\\\n    else:\\\\n        OTP_Status = \\\\\\\"No OTP\\\\\\\"\\\\n    \\\\n    return OTP_Status\\\",\\\"count\\\":0,\\\"error\\\":\\\"\\\",\\\"type\\\":\\\"code\\\",\\\"ischecked\\\":true},{\\\"id\\\":\\\"0_0.8907808587796784\\\",\\\"code\\\":\\\"def user_story_4(result_logs,df_Logs_UDID,inputs,fuzzy_device_id):\\\\n    global result_df\\\\n    global filtered_number\\\\n    global filtered_df\\\\n    global cohort_val\\\\n    global df_safe\\\\n    result_df = result_logs[result_logs[\\\\\\\"terminal_type\\\\\\\"]!=\\\\\\\"APP\\\\\\\"]\\\\n    filtered_number = result_df[result_df[\\\\\\\"user_mobile\\\\\\\"]==inputs[\\\\\\\"mobile_number\\\\\\\"].iloc[-1]]\\\\n    filtered_df = filtered_number[filtered_number[\\\\\\\"event_amt\\\\\\\"]==str(float(inputs[\\\\\\\"amount\\\\\\\"].iloc[-1]))]\\\\n    logging.info(\\\\\\\"filtered\\\\\\\")\\\\n    if 'payment_success' in filtered_df[\\\\\\\"result_pay_result\\\\\\\"].values:\\\\n        logging.info(\\\\\\\"Success\\\\\\\")\\\\n        df = filtered_df[filtered_df['result_pay_result']==\\\\\\\"payment_success\\\\\\\"]\\\\n        logging.info(\\\\\\\"df\\\\\\\")\\\\n        time = df[\\\\\\\"gmt_occur\\\\\\\"].iloc[-1]\\\\n        event_name = df[\\\\\\\"event_name\\\\\\\"].iloc[-1]\\\\n        fuzzy_id_df = df_Logs_Fuzzy[df_Logs_Fuzzy[\\\\\\\"user_mobile\\\\\\\"]==inputs.mobile_number.iloc[-1]][df_Logs_Fuzzy[df_Logs_Fuzzy[\\\\\\\"user_mobile\\\\\\\"]==inputs.mobile_number.iloc[-1]][\\\\\\\"cohort\\\\\\\"]==fuzzy_device_id]\\\\n        logging.info(\\\\\\\"fuzzy_id\\\\\\\")\\\\n        if event_name in fuzzy_id_df[\\\\\\\"event_name\\\\\\\"].values:\\\\n            date_time = fuzzy_id_df[\\\\\\\"first_date\\\\\\\"].iloc[-1]\\\\n            df_Logs_UDID[\\\\\\\"min_trans_date\\\\\\\"] = pd.to_datetime(df_Logs_UDID[\\\\\\\"min_trans_date\\\\\\\"])\\\\n            df_Logs_UDID[\\\\\\\"max_trans_date\\\\\\\"] =pd.to_datetime(df_Logs_UDID[\\\\\\\"max_trans_date\\\\\\\"])\\\\n            logging.info(\\\\\\\"udid_id\\\\\\\")\\\\n            filter_udid = (df_Logs_UDID[df_Logs_UDID[\\\\\\\"msisdn\\\\\\\"]==inputs.mobile_number.iloc[-1]])\\\\n            filter_udid = filter_udid.sort_values(by=\\\\\\\"max_trans_date\\\\\\\",ascending=False)\\\\n            logging.info(\\\\\\\"filter_udid\\\\\\\")\\\\n            cohort_val = filter_udid[(date_time >= filter_udid[\\\\\\\"min_trans_date\\\\\\\"]) & (date_time <= filter_udid[\\\\\\\"max_trans_date\\\\\\\"])].cohort.iloc[-1]\\\\n            print(f\\\\\\\"Cohort Value: {cohort_val}\\\\\\\")\\\\n            doublesafe_df = df_doublesafe[df_doublesafe[\\\\\\\"user_mobile\\\\\\\"]==inputs.mobile_number.iloc[-1]]\\\\n            logging.info(\\\\\\\"doublesafe\\\\\\\")\\\\n            df_safe = doublesafe_df[doublesafe_df[\\\\\\\"device_id\\\\\\\"]==cohort_val]\\\\n            # The GMT occurence is within the date_time of transaction:\\\\n            df_safe = df_safe[df_safe[\\\\\\\"gmt_occur\\\\\\\"]<=str(date_time)]\\\\n            logging.info(\\\\\\\"df_safe\\\\\\\")\\\\n            return df_safe\\\",\\\"count\\\":0,\\\"error\\\":\\\"\\\",\\\"type\\\":\\\"code\\\",\\\"ischecked\\\":true},{\\\"id\\\":\\\"0_0.4818858078157986\\\",\\\"code\\\":\\\"def main_pipeline(inputs):\\\\n    input_date_time = pd.to_datetime(inputs[\\\\\\\"date_time_transaction\\\\\\\"].iloc[-1])\\\\n    \\\\n    ticket_id, dispute_date, dispute_amount, Transaction_type, Recipient_Mobile_Bank_Number, amt_be_recovered, Modus, claim,CXM_data = user_1_CXM(inputs, input_date_time, df_CXM)\\\\n    product_type, product_name, new_df = user_1_A_records(inputs,input_date_time,df_A_Records)\\\\n    terminal_type,result_pay_result,fuzzy_device_id,login_udid,txn = user_2_terminal_type(inputs,result_logs,dispute_amount) \\\\n    if terminal_type == \\\\\\\"APP\\\\\\\":\\\\n        logging.info(\\\\\\\"Terminal Type is APP:\\\\\\\")\\\\n        event_id_doublesafe, face_score, verification_method, gmt_occur_face_verification, filter_safe = user_2_face_score(terminal_type,df_doublesafe,login_udid)\\\\n        max_date, min_date,status = user_2_UDID_history_check(df_Logs_UDID,login_udid,input_date_time)   \\\\n        number_successful_payment = user_2_successfull_txn(df_logs_inapp,login_udid)\\\\n        \\\\n        dispute_date = dispute_date.strftime('%Y-%m-%d')\\\\n        return pd.DataFrame({\\\\\\\"Ticket_ID\\\\\\\" : [ticket_id],\\\\n            \\\\\\\"Dispute Date\\\\\\\": [dispute_date],\\\\n            \\\\\\\"Disputed Amount\\\\\\\": [dispute_amount],\\\\n            \\\\\\\"Transaction Type\\\\\\\": [Transaction_type],\\\\n            \\\\\\\"Recipient Mobile/Bank Number\\\\\\\": [Recipient_Mobile_Bank_Number],\\\\n            \\\\\\\"Amount to be Recovered\\\\\\\": [amt_be_recovered],\\\\n            \\\\\\\"Modus\\\\\\\": [Modus],\\\\n            \\\\\\\"Response_Claimed\\\\\\\": [claim],\\\\n            \\\\\\\"product_type\\\\\\\": [product_type],\\\\n            \\\\\\\"product_name\\\\\\\": [product_name],\\\\n            \\\\\\\"Terminal_Type\\\\\\\":[terminal_type],\\\\n            \\\\\\\"Payment_Result\\\\\\\":[result_pay_result],\\\\n            \\\\\\\"fuzzy_device_id\\\\\\\":[fuzzy_device_id],\\\\n            \\\\\\\"UDID\\\\\\\":[login_udid],\\\\n            \\\\\\\"Status of UDID\\\\\\\":[status],\\\\n            \\\\\\\"Doublesafe_Event_ID\\\\\\\" :[event_id_doublesafe],\\\\n            \\\\\\\"Verification_Method \\\\\\\":[verification_method],\\\\n            \\\\\\\"GMT_Verification\\\\\\\":[gmt_occur_face_verification],\\\\n            \\\\\\\"Detected_Face_Score\\\\\\\":[face_score]  ,\\\\n            \\\\\\\"No_of_Successful_Payments\\\\\\\":[number_successful_payment]\\\\n            })\\\\n    else:\\\\n        #user Story 3 starts\\\\n        logging.info(\\\\\\\"User Story 3\\\\\\\")\\\\n        OTP_Status = user_story_3_updated(inputs,df_kibana)\\\\n        logging.info(\\\\\\\"User Story 4\\\\\\\")\\\\n        # User Story 4 checks!\\\\n        df_safe = user_story_4(result_logs,df_Logs_UDID,inputs,fuzzy_device_id)\\\\n        face_scores_ = []\\\\n        occur_dates = []\\\\n        message = \\\\\\\" \\\\\\\"\\\\n        # USer Story 4 checks if Face is detected Else Moves to Kibana logs and merge user story 6(Since Face not detected)\\\\n\\\\n        # Check if 'ZOLOZ_FACE' exists in the 'result_verification_method' column\\\\n        if 'ZOLOZ_FACE' in df_safe[\\\\\\\"result_verification_method\\\\\\\"].values:\\\\n            # Collect all face scores and occurrence dates as lists\\\\n            face_scores_ = df_safe[\\\\\\\"face_score\\\\\\\"].tolist()\\\\n            occur_dates = df_safe[\\\\\\\"gmt_occur\\\\\\\"].tolist()\\\\n            result_dict = {\\\\\\\"face_score\\\\\\\": face_scores_, \\\\\\\"gmt_occur\\\\\\\": occur_dates}\\\\n            df_safe = df_safe[df_safe[\\\\\\\"result_verification_method\\\\\\\"]=='ZOLOZ_FACE']                \\\\n        else:\\\\n            kibana_df = df_kibana[(df_kibana[\\\\\\\"destinationNumber\\\\\\\"]==str(inputs.mobile_number.iloc[-1]))]\\\\n            date_check = inputs[\\\\\\\"date_time_transaction\\\\\\\"].iloc[-1].split(\\\\\\\" \\\\\\\")[0]\\\\n            if \\\\\\\"MAC_SMS\\\\\\\" in kibana_df[kibana_df[\\\\\\\"Time\\\\\\\"]==date_check][\\\\\\\"sourceNumber\\\\\\\"].values:\\\\n                message = \\\\\\\"There is MAC-SMS\\\\\\\"\\\\n                     \\\\n            else:\\\\n                message = \\\\\\\"NO MAC-SMS\\\\\\\"\\\\n\\\\n        # User Story 5:\\\\n        if len(face_scores_) > 0:\\\\n            for i,val in enumerate(face_scores_):\\\\n                gmt = occur_dates[i]\\\\n                try:\\\\n                    if int(val) >= 63:\\\\n\\\\n                        claim_response = f\\\\\\\"Face Match and False Claim!\\\\\\\"\\\\n                    else:\\\\n                        claim_response = f\\\\\\\"Not a face Match and ATO case\\\\\\\"\\\\n\\\\n                except ValueError:\\\\n                    logging.info(f\\\\\\\"{gmt}: corresponding face score not detected properly\\\\\\\")\\\\n        #User story 6\\\\n        else:\\\\n            kibana_df = df_kibana[(df_kibana[\\\\\\\"destinationNumber\\\\\\\"]==str(inputs.mobile_number.iloc[-1]))]\\\\n            date_check = inputs[\\\\\\\"date_time_transaction\\\\\\\"].iloc[-1].split(\\\\\\\" \\\\\\\")[0]\\\\n            if \\\\\\\"MAC_SMS\\\\\\\" in kibana_df[kibana_df[\\\\\\\"Time\\\\\\\"]==date_check][\\\\\\\"sourceNumber\\\\\\\"].values:\\\\n                claim_response = \\\\\\\"It has MAC-SMS, hence its a False Claim !\\\\\\\"\\\\n            else:\\\\n                claim_response = \\\\\\\"NO MAC-SMS,hence ATO case !!\\\\\\\"\\\\n\\\\n        merchant_id = new_df[\\\\\\\"Merchant Trans ID\\\\\\\"].iloc[-1]\\\\n        A_txn_id = new_df[\\\\\\\"A+ Transaction ID\\\\\\\"].iloc[-1]  \\\\n        \\\\n        dispute_date = dispute_date.strftime('%Y-%m-%d')\\\\n        return pd.DataFrame({\\\\\\\"Ticket_ID\\\\\\\" : [ticket_id],\\\\n            \\\\\\\"Dispute Date\\\\\\\": [dispute_date],\\\\n            \\\\\\\"Disputed Amount\\\\\\\": [dispute_amount],\\\\n            \\\\\\\"Transaction Type\\\\\\\": [Transaction_type],\\\\n            \\\\\\\"product_type\\\\\\\": [product_type],\\\\n            \\\\\\\"product_name\\\\\\\": [product_name],\\\\n            \\\\\\\"fuzzy_device_id\\\\\\\":[fuzzy_device_id],\\\\n            \\\\\\\"Terminal_Type\\\\\\\":[terminal_type],\\\\n            \\\\\\\"OTP_Status\\\\\\\":[OTP_Status],\\\\n            \\\\\\\"Face_Scores\\\\\\\":[face_scores_],\\\\n            \\\\\\\"Message\\\\\\\":[message],\\\\n            \\\\\\\"Response_Claimed\\\\\\\":[claim_response],\\\\n            \\\\\\\"Merchant_id\\\\\\\":[merchant_id],\\\\n            \\\\\\\"A+ Transaction ID\\\\\\\":[A_txn_id]})\\\\n    \\\\n#     except ValueError as e:\\\\n#         ticket_id, dispute_date, dispute_amount, Transaction_type, Recipient_Mobile_Bank_Number, amt_be_recovered, Modus, claim, = None,None,None,None,None,None,None,None\\\\n#         logging.info(f\\\\\\\"Response: {e}\\\\\\\")\\\\n\\\",\\\"count\\\":0,\\\"error\\\":\\\"\\\",\\\"type\\\":\\\"code\\\",\\\"ischecked\\\":true}]\",\"pipeline_content\":\"\\\"import pandas as pd\\\\nimport numpy as np\\\\nimport matplotlib.pyplot as plt\\\\nimport logging\\\\nimport re\\\\nfrom datetime import datetime\\\\nimport json\\\\nfrom Notebook.DSNotebook.NotebookExecutor import NotebookExecutor\\\\nnb = NotebookExecutor()\\\\ndf_CXM = nb.get_data('11111727249579788', '@SYS.USERID', 'True', {}, [])\\\\ndf_A_Records = nb.get_data('11111727249094446', '@SYS.USERID', 'True', {}, [])\\\\ndf_logs_inapp = nb.get_data('11111727250179094', '@SYS.USERID', 'True', {}, [])\\\\ndf_Logs_Fuzzy = nb.get_data('11111727249902767', '@SYS.USERID', 'True', {}, [])\\\\ndf_Logs_UDID = nb.get_data('11111727249921283', '@SYS.USERID', 'True', {}, [])\\\\ndf_logs_sms = nb.get_data('11111727250139530', '@SYS.USERID', 'True', {}, [])\\\\ndf_kibana = nb.get_data('11111727250122271', '@SYS.USERID', 'True', {}, [])\\\\ndf_doublesafe = nb.get_data('11111727249973467', '@SYS.USERID', 'True', {}, [])\\\\ndf_logs_web = nb.get_data('11111727250196261', '@SYS.USERID', 'True', {}, [])\\\\n\\\\ndf_CXM[\\\\\\\"Date_Transaction\\\\\\\"] = pd.to_datetime(pd.to_datetime(df_CXM[\\\\\\\"Date and Time of Transaction\\\\\\\"]).dt.date)\\\\ndf_CXM['Date and Time of Transaction'] = pd.to_datetime(df_CXM['Date and Time of Transaction'])\\\\ndf_CXM.rename({\\\\\\\"Complainant's\\\\\\\\nMobile# (Test Numbers)\\\\\\\":\\\\\\\"mobile_number\\\\\\\"},axis=1,inplace=True)\\\\ndf_kibana = df_kibana[~(df_kibana[\\\\\\\"Time\\\\\\\"]==\\\\\\\"Time\\\\\\\")]\\\\n# change the Transaction Date format of A_Records:\\\\ndef change_dt_format(date):\\\\n    date_obj = datetime.strptime(date, '%b %d %Y %H:%M:%S')\\\\n    formatted_date = date_obj.strftime('%Y-%m-%d %H:%M:%S')\\\\n    return formatted_date\\\\ndef currency_coversion(currency_string):\\\\n    match = re.search(r'[\\\\\\\\d,]+\\\\\\\\.?\\\\\\\\d*', currency_string)\\\\n    if match:\\\\n        numeric_value = float(match.group().replace(',', ''))\\\\n    return numeric_value\\\\ndef change_date_format(date):\\\\n    date_obj = datetime.strptime(date, \\\\\\\"%b %d, %Y @ %H:%M:%S.%f\\\\\\\")\\\\n    formatted_date = date_obj.strftime(\\\\\\\"%Y-%m-%d\\\\\\\")\\\\n    return formatted_date\\\\n\\\\ndf_A_Records[\\\\\\\"Transaction Date\\\\\\\"] = df_A_Records[\\\\\\\"Transaction Date\\\\\\\"].apply(change_dt_format)\\\\ndf_A_Records[\\\\\\\"Transaction Date\\\\\\\"] = pd.to_datetime(df_A_Records[\\\\\\\"Transaction Date\\\\\\\"])\\\\ndf_kibana[\\\\\\\"Time\\\\\\\"] = df_kibana[\\\\\\\"Time\\\\\\\"].apply(change_date_format)\\\\ndf_A_Records[\\\\\\\"Amount\\\\\\\"] = df_A_Records[\\\\\\\"Amount\\\\\\\"].apply(currency_coversion) \\\\ndf_A_Records[\\\\\\\"Service Fee\\\\\\\"] = df_A_Records[\\\\\\\"Service Fee\\\\\\\"].apply(currency_coversion) \\\\ndf_logs_web.rename({\\\\\\\"result_event_result\\\\\\\":\\\\\\\"result_pay_result\\\\\\\"},axis=1,inplace=True)\\\\nresult_logs = pd.concat([df_logs_inapp,df_logs_web],axis=0,ignore_index=True)\\\\nresult_logs[\\\\\\\"event_amt\\\\\\\"] = result_logs[\\\\\\\"event_amt\\\\\\\"].astype(str)\\\\ndef user_1_CXM(inputs, input_date_time, df_CXM):\\\\n    \\\\n    if inputs[\\\\\\\"mobile_number\\\\\\\"].iloc[-1] not in df_CXM[\\\\\\\"mobile_number\\\\\\\"].values:\\\\n        raise ValueError(\\\\\\\"Mobile Number not identified for the transaction\\\\\\\")\\\\n\\\\n    # Filter DataFrame by mobile number\\\\n    filtered_df = df_CXM[df_CXM[\\\\\\\"mobile_number\\\\\\\"] == inputs[\\\\\\\"mobile_number\\\\\\\"].iloc[-1]]\\\\n\\\\n    # Ensure the input_date_time exists for that mobile number\\\\n    if input_date_time not in filtered_df[\\\\\\\"Date and Time of Transaction\\\\\\\"].values:\\\\n        raise ValueError(\\\\\\\"Transaction doesn't exist for the given date and time on this mobile number\\\\\\\")\\\\n\\\\n    # Extract the relevant row based on the date and time of transaction\\\\n    filtered_df_update = filtered_df[filtered_df[\\\\\\\"Date and Time of Transaction\\\\\\\"] == input_date_time]\\\\n    \\\\n    # Ensure disputed amount is present and then filter accordingly    \\\\n    if inputs[\\\\\\\"amount\\\\\\\"].iloc[-1] not in filtered_df_update[\\\\\\\"Disputed Amount\\\\\\\"].values:\\\\n        raise ValueError(\\\\\\\"Transaction Amount not Present\\\\\\\")\\\\n\\\\n    \\\\n    CXM_data = filtered_df_update[filtered_df_update[\\\\\\\"Disputed Amount\\\\\\\"] == inputs[\\\\\\\"amount\\\\\\\"].iloc[-1]]\\\\n\\\\n\\\\n    ticket_id = CXM_data[\\\\\\\"Ticket ID\\\\\\\"].iloc[-1]\\\\n    dispute_date = CXM_data[\\\\\\\"Date_Coverage\\\\\\\"].iloc[-1]\\\\n    dispute_amount = CXM_data[\\\\\\\"Disputed Amount\\\\\\\"].iloc[-1]\\\\n    Transaction_type = CXM_data[\\\\\\\"Type of Transaction\\\\\\\"].iloc[-1]\\\\n    Recipient_Mobile_Bank_Number = CXM_data[\\\\\\\"Recipient Mobile#/Bank Account# (Test Numbers)\\\\\\\"].iloc[-1]\\\\n    amt_be_recovered = CXM_data[\\\\\\\"Amount that can be recovered\\\\\\\"].iloc[-1]\\\\n    Modus = CXM_data[\\\\\\\"Modus\\\\\\\"].iloc[-1]\\\\n    \\\\n    dispute_amount = str(dispute_amount)\\\\n    claim = \\\\\\\"False Claim\\\\\\\" if input_date_time < dispute_date else \\\\\\\"ATO\\\\\\\"\\\\n#     dispute_amount = str(dispute_amount)\\\\n    return ticket_id, dispute_date, dispute_amount, Transaction_type, Recipient_Mobile_Bank_Number, amt_be_recovered, Modus, claim,CXM_data\\\\n\\\\ndef user_1_A_records(inputs,input_date_time,df_A_Records):\\\\n    try:\\\\n        # Check if the mobile number exists in 'Source (Test Data)'\\\\n        if inputs[\\\\\\\"mobile_number\\\\\\\"].iloc[-1] in df_A_Records[\\\\\\\"Source (Test Data)\\\\\\\"].values:\\\\n            logging.info(\\\\\\\"mobile ok\\\\\\\")\\\\n            # Check if input_date_time exists for the corresponding mobile number\\\\n            global matching_records\\\\n            global filtered_df\\\\n            \\\\n            matching_records = df_A_Records[df_A_Records[\\\\\\\"Source (Test Data)\\\\\\\"] == inputs[\\\\\\\"mobile_number\\\\\\\"].iloc[-1]]\\\\n            if input_date_time in matching_records[\\\\\\\"Transaction Date\\\\\\\"].values:\\\\n                logging.info(\\\\\\\"transaction ok\\\\\\\")\\\\n                # Filter records by both mobile number and date\\\\n                filtered_df = matching_records[matching_records[\\\\\\\"Transaction Date\\\\\\\"] == input_date_time]\\\\n                filtered_df[\\\\\\\"A+ Transaction ID\\\\\\\"] = filtered_df[\\\\\\\"A+ Transaction ID\\\\\\\"].astype('str')\\\\n                logging.info(\\\\\\\"filtered df\\\\\\\")\\\\n                # Check if reference ID is there or not and filter accordingly\\\\n                if str(inputs[\\\\\\\"reference_id\\\\\\\"].iloc[-1]) in filtered_df[\\\\\\\"A+ Transaction ID\\\\\\\"].values:\\\\n                    logging.info(\\\\\\\"A+ ok\\\\\\\")\\\\n                    global new_df\\\\n                    new_df = filtered_df[filtered_df[\\\\\\\"A+ Transaction ID\\\\\\\"] == str(inputs[\\\\\\\"reference_id\\\\\\\"].iloc[-1])]\\\\n\\\\n                    # Verify the amount and status as well\\\\n                    if inputs[\\\\\\\"amount\\\\\\\"].iloc[-1] == new_df[\\\\\\\"Amount\\\\\\\"].iloc[-1]:\\\\n                        logging.info(\\\\\\\"AMOUNT OK!\\\\\\\")\\\\n                        if new_df[\\\\\\\"Transaction Status\\\\\\\"].iloc[-1] == 'SUCCESS':\\\\n                            logging.info(\\\\\\\"Transaction Exists!\\\\\\\")\\\\n                            # Extract relevant information\\\\n                            product_type = new_df[\\\\\\\"Product Type\\\\\\\"].iloc[-1]\\\\n                            product_name = new_df[\\\\\\\"Product Name\\\\\\\"].iloc[-1]\\\\n                        else:\\\\n                            raise ValueError(\\\\\\\"Transaction was not a SUCCESS\\\\\\\")\\\\n                    else:\\\\n                        raise ValueError(\\\\\\\"Amount mismatch\\\\\\\")\\\\n                else:\\\\n                    raise KeyError(\\\\\\\"Reference ID not found\\\\\\\")\\\\n            else:\\\\n                raise KeyError(\\\\\\\"Transaction doesn't Exist for Specific Date and Time on this Mobile Number\\\\\\\")\\\\n        else:\\\\n            raise KeyError(f\\\\\\\"Transaction corresponding to {inputs['mobile_number'].iloc[-1]} not present in A+ Records\\\\\\\")\\\\n\\\\n    except KeyError as e:\\\\n        print(f\\\\\\\"Response: {e}\\\\\\\")\\\\n        return None, None, None  # Returning None values if key checks fail\\\\n    except ValueError as e:\\\\n        print(f\\\\\\\"Response: {e}\\\\\\\")\\\\n        return None, None, None  # Returning None values if amount/status checks fail\\\\n    except Exception as e:\\\\n        print(f\\\\\\\"Response: {e}\\\\\\\")\\\\n        return None, None, None  # Catch-all for any other unexpected errors\\\\n\\\\n    return product_type, product_name, new_df\\\\ndef user_2_terminal_type(inputs,df_logs_inapp,dispute_amount):\\\\n    inapp = df_logs_inapp[df_logs_inapp[\\\\\\\"user_mobile\\\\\\\"]==inputs[\\\\\\\"mobile_number\\\\\\\"].iloc[-1]]\\\\n    if dispute_amount in inapp[\\\\\\\"event_amt\\\\\\\"].values:\\\\n            txn = inapp[inapp[\\\\\\\"event_amt\\\\\\\"] == dispute_amount]\\\\n            txn = txn[txn[\\\\\\\"result_pay_result\\\\\\\"]=='payment_success']\\\\n            terminal_type = txn[\\\\\\\"terminal_type\\\\\\\"].iloc[-1]\\\\n            result_pay_result = txn[\\\\\\\"result_pay_result\\\\\\\"].iloc[-1]\\\\n            fuzzy_device_id = txn[\\\\\\\"fuzzy_device_id\\\\\\\"].iloc[-1]\\\\n            login_udid = txn[\\\\\\\"login_udid\\\\\\\"].iloc[-1]\\\\n    return terminal_type,result_pay_result,fuzzy_device_id,login_udid,txn\\\\n\\\\n\\\\ndef user_2_face_score(terminal_type,df_doublesafe,login_udid):\\\\n    filter_safe = df_doublesafe[df_doublesafe[\\\\\\\"device_id\\\\\\\"]==login_udid]\\\\n    event_id_doublesafe = filter_safe[\\\\\\\"event_id\\\\\\\"].iloc[-1]\\\\n    face_score = filter_safe[\\\\\\\"face_score\\\\\\\"].iloc[-1]\\\\n    verification_method = filter_safe[\\\\\\\"result_verification_method\\\\\\\"].iloc[-1]\\\\n    gmt_occur_face_verification = filter_safe[\\\\\\\"gmt_occur\\\\\\\"].iloc[-1]\\\\n    print(f\\\\\\\"\\\\\\\"\\\\\\\"\\\\n    The DoubleSafe Link Event ID: {event_id_doublesafe}\\\\n    Detected Face Score: {face_score}\\\\n    The Verification Method: {verification_method}\\\\n    Time of Event Verification: {gmt_occur_face_verification}\\\\n    \\\\\\\"\\\\\\\"\\\\\\\",\\\\\\\"\\\\\\\\n\\\\\\\")\\\\n    return event_id_doublesafe, face_score, verification_method, gmt_occur_face_verification, filter_safe\\\\n\\\\n\\\\ndef user_2_UDID_history_check(df_Logs_UDID,login_udid,input_date_time):\\\\n    if login_udid in df_Logs_UDID[\\\\\\\"cohort\\\\\\\"].values:\\\\n        max_date = pd.to_datetime(df_Logs_UDID[df_Logs_UDID[\\\\\\\"cohort\\\\\\\"]==login_udid][\\\\\\\"max_trans_date\\\\\\\"].iloc[-1],errors=\\\\\\\"coerce\\\\\\\")\\\\n        min_date = pd.to_datetime(df_Logs_UDID[df_Logs_UDID[\\\\\\\"cohort\\\\\\\"]==login_udid][\\\\\\\"min_trans_date\\\\\\\"].iloc[-1],errors=\\\\\\\"coerce\\\\\\\")\\\\n        current_transaction_date = input_date_time\\\\n        print(f'Minimum_transaction_date : {min_date}')\\\\n        print(f'Reported_transaction_date: {current_transaction_date}')\\\\n        print(f'Maximum_transaction_date : {max_date}',\\\\\\\"\\\\\\\\n\\\\\\\")\\\\n        print(f'UDID is:{login_udid}')\\\\n        # if transaction time is between min_trans_date and max_trans_date of the the cohort then UDID is part of history\\\\n        if (current_transaction_date > min_date) & (current_transaction_date < max_date):\\\\n\\\\n            status = \\\\\\\"UDID is part of Device History, as the UDID based transaction is inside the Cohort Timeline\\\\\\\"\\\\n        else:\\\\n            status = \\\\\\\"UDID is not part of the Device History.\\\\\\\"\\\\n    else:\\\\n        logging.info(\\\\\\\"UDID not found\\\\\\\")\\\\n    return max_date, min_date,status\\\\n\\\\n\\\\ndef user_2_successfull_txn(df_logs_inapp,login_udid):\\\\n    if login_udid in df_logs_inapp[\\\\\\\"login_udid\\\\\\\"].values:\\\\n        df_udid = df_logs_inapp[df_logs_inapp[\\\\\\\"login_udid\\\\\\\"]==login_udid]\\\\n        number_successful_payment = len(df_udid[df_udid[\\\\\\\"result_pay_result\\\\\\\"]==\\\\\\\"payment_success\\\\\\\"])\\\\n    return number_successful_payment\\\\ndef user_story_3_updated(inputs,df_kibana):\\\\n    kibana_df = df_kibana[(df_kibana[\\\\\\\"destinationNumber\\\\\\\"]==str(inputs.mobile_number.iloc[-1]))]\\\\n    date_check = inputs[\\\\\\\"date_time_transaction\\\\\\\"].iloc[-1].split(\\\\\\\" \\\\\\\")[0]\\\\n    if \\\\\\\"OTP-DEFAULT\\\\\\\" in kibana_df[kibana_df[\\\\\\\"Time\\\\\\\"]==date_check][\\\\\\\"sourceNumber\\\\\\\"].values:\\\\n        OTP_Status= \\\\\\\"There is an OTP\\\\\\\"\\\\n\\\\n    else:\\\\n        OTP_Status = \\\\\\\"No OTP\\\\\\\"\\\\n    \\\\n    return OTP_Status\\\\ndef user_story_4(result_logs,df_Logs_UDID,inputs,fuzzy_device_id):\\\\n    global result_df\\\\n    global filtered_number\\\\n    global filtered_df\\\\n    global cohort_val\\\\n    global df_safe\\\\n    result_df = result_logs[result_logs[\\\\\\\"terminal_type\\\\\\\"]!=\\\\\\\"APP\\\\\\\"]\\\\n    filtered_number = result_df[result_df[\\\\\\\"user_mobile\\\\\\\"]==inputs[\\\\\\\"mobile_number\\\\\\\"].iloc[-1]]\\\\n    filtered_df = filtered_number[filtered_number[\\\\\\\"event_amt\\\\\\\"]==str(float(inputs[\\\\\\\"amount\\\\\\\"].iloc[-1]))]\\\\n    logging.info(\\\\\\\"filtered\\\\\\\")\\\\n    if 'payment_success' in filtered_df[\\\\\\\"result_pay_result\\\\\\\"].values:\\\\n        logging.info(\\\\\\\"Success\\\\\\\")\\\\n        df = filtered_df[filtered_df['result_pay_result']==\\\\\\\"payment_success\\\\\\\"]\\\\n        logging.info(\\\\\\\"df\\\\\\\")\\\\n        time = df[\\\\\\\"gmt_occur\\\\\\\"].iloc[-1]\\\\n        event_name = df[\\\\\\\"event_name\\\\\\\"].iloc[-1]\\\\n        fuzzy_id_df = df_Logs_Fuzzy[df_Logs_Fuzzy[\\\\\\\"user_mobile\\\\\\\"]==inputs.mobile_number.iloc[-1]][df_Logs_Fuzzy[df_Logs_Fuzzy[\\\\\\\"user_mobile\\\\\\\"]==inputs.mobile_number.iloc[-1]][\\\\\\\"cohort\\\\\\\"]==fuzzy_device_id]\\\\n        logging.info(\\\\\\\"fuzzy_id\\\\\\\")\\\\n        if event_name in fuzzy_id_df[\\\\\\\"event_name\\\\\\\"].values:\\\\n            date_time = fuzzy_id_df[\\\\\\\"first_date\\\\\\\"].iloc[-1]\\\\n            df_Logs_UDID[\\\\\\\"min_trans_date\\\\\\\"] = pd.to_datetime(df_Logs_UDID[\\\\\\\"min_trans_date\\\\\\\"])\\\\n            df_Logs_UDID[\\\\\\\"max_trans_date\\\\\\\"] =pd.to_datetime(df_Logs_UDID[\\\\\\\"max_trans_date\\\\\\\"])\\\\n            logging.info(\\\\\\\"udid_id\\\\\\\")\\\\n            filter_udid = (df_Logs_UDID[df_Logs_UDID[\\\\\\\"msisdn\\\\\\\"]==inputs.mobile_number.iloc[-1]])\\\\n            filter_udid = filter_udid.sort_values(by=\\\\\\\"max_trans_date\\\\\\\",ascending=False)\\\\n            logging.info(\\\\\\\"filter_udid\\\\\\\")\\\\n            cohort_val = filter_udid[(date_time >= filter_udid[\\\\\\\"min_trans_date\\\\\\\"]) & (date_time <= filter_udid[\\\\\\\"max_trans_date\\\\\\\"])].cohort.iloc[-1]\\\\n            print(f\\\\\\\"Cohort Value: {cohort_val}\\\\\\\")\\\\n            doublesafe_df = df_doublesafe[df_doublesafe[\\\\\\\"user_mobile\\\\\\\"]==inputs.mobile_number.iloc[-1]]\\\\n            logging.info(\\\\\\\"doublesafe\\\\\\\")\\\\n            df_safe = doublesafe_df[doublesafe_df[\\\\\\\"device_id\\\\\\\"]==cohort_val]\\\\n            # The GMT occurence is within the date_time of transaction:\\\\n            df_safe = df_safe[df_safe[\\\\\\\"gmt_occur\\\\\\\"]<=str(date_time)]\\\\n            logging.info(\\\\\\\"df_safe\\\\\\\")\\\\n            return df_safe\\\\ndef main_pipeline(inputs):\\\\n    input_date_time = pd.to_datetime(inputs[\\\\\\\"date_time_transaction\\\\\\\"].iloc[-1])\\\\n    \\\\n    ticket_id, dispute_date, dispute_amount, Transaction_type, Recipient_Mobile_Bank_Number, amt_be_recovered, Modus, claim,CXM_data = user_1_CXM(inputs, input_date_time, df_CXM)\\\\n    product_type, product_name, new_df = user_1_A_records(inputs,input_date_time,df_A_Records)\\\\n    terminal_type,result_pay_result,fuzzy_device_id,login_udid,txn = user_2_terminal_type(inputs,result_logs,dispute_amount) \\\\n    if terminal_type == \\\\\\\"APP\\\\\\\":\\\\n        logging.info(\\\\\\\"Terminal Type is APP:\\\\\\\")\\\\n        event_id_doublesafe, face_score, verification_method, gmt_occur_face_verification, filter_safe = user_2_face_score(terminal_type,df_doublesafe,login_udid)\\\\n        max_date, min_date,status = user_2_UDID_history_check(df_Logs_UDID,login_udid,input_date_time)   \\\\n        number_successful_payment = user_2_successfull_txn(df_logs_inapp,login_udid)\\\\n        \\\\n        dispute_date = dispute_date.strftime('%Y-%m-%d')\\\\n        return pd.DataFrame({\\\\\\\"Ticket_ID\\\\\\\" : [ticket_id],\\\\n            \\\\\\\"Dispute Date\\\\\\\": [dispute_date],\\\\n            \\\\\\\"Disputed Amount\\\\\\\": [dispute_amount],\\\\n            \\\\\\\"Transaction Type\\\\\\\": [Transaction_type],\\\\n            \\\\\\\"Recipient Mobile/Bank Number\\\\\\\": [Recipient_Mobile_Bank_Number],\\\\n            \\\\\\\"Amount to be Recovered\\\\\\\": [amt_be_recovered],\\\\n            \\\\\\\"Modus\\\\\\\": [Modus],\\\\n            \\\\\\\"Response_Claimed\\\\\\\": [claim],\\\\n            \\\\\\\"product_type\\\\\\\": [product_type],\\\\n            \\\\\\\"product_name\\\\\\\": [product_name],\\\\n            \\\\\\\"Terminal_Type\\\\\\\":[terminal_type],\\\\n            \\\\\\\"Payment_Result\\\\\\\":[result_pay_result],\\\\n            \\\\\\\"fuzzy_device_id\\\\\\\":[fuzzy_device_id],\\\\n            \\\\\\\"UDID\\\\\\\":[login_udid],\\\\n            \\\\\\\"Status of UDID\\\\\\\":[status],\\\\n            \\\\\\\"Doublesafe_Event_ID\\\\\\\" :[event_id_doublesafe],\\\\n            \\\\\\\"Verification_Method \\\\\\\":[verification_method],\\\\n            \\\\\\\"GMT_Verification\\\\\\\":[gmt_occur_face_verification],\\\\n            \\\\\\\"Detected_Face_Score\\\\\\\":[face_score]  ,\\\\n            \\\\\\\"No_of_Successful_Payments\\\\\\\":[number_successful_payment]\\\\n            })\\\\n    else:\\\\n        #user Story 3 starts\\\\n        logging.info(\\\\\\\"User Story 3\\\\\\\")\\\\n        OTP_Status = user_story_3_updated(inputs,df_kibana)\\\\n        logging.info(\\\\\\\"User Story 4\\\\\\\")\\\\n        # User Story 4 checks!\\\\n        df_safe = user_story_4(result_logs,df_Logs_UDID,inputs,fuzzy_device_id)\\\\n        face_scores_ = []\\\\n        occur_dates = []\\\\n        message = \\\\\\\" \\\\\\\"\\\\n        # USer Story 4 checks if Face is detected Else Moves to Kibana logs and merge user story 6(Since Face not detected)\\\\n\\\\n        # Check if 'ZOLOZ_FACE' exists in the 'result_verification_method' column\\\\n        if 'ZOLOZ_FACE' in df_safe[\\\\\\\"result_verification_method\\\\\\\"].values:\\\\n            # Collect all face scores and occurrence dates as lists\\\\n            face_scores_ = df_safe[\\\\\\\"face_score\\\\\\\"].tolist()\\\\n            occur_dates = df_safe[\\\\\\\"gmt_occur\\\\\\\"].tolist()\\\\n            result_dict = {\\\\\\\"face_score\\\\\\\": face_scores_, \\\\\\\"gmt_occur\\\\\\\": occur_dates}\\\\n            df_safe = df_safe[df_safe[\\\\\\\"result_verification_method\\\\\\\"]=='ZOLOZ_FACE']                \\\\n        else:\\\\n            kibana_df = df_kibana[(df_kibana[\\\\\\\"destinationNumber\\\\\\\"]==str(inputs.mobile_number.iloc[-1]))]\\\\n            date_check = inputs[\\\\\\\"date_time_transaction\\\\\\\"].iloc[-1].split(\\\\\\\" \\\\\\\")[0]\\\\n            if \\\\\\\"MAC_SMS\\\\\\\" in kibana_df[kibana_df[\\\\\\\"Time\\\\\\\"]==date_check][\\\\\\\"sourceNumber\\\\\\\"].values:\\\\n                message = \\\\\\\"There is MAC-SMS\\\\\\\"\\\\n                     \\\\n            else:\\\\n                message = \\\\\\\"NO MAC-SMS\\\\\\\"\\\\n\\\\n        # User Story 5:\\\\n        if len(face_scores_) > 0:\\\\n            for i,val in enumerate(face_scores_):\\\\n                gmt = occur_dates[i]\\\\n                try:\\\\n                    if int(val) >= 63:\\\\n\\\\n                        claim_response = f\\\\\\\"Face Match and False Claim!\\\\\\\"\\\\n                    else:\\\\n                        claim_response = f\\\\\\\"Not a face Match and ATO case\\\\\\\"\\\\n\\\\n                except ValueError:\\\\n                    logging.info(f\\\\\\\"{gmt}: corresponding face score not detected properly\\\\\\\")\\\\n        #User story 6\\\\n        else:\\\\n            kibana_df = df_kibana[(df_kibana[\\\\\\\"destinationNumber\\\\\\\"]==str(inputs.mobile_number.iloc[-1]))]\\\\n            date_check = inputs[\\\\\\\"date_time_transaction\\\\\\\"].iloc[-1].split(\\\\\\\" \\\\\\\")[0]\\\\n            if \\\\\\\"MAC_SMS\\\\\\\" in kibana_df[kibana_df[\\\\\\\"Time\\\\\\\"]==date_check][\\\\\\\"sourceNumber\\\\\\\"].values:\\\\n                claim_response = \\\\\\\"It has MAC-SMS, hence its a False Claim !\\\\\\\"\\\\n            else:\\\\n                claim_response = \\\\\\\"NO MAC-SMS,hence ATO case !!\\\\\\\"\\\\n\\\\n        merchant_id = new_df[\\\\\\\"Merchant Trans ID\\\\\\\"].iloc[-1]\\\\n        A_txn_id = new_df[\\\\\\\"A+ Transaction ID\\\\\\\"].iloc[-1]  \\\\n        \\\\n        dispute_date = dispute_date.strftime('%Y-%m-%d')\\\\n        return pd.DataFrame({\\\\\\\"Ticket_ID\\\\\\\" : [ticket_id],\\\\n            \\\\\\\"Dispute Date\\\\\\\": [dispute_date],\\\\n            \\\\\\\"Disputed Amount\\\\\\\": [dispute_amount],\\\\n            \\\\\\\"Transaction Type\\\\\\\": [Transaction_type],\\\\n            \\\\\\\"product_type\\\\\\\": [product_type],\\\\n            \\\\\\\"product_name\\\\\\\": [product_name],\\\\n            \\\\\\\"fuzzy_device_id\\\\\\\":[fuzzy_device_id],\\\\n            \\\\\\\"Terminal_Type\\\\\\\":[terminal_type],\\\\n            \\\\\\\"OTP_Status\\\\\\\":[OTP_Status],\\\\n            \\\\\\\"Face_Scores\\\\\\\":[face_scores_],\\\\n            \\\\\\\"Message\\\\\\\":[message],\\\\n            \\\\\\\"Response_Claimed\\\\\\\":[claim_response],\\\\n            \\\\\\\"Merchant_id\\\\\\\":[merchant_id],\\\\n            \\\\\\\"A+ Transaction ID\\\\\\\":[A_txn_id]})\\\\n    \\\\n#     except ValueError as e:\\\\n#         ticket_id, dispute_date, dispute_amount, Transaction_type, Recipient_Mobile_Bank_Number, amt_be_recovered, Modus, claim, = None,None,None,None,None,None,None,None\\\\n#         logging.info(f\\\\\\\"Response: {e}\\\\\\\")\\\\n\\\"\",\"externalLibraries\":\"[]\"}","description":"","lastcommittedDate":1730791089652,"isScheduled":null,"committedBy":15002175981,"type":2,"uuid":"11111730791089659","loggedUserId":null,"spaceKey":"1111","migrationId":null,"path":"","lastUpdatedDate":1730979548044,"createdDate":1730791089652,"createdBy":15002175981,"notebookName":"pipeline_v3","id":35695431341,"projectId":26458320859,"isShared":null,"status":1}}